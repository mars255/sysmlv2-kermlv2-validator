# Generated from ./SysMLv2.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,177,4069,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
        7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,
        2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,
        7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,
        1,0,1,0,1,0,1,1,5,1,1049,8,1,10,1,12,1,1052,9,1,1,2,1,2,1,2,1,2,
        3,2,1058,8,2,1,2,3,2,1061,8,2,1,3,1,3,1,3,5,3,1066,8,3,10,3,12,3,
        1069,9,3,1,3,3,3,1072,8,3,1,4,5,4,1075,8,4,10,4,12,4,1078,9,4,1,
        4,1,4,3,4,1082,8,4,1,4,3,4,1085,8,4,1,4,1,4,1,4,5,4,1090,8,4,10,
        4,12,4,1093,9,4,1,4,1,4,1,4,1,4,5,4,1099,8,4,10,4,12,4,1102,9,4,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,3,8,1116,8,8,1,9,
        1,9,3,9,1120,8,9,1,9,1,9,1,9,1,9,5,9,1126,8,9,10,9,12,9,1129,9,9,
        3,9,1131,8,9,3,9,1133,8,9,1,9,1,9,3,9,1137,8,9,1,9,1,9,1,10,1,10,
        3,10,1143,8,10,1,10,1,10,3,10,1147,8,10,1,10,1,10,1,11,1,11,3,11,
        1153,8,11,3,11,1155,8,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,
        1,13,1,14,1,14,3,14,1168,8,14,1,15,3,15,1171,8,15,1,15,5,15,1174,
        8,15,10,15,12,15,1177,9,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,
        17,1,17,1,18,1,18,1,19,5,19,1191,8,19,10,19,12,19,1194,9,19,1,19,
        1,19,1,19,1,19,1,19,1,19,5,19,1202,8,19,10,19,12,19,1205,9,19,3,
        19,1207,8,19,1,19,1,19,1,20,3,20,1212,8,20,1,20,3,20,1215,8,20,1,
        20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,5,22,1227,8,22,10,
        22,12,22,1230,9,22,1,22,3,22,1233,8,22,1,23,1,23,1,24,3,24,1238,
        8,24,1,24,3,24,1241,8,24,1,24,1,24,3,24,1245,8,24,1,24,3,24,1248,
        8,24,1,24,1,24,1,25,5,25,1253,8,25,10,25,12,25,1256,9,25,1,25,1,
        25,1,25,1,26,3,26,1262,8,26,1,26,1,26,5,26,1266,8,26,10,26,12,26,
        1269,9,26,1,26,1,26,1,26,1,27,1,27,3,27,1276,8,27,1,28,1,28,1,28,
        1,28,1,28,1,28,5,28,1284,8,28,10,28,12,28,1287,9,28,1,28,3,28,1290,
        8,28,1,29,1,29,1,29,1,29,3,29,1296,8,29,1,30,3,30,1299,8,30,1,31,
        1,31,1,31,3,31,1304,8,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,33,3,33,1317,8,33,1,33,3,33,1320,8,33,1,33,1,33,1,33,
        1,33,1,34,3,34,1327,8,34,1,34,1,34,3,34,1331,8,34,1,35,1,35,3,35,
        1335,8,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,3,37,1345,8,37,
        1,38,1,38,1,38,3,38,1350,8,38,1,39,1,39,1,39,1,39,1,39,3,39,1357,
        8,39,1,40,1,40,4,40,1361,8,40,11,40,12,40,1362,1,41,1,41,3,41,1367,
        8,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        3,45,1407,8,45,1,46,1,46,3,46,1411,8,46,1,47,1,47,1,47,1,47,5,47,
        1417,8,47,10,47,12,47,1420,9,47,1,48,1,48,3,48,1424,8,48,1,49,1,
        49,1,50,1,50,3,50,1430,8,50,1,50,3,50,1433,8,50,1,51,4,51,1436,8,
        51,11,51,12,51,1437,1,51,3,51,1441,8,51,1,51,5,51,1444,8,51,10,51,
        12,51,1447,9,51,1,51,1,51,5,51,1451,8,51,10,51,12,51,1454,9,51,3,
        51,1456,8,51,1,52,1,52,3,52,1460,8,52,1,52,1,52,3,52,1464,8,52,1,
        52,1,52,3,52,1468,8,52,3,52,1470,8,52,3,52,1472,8,52,1,53,1,53,1,
        53,1,53,3,53,1478,8,53,1,54,1,54,1,54,5,54,1483,8,54,10,54,12,54,
        1486,9,54,1,55,1,55,1,55,1,56,1,56,1,56,3,56,1494,8,56,1,57,1,57,
        1,57,5,57,1499,8,57,10,57,12,57,1502,9,57,1,58,1,58,1,58,1,59,1,
        59,3,59,1509,8,59,1,60,1,60,1,60,1,61,1,61,3,61,1516,8,61,1,62,1,
        62,1,62,5,62,1521,8,62,10,62,12,62,1524,9,62,1,63,1,63,1,63,1,64,
        1,64,3,64,1531,8,64,1,65,1,65,3,65,1535,8,65,1,66,1,66,3,66,1539,
        8,66,1,67,1,67,3,67,1543,8,67,1,68,1,68,3,68,1547,8,68,1,69,1,69,
        1,70,1,70,1,70,1,70,3,70,1555,8,70,1,70,1,70,1,71,1,71,3,71,1561,
        8,71,1,72,1,72,3,72,1565,8,72,1,73,1,73,1,74,3,74,1570,8,74,1,74,
        5,74,1573,8,74,10,74,12,74,1576,9,74,1,75,1,75,1,75,1,76,3,76,1582,
        8,76,1,76,3,76,1585,8,76,1,77,1,77,1,77,5,77,1590,8,77,10,77,12,
        77,1593,9,77,1,77,3,77,1596,8,77,1,78,1,78,1,78,1,78,3,78,1602,8,
        78,1,78,1,78,1,78,3,78,1607,8,78,1,79,1,79,1,79,1,80,1,80,1,80,1,
        80,1,81,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,1,84,1,
        85,3,85,1629,8,85,1,85,3,85,1632,8,85,1,85,3,85,1635,8,85,1,85,3,
        85,1638,8,85,1,85,3,85,1641,8,85,1,86,1,86,3,86,1645,8,86,1,87,1,
        87,1,88,1,88,5,88,1651,8,88,10,88,12,88,1654,9,88,1,89,3,89,1657,
        8,89,1,89,1,89,1,90,1,90,1,91,3,91,1664,8,91,1,91,1,91,1,92,1,92,
        1,93,1,93,1,94,1,94,1,94,1,94,3,94,1676,8,94,3,94,1678,8,94,1,94,
        1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,97,3,97,1689,8,97,1,97,1,97,
        1,98,1,98,1,98,1,98,1,99,1,99,5,99,1699,8,99,10,99,12,99,1702,9,
        99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1713,
        8,100,1,101,1,101,3,101,1717,8,101,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,
        1734,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1752,8,103,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1775,
        8,104,1,105,3,105,1778,8,105,1,105,4,105,1781,8,105,11,105,12,105,
        1782,1,105,1,105,1,105,1,106,1,106,4,106,1790,8,106,11,106,12,106,
        1791,1,106,1,106,1,107,1,107,1,108,1,108,1,108,1,109,1,109,1,110,
        1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,112,1,112,1,113,1,113,
        1,113,1,114,1,114,1,115,5,115,1819,8,115,10,115,12,115,1822,9,115,
        1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,5,116,1832,8,116,
        10,116,12,116,1835,9,116,1,116,3,116,1838,8,116,1,117,1,117,1,117,
        1,118,5,118,1844,8,118,10,118,12,118,1847,9,118,1,118,3,118,1850,
        8,118,1,118,1,118,1,119,1,119,1,119,1,119,1,120,1,120,1,121,1,121,
        1,121,1,122,3,122,1864,8,122,1,122,1,122,3,122,1868,8,122,1,122,
        5,122,1871,8,122,10,122,12,122,1874,9,122,1,123,1,123,1,123,1,123,
        1,124,3,124,1881,8,124,1,124,1,124,5,124,1885,8,124,10,124,12,124,
        1888,9,124,1,124,1,124,1,124,1,124,1,125,1,125,1,126,1,126,1,127,
        1,127,1,128,1,128,3,128,1902,8,128,1,128,3,128,1905,8,128,1,128,
        5,128,1908,8,128,10,128,12,128,1911,9,128,1,129,1,129,1,129,1,129,
        1,130,1,130,1,130,5,130,1920,8,130,10,130,12,130,1923,9,130,1,130,
        1,130,1,131,1,131,3,131,1929,8,131,1,131,1,131,5,131,1933,8,131,
        10,131,12,131,1936,9,131,1,131,1,131,1,132,1,132,1,132,1,132,3,132,
        1944,8,132,1,132,1,132,3,132,1948,8,132,3,132,1950,8,132,1,132,1,
        132,1,133,1,133,1,134,1,134,1,134,1,134,1,135,1,135,1,136,3,136,
        1963,8,136,1,137,1,137,1,138,1,138,1,139,1,139,1,140,1,140,1,140,
        1,141,1,141,1,142,1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,144,
        1,144,1,145,1,145,1,145,1,146,1,146,1,147,1,147,1,147,1,147,1,148,
        1,148,1,148,1,148,1,149,1,149,1,150,1,150,1,150,1,151,1,151,1,151,
        1,151,1,151,1,152,1,152,1,153,1,153,1,154,1,154,1,155,1,155,1,156,
        1,156,1,156,1,157,1,157,1,158,1,158,1,158,1,158,1,159,1,159,1,160,
        1,160,1,160,3,160,2031,8,160,1,160,1,160,3,160,2035,8,160,1,161,
        1,161,1,162,1,162,1,162,3,162,2042,8,162,3,162,2044,8,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,163,1,163,1,164,1,164,1,164,3,164,
        2057,8,164,3,164,2059,8,164,1,164,1,164,1,164,1,164,1,164,1,164,
        1,165,1,165,1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,168,1,168,
        1,169,1,169,1,170,1,170,1,170,3,170,2083,8,170,1,170,3,170,2086,
        8,170,1,170,1,170,1,170,3,170,2091,8,170,1,170,1,170,1,170,3,170,
        2096,8,170,1,170,1,170,1,171,1,171,3,171,2102,8,171,1,172,1,172,
        1,172,1,172,1,173,1,173,1,173,1,173,1,173,1,173,5,173,2114,8,173,
        10,173,12,173,2117,9,173,1,173,1,173,1,174,1,174,1,175,1,175,1,176,
        1,176,1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,179,1,179,1,180,
        1,180,1,180,1,180,1,180,1,181,3,181,2142,8,181,1,181,3,181,2145,
        8,181,1,181,1,181,3,181,2149,8,181,1,181,1,181,1,181,1,181,1,181,
        3,181,2156,8,181,1,181,1,181,1,181,1,181,3,181,2162,8,181,1,182,
        1,182,1,183,1,183,1,184,1,184,1,184,1,184,1,184,1,185,1,185,1,185,
        1,186,1,186,1,186,1,186,1,186,1,187,3,187,2182,8,187,1,187,3,187,
        2185,8,187,1,187,1,187,3,187,2189,8,187,1,187,1,187,1,187,1,187,
        1,187,3,187,2196,8,187,1,187,1,187,1,187,1,187,3,187,2202,8,187,
        1,188,1,188,1,189,1,189,1,190,3,190,2209,8,190,1,190,1,190,3,190,
        2213,8,190,1,190,3,190,2216,8,190,1,190,1,190,1,190,3,190,2221,8,
        190,1,190,1,190,1,190,3,190,2226,8,190,1,191,4,191,2229,8,191,11,
        191,12,191,2230,1,191,3,191,2234,8,191,1,191,5,191,2237,8,191,10,
        191,12,191,2240,9,191,1,191,1,191,4,191,2244,8,191,11,191,12,191,
        2245,3,191,2248,8,191,1,192,1,192,1,193,3,193,2253,8,193,1,193,1,
        193,1,194,1,194,1,194,1,194,3,194,2261,8,194,1,195,1,195,1,195,4,
        195,2266,8,195,11,195,12,195,2267,1,195,1,195,1,195,1,196,1,196,
        1,197,1,197,1,198,1,198,1,199,1,199,1,200,1,200,1,200,1,201,1,201,
        1,201,1,201,1,201,1,202,1,202,1,202,5,202,2292,8,202,10,202,12,202,
        2295,9,202,1,202,3,202,2298,8,202,1,203,1,203,1,203,1,203,3,203,
        2304,8,203,1,203,1,203,1,203,3,203,2309,8,203,1,204,1,204,1,204,
        1,205,1,205,1,205,1,205,1,205,3,205,2319,8,205,1,206,1,206,1,206,
        1,207,1,207,1,207,3,207,2327,8,207,1,208,3,208,2330,8,208,1,208,
        3,208,2333,8,208,1,208,1,208,1,208,1,209,1,209,1,210,1,210,1,210,
        1,210,1,210,1,211,3,211,2346,8,211,1,211,1,211,1,211,3,211,2351,
        8,211,1,211,3,211,2354,8,211,1,212,1,212,3,212,2358,8,212,1,213,
        1,213,1,213,1,213,1,214,1,214,1,214,1,214,1,214,1,214,5,214,2370,
        8,214,10,214,12,214,2373,9,214,1,214,1,214,1,215,1,215,1,216,1,216,
        1,216,3,216,2382,8,216,1,216,1,216,3,216,2386,8,216,1,217,1,217,
        1,218,1,218,1,218,1,219,1,219,1,219,1,219,1,220,1,220,1,221,1,221,
        1,222,1,222,1,222,1,222,1,223,1,223,3,223,2407,8,223,1,223,1,223,
        1,223,3,223,2412,8,223,1,223,1,223,1,223,3,223,2417,8,223,1,224,
        1,224,1,225,1,225,1,225,1,226,1,226,1,226,1,226,1,226,1,227,1,227,
        1,227,5,227,2432,8,227,10,227,12,227,2435,9,227,1,227,3,227,2438,
        8,227,1,228,1,228,1,228,1,228,1,228,1,228,3,228,2446,8,228,1,228,
        1,228,1,228,5,228,2451,8,228,10,228,12,228,2454,9,228,1,228,3,228,
        2457,8,228,1,228,1,228,3,228,2461,8,228,1,228,5,228,2464,8,228,10,
        228,12,228,2467,9,228,1,228,3,228,2470,8,228,1,229,1,229,1,229,1,
        229,1,229,1,230,1,230,1,230,1,231,1,231,1,231,1,232,1,232,1,233,
        1,233,1,234,1,234,1,234,1,234,1,234,1,235,1,235,1,235,1,235,1,235,
        1,236,1,236,3,236,2499,8,236,1,236,1,236,3,236,2503,8,236,3,236,
        2505,8,236,1,236,3,236,2508,8,236,1,237,3,237,2511,8,237,1,237,3,
        237,2514,8,237,1,238,1,238,1,238,1,238,1,238,1,238,1,238,3,238,2523,
        8,238,1,239,1,239,3,239,2527,8,239,1,240,1,240,3,240,2531,8,240,
        1,241,1,241,1,241,1,241,1,242,3,242,2538,8,242,1,242,1,242,1,242,
        1,243,1,243,1,243,1,243,3,243,2547,8,243,1,244,1,244,1,245,1,245,
        3,245,2553,8,245,1,245,3,245,2556,8,245,1,245,3,245,2559,8,245,1,
        246,1,246,1,247,1,247,1,248,1,248,1,248,1,248,1,248,1,248,3,248,
        2571,8,248,1,249,1,249,3,249,2575,8,249,1,250,1,250,1,251,1,251,
        1,252,1,252,1,253,1,253,1,254,1,254,1,254,1,254,1,255,3,255,2590,
        8,255,1,255,1,255,1,255,1,255,1,255,3,255,2597,8,255,1,255,1,255,
        1,255,3,255,2602,8,255,1,256,1,256,1,257,1,257,1,258,1,258,1,259,
        1,259,1,259,1,259,1,260,3,260,2615,8,260,1,260,1,260,1,260,1,260,
        1,260,1,260,1,261,1,261,1,262,1,262,1,262,3,262,2628,8,262,1,262,
        1,262,1,263,1,263,1,264,1,264,1,265,1,265,1,266,1,266,1,267,1,267,
        1,267,3,267,2643,8,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
        1,267,1,267,3,267,2654,8,267,1,267,1,267,1,267,1,267,3,267,2660,
        8,267,5,267,2662,8,267,10,267,12,267,2665,9,267,1,268,1,268,1,269,
        1,269,1,269,1,269,1,269,1,269,1,269,3,269,2676,8,269,3,269,2678,
        8,269,1,270,1,270,1,271,1,271,3,271,2684,8,271,3,271,2686,8,271,
        1,271,1,271,5,271,2690,8,271,10,271,12,271,2693,9,271,1,271,1,271,
        1,272,1,272,1,273,1,273,1,273,1,273,1,273,3,273,2704,8,273,1,273,
        1,273,1,273,1,273,1,273,3,273,2711,8,273,1,274,1,274,1,274,1,274,
        1,274,1,274,1,274,1,275,1,275,1,276,1,276,1,277,1,277,1,277,1,277,
        3,277,2728,8,277,1,278,1,278,3,278,2732,8,278,1,278,3,278,2735,8,
        278,1,278,5,278,2738,8,278,10,278,12,278,2741,9,278,1,279,1,279,
        1,279,3,279,2746,8,279,1,279,1,279,1,280,1,280,1,280,3,280,2753,
        8,280,1,280,1,280,1,281,1,281,1,281,3,281,2760,8,281,1,281,1,281,
        1,282,1,282,1,282,3,282,2767,8,282,1,282,1,282,1,283,1,283,1,283,
        5,283,2774,8,283,10,283,12,283,2777,9,283,1,283,3,283,2780,8,283,
        1,284,1,284,1,285,1,285,1,286,1,286,1,286,3,286,2789,8,286,1,286,
        1,286,1,287,1,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,289,
        1,289,1,289,1,289,1,290,1,290,1,290,3,290,2809,8,290,1,290,1,290,
        1,290,1,290,1,290,1,290,1,290,1,290,1,291,1,291,1,292,1,292,1,292,
        1,293,1,293,1,293,1,293,1,293,1,294,1,294,3,294,2831,8,294,1,294,
        1,294,1,294,1,294,3,294,2837,8,294,1,295,5,295,2840,8,295,10,295,
        12,295,2843,9,295,1,296,1,296,1,296,1,296,1,296,1,296,3,296,2851,
        8,296,1,296,1,296,3,296,2855,8,296,1,296,1,296,5,296,2859,8,296,
        10,296,12,296,2862,9,296,1,296,1,296,1,296,5,296,2867,8,296,10,296,
        12,296,2870,9,296,1,296,1,296,3,296,2874,8,296,1,297,1,297,1,297,
        1,297,1,298,1,298,1,299,1,299,1,299,1,299,1,300,1,300,1,301,1,301,
        1,301,1,301,1,302,1,302,1,303,1,303,1,303,1,303,3,303,2898,8,303,
        1,303,1,303,1,304,1,304,1,304,1,304,1,304,1,304,3,304,2908,8,304,
        1,305,1,305,1,306,1,306,1,306,1,306,3,306,2916,8,306,1,307,1,307,
        1,307,1,308,1,308,1,308,1,309,1,309,1,310,1,310,1,310,1,310,1,310,
        1,311,1,311,3,311,2933,8,311,1,311,1,311,1,311,1,311,3,311,2939,
        8,311,1,312,1,312,1,312,1,312,3,312,2945,8,312,1,312,1,312,3,312,
        2949,8,312,3,312,2951,8,312,1,312,3,312,2954,8,312,1,312,1,312,1,
        313,1,313,1,314,1,314,3,314,2962,8,314,1,314,3,314,2965,8,314,1,
        314,1,314,1,314,1,314,1,314,3,314,2972,8,314,1,314,3,314,2975,8,
        314,1,314,3,314,2978,8,314,1,314,1,314,1,314,1,314,1,315,1,315,1,
        315,1,315,1,315,3,315,2989,8,315,1,315,3,315,2992,8,315,1,315,3,
        315,2995,8,315,1,315,1,315,1,315,3,315,3000,8,315,1,315,3,315,3003,
        8,315,1,315,1,315,3,315,3007,8,315,3,315,3009,8,315,1,315,1,315,
        1,315,1,315,1,316,1,316,3,316,3017,8,316,1,317,1,317,1,317,1,318,
        1,318,1,319,1,319,1,319,1,320,1,320,1,320,1,321,1,321,1,321,1,321,
        5,321,3034,8,321,10,321,12,321,3037,9,321,1,321,3,321,3040,8,321,
        3,321,3042,8,321,1,322,1,322,1,323,1,323,1,323,1,324,1,324,1,325,
        1,325,1,325,1,326,1,326,1,326,1,326,1,326,1,327,1,327,1,327,1,327,
        1,327,3,327,3064,8,327,1,328,5,328,3067,8,328,10,328,12,328,3070,
        9,328,1,328,3,328,3073,8,328,1,329,1,329,3,329,3077,8,329,1,330,
        1,330,1,330,1,330,1,331,1,331,1,331,1,332,1,332,1,333,1,333,1,333,
        1,333,1,333,1,334,1,334,1,335,1,335,1,335,1,336,1,336,1,336,1,336,
        1,336,1,337,1,337,1,338,1,338,1,338,1,338,1,338,1,339,1,339,1,339,
        3,339,3113,8,339,1,339,1,339,3,339,3117,8,339,1,339,1,339,1,339,
        3,339,3122,8,339,1,339,1,339,1,340,3,340,3127,8,340,1,340,3,340,
        3130,8,340,1,341,1,341,1,342,1,342,1,342,1,343,1,343,1,343,1,343,
        1,343,1,344,1,344,1,344,5,344,3145,8,344,10,344,12,344,3148,9,344,
        1,344,3,344,3151,8,344,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        3,345,3160,8,345,1,346,1,346,1,346,1,347,1,347,5,347,3167,8,347,
        10,347,12,347,3170,9,347,1,347,1,347,1,348,1,348,1,348,1,348,1,349,
        1,349,5,349,3180,8,349,10,349,12,349,3183,9,349,1,349,1,349,1,349,
        5,349,3188,8,349,10,349,12,349,3191,9,349,1,349,1,349,4,349,3195,
        8,349,11,349,12,349,3196,3,349,3199,8,349,1,349,1,349,1,349,3,349,
        3204,8,349,1,350,1,350,1,350,1,350,1,351,1,351,5,351,3212,8,351,
        10,351,12,351,3215,9,351,1,351,1,351,1,351,5,351,3220,8,351,10,351,
        12,351,3223,9,351,1,351,1,351,4,351,3227,8,351,11,351,12,351,3228,
        3,351,3231,8,351,1,351,1,351,1,351,3,351,3236,8,351,1,352,1,352,
        1,352,1,353,1,353,5,353,3243,8,353,10,353,12,353,3246,9,353,1,353,
        1,353,1,354,1,354,1,354,1,355,1,355,5,355,3255,8,355,10,355,12,355,
        3258,9,355,1,355,1,355,1,356,1,356,1,357,1,357,1,357,1,357,1,357,
        1,358,1,358,3,358,3271,8,358,1,358,3,358,3274,8,358,1,358,1,358,
        1,358,3,358,3279,8,358,1,358,1,358,3,358,3283,8,358,3,358,3285,8,
        358,1,358,3,358,3288,8,358,1,358,1,358,3,358,3292,8,358,1,358,1,
        358,1,359,1,359,1,360,1,360,1,361,1,361,1,362,1,362,1,363,1,363,
        1,364,1,364,1,364,1,365,1,365,1,365,1,365,1,365,1,366,1,366,1,367,
        1,367,1,367,1,367,1,367,1,368,1,368,1,369,1,369,1,369,1,370,1,370,
        1,370,1,370,1,370,1,371,1,371,1,371,5,371,3334,8,371,10,371,12,371,
        3337,9,371,1,371,3,371,3340,8,371,1,371,3,371,3343,8,371,1,372,1,
        372,1,372,1,372,3,372,3349,8,372,1,373,1,373,1,373,1,373,1,374,5,
        374,3356,8,374,10,374,12,374,3359,9,374,1,374,1,374,1,374,1,375,
        1,375,1,376,1,376,1,376,1,376,1,376,1,377,1,377,1,378,1,378,1,378,
        1,379,1,379,1,380,1,380,1,380,1,380,1,380,1,381,1,381,1,381,1,381,
        1,381,1,382,1,382,1,383,1,383,1,383,1,384,1,384,1,385,1,385,1,385,
        1,385,1,385,1,386,1,386,1,386,1,386,1,386,1,387,1,387,1,387,1,387,
        1,388,1,388,5,388,3411,8,388,10,388,12,388,3414,9,388,1,388,1,388,
        1,388,5,388,3419,8,388,10,388,12,388,3422,9,388,1,388,1,388,4,388,
        3426,8,388,11,388,12,388,3427,3,388,3430,8,388,1,388,1,388,1,388,
        3,388,3435,8,388,1,389,1,389,1,389,1,390,1,390,1,390,1,391,1,391,
        1,392,1,392,1,392,1,392,1,392,1,393,1,393,1,393,1,393,1,393,1,394,
        1,394,1,394,1,394,3,394,3459,8,394,1,394,1,394,3,394,3463,8,394,
        3,394,3465,8,394,1,394,3,394,3468,8,394,1,394,1,394,1,395,1,395,
        1,396,1,396,1,396,1,397,1,397,1,397,1,397,1,397,1,398,1,398,1,398,
        5,398,3485,8,398,10,398,12,398,3488,9,398,1,398,3,398,3491,8,398,
        1,399,1,399,1,399,3,399,3496,8,399,1,400,1,400,1,400,1,400,1,401,
        1,401,5,401,3504,8,401,10,401,12,401,3507,9,401,1,401,1,401,1,401,
        5,401,3512,8,401,10,401,12,401,3515,9,401,1,401,1,401,4,401,3519,
        8,401,11,401,12,401,3520,3,401,3523,8,401,1,401,3,401,3526,8,401,
        1,402,1,402,1,403,1,403,1,403,3,403,3533,8,403,1,403,3,403,3536,
        8,403,1,403,1,403,1,404,1,404,1,404,5,404,3543,8,404,10,404,12,404,
        3546,9,404,1,404,3,404,3549,8,404,1,405,1,405,1,405,1,405,3,405,
        3555,8,405,1,406,3,406,3558,8,406,1,406,1,406,1,407,1,407,3,407,
        3564,8,407,1,407,1,407,1,408,1,408,1,408,1,409,1,409,1,409,3,409,
        3574,8,409,1,410,1,410,1,411,1,411,1,411,1,412,1,412,1,413,1,413,
        1,413,1,413,1,413,1,414,1,414,1,414,1,414,1,414,1,415,1,415,1,416,
        1,416,1,416,1,417,1,417,1,417,1,417,1,418,1,418,1,419,1,419,1,419,
        1,419,1,420,1,420,1,421,1,421,1,422,1,422,1,423,1,423,1,424,1,424,
        1,424,1,424,1,424,1,424,1,424,1,424,3,424,3624,8,424,1,425,1,425,
        1,426,1,426,1,426,1,426,5,426,3632,8,426,10,426,12,426,3635,9,426,
        1,427,1,427,1,428,1,428,1,429,1,429,1,430,1,430,1,430,1,430,5,430,
        3647,8,430,10,430,12,430,3650,9,430,1,431,1,431,1,432,1,432,1,433,
        1,433,1,434,1,434,1,434,1,434,1,434,1,434,1,434,3,434,3665,8,434,
        5,434,3667,8,434,10,434,12,434,3670,9,434,1,435,1,435,1,436,1,436,
        1,437,1,437,1,438,1,438,1,439,1,439,1,439,1,439,5,439,3684,8,439,
        10,439,12,439,3687,9,439,1,440,1,440,1,441,1,441,1,441,1,441,1,441,
        1,441,1,441,3,441,3698,8,441,5,441,3700,8,441,10,441,12,441,3703,
        9,441,1,442,1,442,1,443,1,443,1,444,1,444,1,445,1,445,1,446,1,446,
        1,446,1,446,5,446,3717,8,446,10,446,12,446,3720,9,446,1,447,1,447,
        1,447,1,447,3,447,3726,8,447,1,448,1,448,1,448,1,448,1,448,1,448,
        1,448,3,448,3735,8,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,
        1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,3,448,3753,
        8,448,1,449,1,449,1,449,3,449,3758,8,449,1,450,1,450,1,451,1,451,
        1,452,1,452,1,453,1,453,1,454,1,454,1,455,1,455,1,456,1,456,1,457,
        1,457,1,458,1,458,1,459,1,459,1,460,1,460,1,461,1,461,1,461,1,461,
        5,461,3786,8,461,10,461,12,461,3789,9,461,1,462,1,462,1,462,1,462,
        3,462,3795,8,462,1,463,1,463,1,463,3,463,3800,8,463,1,464,1,464,
        1,464,1,464,5,464,3806,8,464,10,464,12,464,3809,9,464,1,465,1,465,
        3,465,3813,8,465,1,466,1,466,1,466,1,466,5,466,3819,8,466,10,466,
        12,466,3822,9,466,1,467,1,467,1,467,3,467,3827,8,467,1,468,1,468,
        1,468,1,468,3,468,3833,8,468,1,469,1,469,3,469,3837,8,469,1,470,
        1,470,1,470,1,470,3,470,3843,8,470,1,471,1,471,1,471,1,471,3,471,
        3849,8,471,1,472,1,472,1,472,3,472,3854,8,472,1,473,1,473,1,473,
        3,473,3859,8,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,
        1,473,1,473,1,473,1,473,1,473,1,473,3,473,3875,8,473,1,473,1,473,
        1,473,1,473,3,473,3881,8,473,1,473,1,473,3,473,3885,8,473,5,473,
        3887,8,473,10,473,12,473,3890,9,473,1,474,1,474,1,475,1,475,1,476,
        1,476,1,477,1,477,3,477,3900,8,477,1,478,1,478,1,478,1,478,1,478,
        1,478,1,478,1,478,1,478,1,478,3,478,3912,8,478,1,479,1,479,1,480,
        1,480,1,481,1,481,1,482,1,482,1,482,1,482,3,482,3924,8,482,1,483,
        1,483,1,484,1,484,1,485,1,485,1,485,1,485,1,486,1,486,1,486,1,487,
        1,487,3,487,3939,8,487,1,488,1,488,1,489,1,489,1,489,4,489,3946,
        8,489,11,489,12,489,3947,1,490,1,490,1,491,1,491,1,491,3,491,3955,
        8,491,1,491,1,491,1,492,1,492,1,492,5,492,3962,8,492,10,492,12,492,
        3965,9,492,1,493,1,493,1,494,1,494,1,495,1,495,1,495,5,495,3974,
        8,495,10,495,12,495,3977,9,495,1,496,1,496,1,497,1,497,1,497,1,497,
        1,498,1,498,1,499,1,499,1,500,1,500,1,500,3,500,3992,8,500,1,501,
        1,501,1,501,1,501,1,501,3,501,3999,8,501,1,502,1,502,1,503,1,503,
        3,503,4005,8,503,1,504,1,504,1,505,1,505,1,506,1,506,1,507,3,507,
        4014,8,507,1,507,1,507,1,507,3,507,4019,8,507,1,508,1,508,1,509,
        1,509,3,509,4025,8,509,1,510,1,510,1,510,4,510,4030,8,510,11,510,
        12,510,4031,1,511,3,511,4035,8,511,1,511,1,511,1,512,1,512,1,513,
        1,513,1,513,3,513,4044,8,513,1,514,1,514,1,514,3,514,4049,8,514,
        1,515,1,515,3,515,4053,8,515,1,516,1,516,1,517,1,517,1,518,1,518,
        1,519,1,519,3,519,4063,8,519,1,520,1,520,1,521,1,521,1,521,0,0,522,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
        254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
        286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
        318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,
        350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,
        382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,
        414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,
        446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,
        478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,
        510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,
        542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,
        574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,
        606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,
        638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,
        670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,
        702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,
        734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,
        766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,
        798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,
        830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,
        862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,
        894,896,898,900,902,904,906,908,910,912,914,916,918,920,922,924,
        926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,956,
        958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,
        990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,
        1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,
        0,4,2,0,14,14,139,139,2,0,12,12,30,30,1,0,147,148,1,0,169,170,4105,
        0,1044,1,0,0,0,2,1050,1,0,0,0,4,1060,1,0,0,0,6,1071,1,0,0,0,8,1076,
        1,0,0,0,10,1105,1,0,0,0,12,1107,1,0,0,0,14,1109,1,0,0,0,16,1115,
        1,0,0,0,18,1132,1,0,0,0,20,1140,1,0,0,0,22,1154,1,0,0,0,24,1160,
        1,0,0,0,26,1162,1,0,0,0,28,1167,1,0,0,0,30,1170,1,0,0,0,32,1181,
        1,0,0,0,34,1184,1,0,0,0,36,1187,1,0,0,0,38,1192,1,0,0,0,40,1214,
        1,0,0,0,42,1218,1,0,0,0,44,1232,1,0,0,0,46,1234,1,0,0,0,48,1237,
        1,0,0,0,50,1254,1,0,0,0,52,1261,1,0,0,0,54,1273,1,0,0,0,56,1289,
        1,0,0,0,58,1295,1,0,0,0,60,1298,1,0,0,0,62,1300,1,0,0,0,64,1305,
        1,0,0,0,66,1310,1,0,0,0,68,1326,1,0,0,0,70,1334,1,0,0,0,72,1338,
        1,0,0,0,74,1341,1,0,0,0,76,1346,1,0,0,0,78,1351,1,0,0,0,80,1358,
        1,0,0,0,82,1366,1,0,0,0,84,1368,1,0,0,0,86,1370,1,0,0,0,88,1372,
        1,0,0,0,90,1406,1,0,0,0,92,1410,1,0,0,0,94,1412,1,0,0,0,96,1423,
        1,0,0,0,98,1425,1,0,0,0,100,1432,1,0,0,0,102,1455,1,0,0,0,104,1471,
        1,0,0,0,106,1477,1,0,0,0,108,1479,1,0,0,0,110,1487,1,0,0,0,112,1493,
        1,0,0,0,114,1495,1,0,0,0,116,1503,1,0,0,0,118,1508,1,0,0,0,120,1510,
        1,0,0,0,122,1515,1,0,0,0,124,1517,1,0,0,0,126,1525,1,0,0,0,128,1530,
        1,0,0,0,130,1534,1,0,0,0,132,1538,1,0,0,0,134,1542,1,0,0,0,136,1546,
        1,0,0,0,138,1548,1,0,0,0,140,1550,1,0,0,0,142,1560,1,0,0,0,144,1564,
        1,0,0,0,146,1566,1,0,0,0,148,1569,1,0,0,0,150,1577,1,0,0,0,152,1581,
        1,0,0,0,154,1595,1,0,0,0,156,1606,1,0,0,0,158,1608,1,0,0,0,160,1611,
        1,0,0,0,162,1615,1,0,0,0,164,1618,1,0,0,0,166,1621,1,0,0,0,168,1624,
        1,0,0,0,170,1628,1,0,0,0,172,1642,1,0,0,0,174,1646,1,0,0,0,176,1648,
        1,0,0,0,178,1656,1,0,0,0,180,1660,1,0,0,0,182,1663,1,0,0,0,184,1667,
        1,0,0,0,186,1669,1,0,0,0,188,1677,1,0,0,0,190,1681,1,0,0,0,192,1683,
        1,0,0,0,194,1685,1,0,0,0,196,1692,1,0,0,0,198,1696,1,0,0,0,200,1712,
        1,0,0,0,202,1716,1,0,0,0,204,1733,1,0,0,0,206,1751,1,0,0,0,208,1774,
        1,0,0,0,210,1777,1,0,0,0,212,1787,1,0,0,0,214,1795,1,0,0,0,216,1797,
        1,0,0,0,218,1800,1,0,0,0,220,1802,1,0,0,0,222,1806,1,0,0,0,224,1810,
        1,0,0,0,226,1812,1,0,0,0,228,1815,1,0,0,0,230,1820,1,0,0,0,232,1837,
        1,0,0,0,234,1839,1,0,0,0,236,1845,1,0,0,0,238,1853,1,0,0,0,240,1857,
        1,0,0,0,242,1859,1,0,0,0,244,1863,1,0,0,0,246,1875,1,0,0,0,248,1880,
        1,0,0,0,250,1893,1,0,0,0,252,1895,1,0,0,0,254,1897,1,0,0,0,256,1899,
        1,0,0,0,258,1912,1,0,0,0,260,1916,1,0,0,0,262,1926,1,0,0,0,264,1939,
        1,0,0,0,266,1953,1,0,0,0,268,1955,1,0,0,0,270,1959,1,0,0,0,272,1962,
        1,0,0,0,274,1964,1,0,0,0,276,1966,1,0,0,0,278,1968,1,0,0,0,280,1970,
        1,0,0,0,282,1973,1,0,0,0,284,1975,1,0,0,0,286,1979,1,0,0,0,288,1983,
        1,0,0,0,290,1985,1,0,0,0,292,1988,1,0,0,0,294,1990,1,0,0,0,296,1994,
        1,0,0,0,298,1998,1,0,0,0,300,2000,1,0,0,0,302,2003,1,0,0,0,304,2008,
        1,0,0,0,306,2010,1,0,0,0,308,2012,1,0,0,0,310,2014,1,0,0,0,312,2016,
        1,0,0,0,314,2019,1,0,0,0,316,2021,1,0,0,0,318,2025,1,0,0,0,320,2030,
        1,0,0,0,322,2036,1,0,0,0,324,2038,1,0,0,0,326,2051,1,0,0,0,328,2053,
        1,0,0,0,330,2066,1,0,0,0,332,2068,1,0,0,0,334,2071,1,0,0,0,336,2075,
        1,0,0,0,338,2077,1,0,0,0,340,2079,1,0,0,0,342,2101,1,0,0,0,344,2103,
        1,0,0,0,346,2107,1,0,0,0,348,2120,1,0,0,0,350,2122,1,0,0,0,352,2124,
        1,0,0,0,354,2126,1,0,0,0,356,2129,1,0,0,0,358,2133,1,0,0,0,360,2135,
        1,0,0,0,362,2161,1,0,0,0,364,2163,1,0,0,0,366,2165,1,0,0,0,368,2167,
        1,0,0,0,370,2172,1,0,0,0,372,2175,1,0,0,0,374,2201,1,0,0,0,376,2203,
        1,0,0,0,378,2205,1,0,0,0,380,2225,1,0,0,0,382,2247,1,0,0,0,384,2249,
        1,0,0,0,386,2252,1,0,0,0,388,2260,1,0,0,0,390,2265,1,0,0,0,392,2272,
        1,0,0,0,394,2274,1,0,0,0,396,2276,1,0,0,0,398,2278,1,0,0,0,400,2280,
        1,0,0,0,402,2283,1,0,0,0,404,2297,1,0,0,0,406,2308,1,0,0,0,408,2310,
        1,0,0,0,410,2318,1,0,0,0,412,2320,1,0,0,0,414,2326,1,0,0,0,416,2329,
        1,0,0,0,418,2337,1,0,0,0,420,2339,1,0,0,0,422,2353,1,0,0,0,424,2357,
        1,0,0,0,426,2359,1,0,0,0,428,2363,1,0,0,0,430,2376,1,0,0,0,432,2381,
        1,0,0,0,434,2387,1,0,0,0,436,2389,1,0,0,0,438,2392,1,0,0,0,440,2396,
        1,0,0,0,442,2398,1,0,0,0,444,2400,1,0,0,0,446,2416,1,0,0,0,448,2418,
        1,0,0,0,450,2420,1,0,0,0,452,2423,1,0,0,0,454,2437,1,0,0,0,456,2469,
        1,0,0,0,458,2471,1,0,0,0,460,2476,1,0,0,0,462,2479,1,0,0,0,464,2482,
        1,0,0,0,466,2484,1,0,0,0,468,2486,1,0,0,0,470,2491,1,0,0,0,472,2504,
        1,0,0,0,474,2510,1,0,0,0,476,2522,1,0,0,0,478,2524,1,0,0,0,480,2528,
        1,0,0,0,482,2532,1,0,0,0,484,2537,1,0,0,0,486,2542,1,0,0,0,488,2548,
        1,0,0,0,490,2558,1,0,0,0,492,2560,1,0,0,0,494,2562,1,0,0,0,496,2570,
        1,0,0,0,498,2574,1,0,0,0,500,2576,1,0,0,0,502,2578,1,0,0,0,504,2580,
        1,0,0,0,506,2582,1,0,0,0,508,2584,1,0,0,0,510,2589,1,0,0,0,512,2603,
        1,0,0,0,514,2605,1,0,0,0,516,2607,1,0,0,0,518,2609,1,0,0,0,520,2614,
        1,0,0,0,522,2622,1,0,0,0,524,2627,1,0,0,0,526,2631,1,0,0,0,528,2633,
        1,0,0,0,530,2635,1,0,0,0,532,2637,1,0,0,0,534,2639,1,0,0,0,536,2666,
        1,0,0,0,538,2668,1,0,0,0,540,2679,1,0,0,0,542,2685,1,0,0,0,544,2696,
        1,0,0,0,546,2698,1,0,0,0,548,2712,1,0,0,0,550,2719,1,0,0,0,552,2721,
        1,0,0,0,554,2727,1,0,0,0,556,2729,1,0,0,0,558,2742,1,0,0,0,560,2749,
        1,0,0,0,562,2756,1,0,0,0,564,2763,1,0,0,0,566,2779,1,0,0,0,568,2781,
        1,0,0,0,570,2783,1,0,0,0,572,2788,1,0,0,0,574,2792,1,0,0,0,576,2796,
        1,0,0,0,578,2801,1,0,0,0,580,2808,1,0,0,0,582,2818,1,0,0,0,584,2820,
        1,0,0,0,586,2823,1,0,0,0,588,2836,1,0,0,0,590,2841,1,0,0,0,592,2873,
        1,0,0,0,594,2875,1,0,0,0,596,2879,1,0,0,0,598,2881,1,0,0,0,600,2885,
        1,0,0,0,602,2887,1,0,0,0,604,2891,1,0,0,0,606,2893,1,0,0,0,608,2907,
        1,0,0,0,610,2909,1,0,0,0,612,2915,1,0,0,0,614,2917,1,0,0,0,616,2920,
        1,0,0,0,618,2923,1,0,0,0,620,2925,1,0,0,0,622,2938,1,0,0,0,624,2940,
        1,0,0,0,626,2957,1,0,0,0,628,2959,1,0,0,0,630,2983,1,0,0,0,632,3016,
        1,0,0,0,634,3018,1,0,0,0,636,3021,1,0,0,0,638,3023,1,0,0,0,640,3026,
        1,0,0,0,642,3041,1,0,0,0,644,3043,1,0,0,0,646,3045,1,0,0,0,648,3048,
        1,0,0,0,650,3050,1,0,0,0,652,3053,1,0,0,0,654,3063,1,0,0,0,656,3068,
        1,0,0,0,658,3076,1,0,0,0,660,3078,1,0,0,0,662,3082,1,0,0,0,664,3085,
        1,0,0,0,666,3087,1,0,0,0,668,3092,1,0,0,0,670,3094,1,0,0,0,672,3097,
        1,0,0,0,674,3102,1,0,0,0,676,3104,1,0,0,0,678,3109,1,0,0,0,680,3126,
        1,0,0,0,682,3131,1,0,0,0,684,3133,1,0,0,0,686,3136,1,0,0,0,688,3150,
        1,0,0,0,690,3159,1,0,0,0,692,3161,1,0,0,0,694,3164,1,0,0,0,696,3173,
        1,0,0,0,698,3203,1,0,0,0,700,3205,1,0,0,0,702,3235,1,0,0,0,704,3237,
        1,0,0,0,706,3240,1,0,0,0,708,3249,1,0,0,0,710,3252,1,0,0,0,712,3261,
        1,0,0,0,714,3263,1,0,0,0,716,3268,1,0,0,0,718,3295,1,0,0,0,720,3297,
        1,0,0,0,722,3299,1,0,0,0,724,3301,1,0,0,0,726,3303,1,0,0,0,728,3305,
        1,0,0,0,730,3308,1,0,0,0,732,3313,1,0,0,0,734,3315,1,0,0,0,736,3320,
        1,0,0,0,738,3322,1,0,0,0,740,3325,1,0,0,0,742,3342,1,0,0,0,744,3348,
        1,0,0,0,746,3350,1,0,0,0,748,3357,1,0,0,0,750,3363,1,0,0,0,752,3365,
        1,0,0,0,754,3370,1,0,0,0,756,3372,1,0,0,0,758,3375,1,0,0,0,760,3377,
        1,0,0,0,762,3382,1,0,0,0,764,3387,1,0,0,0,766,3389,1,0,0,0,768,3392,
        1,0,0,0,770,3394,1,0,0,0,772,3399,1,0,0,0,774,3404,1,0,0,0,776,3434,
        1,0,0,0,778,3436,1,0,0,0,780,3439,1,0,0,0,782,3442,1,0,0,0,784,3444,
        1,0,0,0,786,3449,1,0,0,0,788,3454,1,0,0,0,790,3471,1,0,0,0,792,3473,
        1,0,0,0,794,3476,1,0,0,0,796,3490,1,0,0,0,798,3495,1,0,0,0,800,3497,
        1,0,0,0,802,3525,1,0,0,0,804,3527,1,0,0,0,806,3529,1,0,0,0,808,3548,
        1,0,0,0,810,3554,1,0,0,0,812,3557,1,0,0,0,814,3563,1,0,0,0,816,3567,
        1,0,0,0,818,3570,1,0,0,0,820,3575,1,0,0,0,822,3577,1,0,0,0,824,3580,
        1,0,0,0,826,3582,1,0,0,0,828,3587,1,0,0,0,830,3592,1,0,0,0,832,3594,
        1,0,0,0,834,3597,1,0,0,0,836,3601,1,0,0,0,838,3603,1,0,0,0,840,3607,
        1,0,0,0,842,3609,1,0,0,0,844,3611,1,0,0,0,846,3613,1,0,0,0,848,3623,
        1,0,0,0,850,3625,1,0,0,0,852,3627,1,0,0,0,854,3636,1,0,0,0,856,3638,
        1,0,0,0,858,3640,1,0,0,0,860,3642,1,0,0,0,862,3651,1,0,0,0,864,3653,
        1,0,0,0,866,3655,1,0,0,0,868,3657,1,0,0,0,870,3671,1,0,0,0,872,3673,
        1,0,0,0,874,3675,1,0,0,0,876,3677,1,0,0,0,878,3679,1,0,0,0,880,3688,
        1,0,0,0,882,3690,1,0,0,0,884,3704,1,0,0,0,886,3706,1,0,0,0,888,3708,
        1,0,0,0,890,3710,1,0,0,0,892,3712,1,0,0,0,894,3725,1,0,0,0,896,3752,
        1,0,0,0,898,3757,1,0,0,0,900,3759,1,0,0,0,902,3761,1,0,0,0,904,3763,
        1,0,0,0,906,3765,1,0,0,0,908,3767,1,0,0,0,910,3769,1,0,0,0,912,3771,
        1,0,0,0,914,3773,1,0,0,0,916,3775,1,0,0,0,918,3777,1,0,0,0,920,3779,
        1,0,0,0,922,3781,1,0,0,0,924,3794,1,0,0,0,926,3796,1,0,0,0,928,3801,
        1,0,0,0,930,3812,1,0,0,0,932,3814,1,0,0,0,934,3826,1,0,0,0,936,3828,
        1,0,0,0,938,3836,1,0,0,0,940,3842,1,0,0,0,942,3848,1,0,0,0,944,3853,
        1,0,0,0,946,3855,1,0,0,0,948,3891,1,0,0,0,950,3893,1,0,0,0,952,3895,
        1,0,0,0,954,3899,1,0,0,0,956,3911,1,0,0,0,958,3913,1,0,0,0,960,3915,
        1,0,0,0,962,3917,1,0,0,0,964,3919,1,0,0,0,966,3925,1,0,0,0,968,3927,
        1,0,0,0,970,3929,1,0,0,0,972,3933,1,0,0,0,974,3938,1,0,0,0,976,3940,
        1,0,0,0,978,3942,1,0,0,0,980,3949,1,0,0,0,982,3951,1,0,0,0,984,3958,
        1,0,0,0,986,3966,1,0,0,0,988,3968,1,0,0,0,990,3970,1,0,0,0,992,3978,
        1,0,0,0,994,3980,1,0,0,0,996,3984,1,0,0,0,998,3986,1,0,0,0,1000,
        3991,1,0,0,0,1002,3998,1,0,0,0,1004,4000,1,0,0,0,1006,4004,1,0,0,
        0,1008,4006,1,0,0,0,1010,4008,1,0,0,0,1012,4010,1,0,0,0,1014,4018,
        1,0,0,0,1016,4020,1,0,0,0,1018,4024,1,0,0,0,1020,4029,1,0,0,0,1022,
        4034,1,0,0,0,1024,4038,1,0,0,0,1026,4043,1,0,0,0,1028,4048,1,0,0,
        0,1030,4052,1,0,0,0,1032,4054,1,0,0,0,1034,4056,1,0,0,0,1036,4058,
        1,0,0,0,1038,4062,1,0,0,0,1040,4064,1,0,0,0,1042,4066,1,0,0,0,1044,
        1045,3,2,1,0,1045,1046,5,0,0,1,1046,1,1,0,0,0,1047,1049,3,58,29,
        0,1048,1047,1,0,0,0,1049,1052,1,0,0,0,1050,1048,1,0,0,0,1050,1051,
        1,0,0,0,1051,3,1,0,0,0,1052,1050,1,0,0,0,1053,1054,5,127,0,0,1054,
        1055,3,1018,509,0,1055,1057,5,128,0,0,1056,1058,3,1018,509,0,1057,
        1056,1,0,0,0,1057,1058,1,0,0,0,1058,1061,1,0,0,0,1059,1061,3,1018,
        509,0,1060,1053,1,0,0,0,1060,1059,1,0,0,0,1061,5,1,0,0,0,1062,1072,
        5,135,0,0,1063,1067,5,129,0,0,1064,1066,3,12,6,0,1065,1064,1,0,0,
        0,1066,1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,1070,
        1,0,0,0,1069,1067,1,0,0,0,1070,1072,5,130,0,0,1071,1062,1,0,0,0,
        1071,1063,1,0,0,0,1072,7,1,0,0,0,1073,1075,3,32,16,0,1074,1073,1,
        0,0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,
        1079,1,0,0,0,1078,1076,1,0,0,0,1079,1084,5,1,0,0,1080,1082,3,4,2,
        0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1085,
        5,2,0,0,1084,1081,1,0,0,0,1084,1085,1,0,0,0,1085,1086,1,0,0,0,1086,
        1091,3,1022,511,0,1087,1088,5,136,0,0,1088,1090,3,1022,511,0,1089,
        1087,1,0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,
        0,1092,1094,1,0,0,0,1093,1091,1,0,0,0,1094,1095,5,3,0,0,1095,1100,
        3,1022,511,0,1096,1097,5,136,0,0,1097,1099,3,1022,511,0,1098,1096,
        1,0,0,0,1099,1102,1,0,0,0,1100,1098,1,0,0,0,1100,1101,1,0,0,0,1101,
        1103,1,0,0,0,1102,1100,1,0,0,0,1103,1104,3,6,3,0,1104,9,1,0,0,0,
        1105,1106,3,1022,511,0,1106,11,1,0,0,0,1107,1108,3,16,8,0,1108,13,
        1,0,0,0,1109,1110,3,16,8,0,1110,15,1,0,0,0,1111,1116,3,18,9,0,1112,
        1116,3,20,10,0,1113,1116,3,22,11,0,1114,1116,3,38,19,0,1115,1111,
        1,0,0,0,1115,1112,1,0,0,0,1115,1113,1,0,0,0,1115,1114,1,0,0,0,1116,
        17,1,0,0,0,1117,1119,5,4,0,0,1118,1120,3,4,2,0,1119,1118,1,0,0,0,
        1119,1120,1,0,0,0,1120,1130,1,0,0,0,1121,1122,5,5,0,0,1122,1127,
        3,10,5,0,1123,1124,5,136,0,0,1124,1126,3,10,5,0,1125,1123,1,0,0,
        0,1126,1129,1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,1131,
        1,0,0,0,1129,1127,1,0,0,0,1130,1121,1,0,0,0,1130,1131,1,0,0,0,1131,
        1133,1,0,0,0,1132,1117,1,0,0,0,1132,1133,1,0,0,0,1133,1136,1,0,0,
        0,1134,1135,5,6,0,0,1135,1137,5,173,0,0,1136,1134,1,0,0,0,1136,1137,
        1,0,0,0,1137,1138,1,0,0,0,1138,1139,5,174,0,0,1139,19,1,0,0,0,1140,
        1142,5,7,0,0,1141,1143,3,4,2,0,1142,1141,1,0,0,0,1142,1143,1,0,0,
        0,1143,1146,1,0,0,0,1144,1145,5,6,0,0,1145,1147,5,173,0,0,1146,1144,
        1,0,0,0,1146,1147,1,0,0,0,1147,1148,1,0,0,0,1148,1149,5,174,0,0,
        1149,21,1,0,0,0,1150,1152,5,8,0,0,1151,1153,3,4,2,0,1152,1151,1,
        0,0,0,1152,1153,1,0,0,0,1153,1155,1,0,0,0,1154,1150,1,0,0,0,1154,
        1155,1,0,0,0,1155,1156,1,0,0,0,1156,1157,5,9,0,0,1157,1158,5,173,
        0,0,1158,1159,5,174,0,0,1159,23,1,0,0,0,1160,1161,5,10,0,0,1161,
        25,1,0,0,0,1162,1163,3,24,12,0,1163,1164,5,11,0,0,1164,27,1,0,0,
        0,1165,1168,3,24,12,0,1166,1168,5,137,0,0,1167,1165,1,0,0,0,1167,
        1166,1,0,0,0,1168,29,1,0,0,0,1169,1171,5,12,0,0,1170,1169,1,0,0,
        0,1170,1171,1,0,0,0,1171,1175,1,0,0,0,1172,1174,3,146,73,0,1173,
        1172,1,0,0,0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,
        0,1176,1178,1,0,0,0,1177,1175,1,0,0,0,1178,1179,3,26,13,0,1179,1180,
        3,150,75,0,1180,31,1,0,0,0,1181,1182,5,138,0,0,1182,1183,3,36,18,
        0,1183,33,1,0,0,0,1184,1185,5,138,0,0,1185,1186,3,36,18,0,1186,35,
        1,0,0,0,1187,1188,3,42,21,0,1188,37,1,0,0,0,1189,1191,3,174,87,0,
        1190,1189,1,0,0,0,1191,1194,1,0,0,0,1192,1190,1,0,0,0,1192,1193,
        1,0,0,0,1193,1195,1,0,0,0,1194,1192,1,0,0,0,1195,1196,3,28,14,0,
        1196,1206,3,40,20,0,1197,1198,5,5,0,0,1198,1203,3,10,5,0,1199,1200,
        5,136,0,0,1200,1202,3,10,5,0,1201,1199,1,0,0,0,1202,1205,1,0,0,0,
        1203,1201,1,0,0,0,1203,1204,1,0,0,0,1204,1207,1,0,0,0,1205,1203,
        1,0,0,0,1206,1197,1,0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,
        1209,3,44,22,0,1209,39,1,0,0,0,1210,1212,3,4,2,0,1211,1210,1,0,0,
        0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1215,3,112,56,0,1214,
        1211,1,0,0,0,1214,1215,1,0,0,0,1215,1216,1,0,0,0,1216,1217,3,42,
        21,0,1217,41,1,0,0,0,1218,1219,3,1022,511,0,1219,43,1,0,0,0,1220,
        1233,5,135,0,0,1221,1228,5,129,0,0,1222,1227,3,158,79,0,1223,1227,
        3,46,23,0,1224,1227,3,66,33,0,1225,1227,3,70,35,0,1226,1222,1,0,
        0,0,1226,1223,1,0,0,0,1226,1224,1,0,0,0,1226,1225,1,0,0,0,1227,1230,
        1,0,0,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,1231,1,0,0,0,1230,
        1228,1,0,0,0,1231,1233,5,130,0,0,1232,1220,1,0,0,0,1232,1221,1,0,
        0,0,1233,45,1,0,0,0,1234,1235,3,48,24,0,1235,47,1,0,0,0,1236,1238,
        5,13,0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1240,1,0,0,0,1239,
        1241,7,0,0,0,1240,1239,1,0,0,0,1240,1241,1,0,0,0,1241,1242,1,0,0,
        0,1242,1244,3,136,68,0,1243,1245,3,102,51,0,1244,1243,1,0,0,0,1244,
        1245,1,0,0,0,1245,1247,1,0,0,0,1246,1248,3,186,93,0,1247,1246,1,
        0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1250,3,44,22,0,1250,
        49,1,0,0,0,1251,1253,3,34,17,0,1252,1251,1,0,0,0,1253,1256,1,0,0,
        0,1254,1252,1,0,0,0,1254,1255,1,0,0,0,1255,1257,1,0,0,0,1256,1254,
        1,0,0,0,1257,1258,3,54,27,0,1258,1259,3,56,28,0,1259,51,1,0,0,0,
        1260,1262,5,15,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,
        1,0,0,0,1263,1267,5,16,0,0,1264,1266,3,34,17,0,1265,1264,1,0,0,0,
        1266,1269,1,0,0,0,1267,1265,1,0,0,0,1267,1268,1,0,0,0,1268,1270,
        1,0,0,0,1269,1267,1,0,0,0,1270,1271,3,54,27,0,1271,1272,3,56,28,
        0,1272,53,1,0,0,0,1273,1275,5,17,0,0,1274,1276,3,4,2,0,1275,1274,
        1,0,0,0,1275,1276,1,0,0,0,1276,55,1,0,0,0,1277,1290,5,135,0,0,1278,
        1285,5,129,0,0,1279,1284,3,62,31,0,1280,1284,3,64,32,0,1281,1284,
        3,66,33,0,1282,1284,3,70,35,0,1283,1279,1,0,0,0,1283,1280,1,0,0,
        0,1283,1281,1,0,0,0,1283,1282,1,0,0,0,1284,1287,1,0,0,0,1285,1283,
        1,0,0,0,1285,1286,1,0,0,0,1286,1288,1,0,0,0,1287,1285,1,0,0,0,1288,
        1290,5,130,0,0,1289,1277,1,0,0,0,1289,1278,1,0,0,0,1290,57,1,0,0,
        0,1291,1296,3,62,31,0,1292,1296,3,64,32,0,1293,1296,3,66,33,0,1294,
        1296,3,70,35,0,1295,1291,1,0,0,0,1295,1292,1,0,0,0,1295,1293,1,0,
        0,0,1295,1294,1,0,0,0,1296,59,1,0,0,0,1297,1299,3,1026,513,0,1298,
        1297,1,0,0,0,1298,1299,1,0,0,0,1299,61,1,0,0,0,1300,1303,3,60,30,
        0,1301,1304,3,90,45,0,1302,1304,3,92,46,0,1303,1301,1,0,0,0,1303,
        1302,1,0,0,0,1304,63,1,0,0,0,1305,1306,3,60,30,0,1306,1307,5,18,
        0,0,1307,1308,3,844,422,0,1308,1309,5,135,0,0,1309,65,1,0,0,0,1310,
        1311,3,60,30,0,1311,1316,5,19,0,0,1312,1313,5,127,0,0,1313,1314,
        3,1018,509,0,1314,1315,5,128,0,0,1315,1317,1,0,0,0,1316,1312,1,0,
        0,0,1316,1317,1,0,0,0,1317,1319,1,0,0,0,1318,1320,3,1018,509,0,1319,
        1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1322,5,20,
        0,0,1322,1323,3,1022,511,0,1323,1324,3,6,3,0,1324,67,1,0,0,0,1325,
        1327,3,1026,513,0,1326,1325,1,0,0,0,1326,1327,1,0,0,0,1327,1328,
        1,0,0,0,1328,1330,5,21,0,0,1329,1331,5,22,0,0,1330,1329,1,0,0,0,
        1330,1331,1,0,0,0,1331,69,1,0,0,0,1332,1335,3,72,36,0,1333,1335,
        3,76,38,0,1334,1332,1,0,0,0,1334,1333,1,0,0,0,1335,1336,1,0,0,0,
        1336,1337,3,6,3,0,1337,71,1,0,0,0,1338,1339,3,68,34,0,1339,1340,
        3,74,37,0,1340,73,1,0,0,0,1341,1344,3,1022,511,0,1342,1343,5,140,
        0,0,1343,1345,5,141,0,0,1344,1342,1,0,0,0,1344,1345,1,0,0,0,1345,
        75,1,0,0,0,1346,1349,3,68,34,0,1347,1350,3,78,39,0,1348,1350,3,80,
        40,0,1349,1347,1,0,0,0,1349,1348,1,0,0,0,1350,77,1,0,0,0,1351,1352,
        3,1022,511,0,1352,1353,5,140,0,0,1353,1356,5,142,0,0,1354,1355,5,
        140,0,0,1355,1357,5,141,0,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,
        1357,79,1,0,0,0,1358,1360,3,82,41,0,1359,1361,3,88,44,0,1360,1359,
        1,0,0,0,1361,1362,1,0,0,0,1362,1360,1,0,0,0,1362,1363,1,0,0,0,1363,
        81,1,0,0,0,1364,1367,3,84,42,0,1365,1367,3,86,43,0,1366,1364,1,0,
        0,0,1366,1365,1,0,0,0,1367,83,1,0,0,0,1368,1369,3,74,37,0,1369,85,
        1,0,0,0,1370,1371,3,78,39,0,1371,87,1,0,0,0,1372,1373,3,1024,512,
        0,1373,1374,3,844,422,0,1374,1375,5,131,0,0,1375,89,1,0,0,0,1376,
        1407,3,50,25,0,1377,1407,3,52,26,0,1378,1407,3,16,8,0,1379,1407,
        3,8,4,0,1380,1407,3,220,110,0,1381,1407,3,230,115,0,1382,1407,3,
        246,123,0,1383,1407,3,248,124,0,1384,1407,3,284,142,0,1385,1407,
        3,30,15,0,1386,1407,3,294,147,0,1387,1407,3,334,167,0,1388,1407,
        3,356,178,0,1389,1407,3,402,201,0,1390,1407,3,438,219,0,1391,1407,
        3,302,151,0,1392,1407,3,452,226,0,1393,1407,3,652,326,0,1394,1407,
        3,586,293,0,1395,1407,3,672,336,0,1396,1407,3,686,343,0,1397,1407,
        3,730,365,0,1398,1407,3,740,370,0,1399,1407,3,760,380,0,1400,1407,
        3,770,385,0,1401,1407,3,784,392,0,1402,1407,3,794,397,0,1403,1407,
        3,826,413,0,1404,1407,3,834,417,0,1405,1407,3,210,105,0,1406,1376,
        1,0,0,0,1406,1377,1,0,0,0,1406,1378,1,0,0,0,1406,1379,1,0,0,0,1406,
        1380,1,0,0,0,1406,1381,1,0,0,0,1406,1382,1,0,0,0,1406,1383,1,0,0,
        0,1406,1384,1,0,0,0,1406,1385,1,0,0,0,1406,1386,1,0,0,0,1406,1387,
        1,0,0,0,1406,1388,1,0,0,0,1406,1389,1,0,0,0,1406,1390,1,0,0,0,1406,
        1391,1,0,0,0,1406,1392,1,0,0,0,1406,1393,1,0,0,0,1406,1394,1,0,0,
        0,1406,1395,1,0,0,0,1406,1396,1,0,0,0,1406,1397,1,0,0,0,1406,1398,
        1,0,0,0,1406,1399,1,0,0,0,1406,1400,1,0,0,0,1406,1401,1,0,0,0,1406,
        1402,1,0,0,0,1406,1403,1,0,0,0,1406,1404,1,0,0,0,1406,1405,1,0,0,
        0,1407,91,1,0,0,0,1408,1411,3,200,100,0,1409,1411,3,202,101,0,1410,
        1408,1,0,0,0,1410,1409,1,0,0,0,1411,93,1,0,0,0,1412,1413,3,96,48,
        0,1413,1418,3,98,49,0,1414,1415,5,136,0,0,1415,1417,3,98,49,0,1416,
        1414,1,0,0,0,1417,1420,1,0,0,0,1418,1416,1,0,0,0,1418,1419,1,0,0,
        0,1419,95,1,0,0,0,1420,1418,1,0,0,0,1421,1424,5,143,0,0,1422,1424,
        5,23,0,0,1423,1421,1,0,0,0,1423,1422,1,0,0,0,1424,97,1,0,0,0,1425,
        1426,3,1022,511,0,1426,99,1,0,0,0,1427,1429,3,4,2,0,1428,1430,3,
        102,51,0,1429,1428,1,0,0,0,1429,1430,1,0,0,0,1430,1433,1,0,0,0,1431,
        1433,3,102,51,0,1432,1427,1,0,0,0,1432,1431,1,0,0,0,1433,101,1,0,
        0,0,1434,1436,3,106,53,0,1435,1434,1,0,0,0,1436,1437,1,0,0,0,1437,
        1435,1,0,0,0,1437,1438,1,0,0,0,1438,1440,1,0,0,0,1439,1441,3,104,
        52,0,1440,1439,1,0,0,0,1440,1441,1,0,0,0,1441,1445,1,0,0,0,1442,
        1444,3,106,53,0,1443,1442,1,0,0,0,1444,1447,1,0,0,0,1445,1443,1,
        0,0,0,1445,1446,1,0,0,0,1446,1456,1,0,0,0,1447,1445,1,0,0,0,1448,
        1452,3,104,52,0,1449,1451,3,106,53,0,1450,1449,1,0,0,0,1451,1454,
        1,0,0,0,1452,1450,1,0,0,0,1452,1453,1,0,0,0,1453,1456,1,0,0,0,1454,
        1452,1,0,0,0,1455,1435,1,0,0,0,1455,1448,1,0,0,0,1456,103,1,0,0,
        0,1457,1472,3,138,69,0,1458,1460,3,138,69,0,1459,1458,1,0,0,0,1459,
        1460,1,0,0,0,1460,1469,1,0,0,0,1461,1463,5,24,0,0,1462,1464,5,25,
        0,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1470,1,0,0,0,1465,1467,
        5,25,0,0,1466,1468,5,24,0,0,1467,1466,1,0,0,0,1467,1468,1,0,0,0,
        1468,1470,1,0,0,0,1469,1461,1,0,0,0,1469,1465,1,0,0,0,1470,1472,
        1,0,0,0,1471,1457,1,0,0,0,1471,1459,1,0,0,0,1472,105,1,0,0,0,1473,
        1478,3,108,54,0,1474,1478,3,114,57,0,1475,1478,3,120,60,0,1476,1478,
        3,124,62,0,1477,1473,1,0,0,0,1477,1474,1,0,0,0,1477,1475,1,0,0,0,
        1477,1476,1,0,0,0,1478,107,1,0,0,0,1479,1484,3,110,55,0,1480,1481,
        5,136,0,0,1481,1483,3,130,65,0,1482,1480,1,0,0,0,1483,1486,1,0,0,
        0,1484,1482,1,0,0,0,1484,1485,1,0,0,0,1485,109,1,0,0,0,1486,1484,
        1,0,0,0,1487,1488,3,112,56,0,1488,1489,3,130,65,0,1489,111,1,0,0,
        0,1490,1494,5,144,0,0,1491,1492,5,26,0,0,1492,1494,5,27,0,0,1493,
        1490,1,0,0,0,1493,1491,1,0,0,0,1494,113,1,0,0,0,1495,1500,3,116,
        58,0,1496,1497,5,136,0,0,1497,1499,3,132,66,0,1498,1496,1,0,0,0,
        1499,1502,1,0,0,0,1500,1498,1,0,0,0,1500,1501,1,0,0,0,1501,115,1,
        0,0,0,1502,1500,1,0,0,0,1503,1504,3,118,59,0,1504,1505,3,132,66,
        0,1505,117,1,0,0,0,1506,1509,5,143,0,0,1507,1509,5,28,0,0,1508,1506,
        1,0,0,0,1508,1507,1,0,0,0,1509,119,1,0,0,0,1510,1511,3,122,61,0,
        1511,1512,3,134,67,0,1512,121,1,0,0,0,1513,1516,5,145,0,0,1514,1516,
        5,29,0,0,1515,1513,1,0,0,0,1515,1514,1,0,0,0,1516,123,1,0,0,0,1517,
        1522,3,126,63,0,1518,1519,5,136,0,0,1519,1521,3,136,68,0,1520,1518,
        1,0,0,0,1521,1524,1,0,0,0,1522,1520,1,0,0,0,1522,1523,1,0,0,0,1523,
        125,1,0,0,0,1524,1522,1,0,0,0,1525,1526,3,128,64,0,1526,1527,3,136,
        68,0,1527,127,1,0,0,0,1528,1531,5,139,0,0,1529,1531,5,14,0,0,1530,
        1528,1,0,0,0,1530,1529,1,0,0,0,1531,129,1,0,0,0,1532,1535,3,974,
        487,0,1533,1535,3,310,155,0,1534,1532,1,0,0,0,1534,1533,1,0,0,0,
        1535,131,1,0,0,0,1536,1539,3,1022,511,0,1537,1539,3,976,488,0,1538,
        1536,1,0,0,0,1538,1537,1,0,0,0,1539,133,1,0,0,0,1540,1543,3,1022,
        511,0,1541,1543,3,976,488,0,1542,1540,1,0,0,0,1542,1541,1,0,0,0,
        1543,135,1,0,0,0,1544,1547,3,1022,511,0,1545,1547,3,976,488,0,1546,
        1544,1,0,0,0,1546,1545,1,0,0,0,1547,137,1,0,0,0,1548,1549,3,140,
        70,0,1549,139,1,0,0,0,1550,1551,5,132,0,0,1551,1554,3,142,71,0,1552,
        1553,5,146,0,0,1553,1555,3,142,71,0,1554,1552,1,0,0,0,1554,1555,
        1,0,0,0,1555,1556,1,0,0,0,1556,1557,5,131,0,0,1557,141,1,0,0,0,1558,
        1561,3,1002,501,0,1559,1561,3,966,483,0,1560,1558,1,0,0,0,1560,1559,
        1,0,0,0,1561,143,1,0,0,0,1562,1565,5,12,0,0,1563,1565,5,30,0,0,1564,
        1562,1,0,0,0,1564,1563,1,0,0,0,1565,145,1,0,0,0,1566,1567,3,34,17,
        0,1567,147,1,0,0,0,1568,1570,3,144,72,0,1569,1568,1,0,0,0,1569,1570,
        1,0,0,0,1570,1574,1,0,0,0,1571,1573,3,146,73,0,1572,1571,1,0,0,0,
        1573,1576,1,0,0,0,1574,1572,1,0,0,0,1574,1575,1,0,0,0,1575,149,1,
        0,0,0,1576,1574,1,0,0,0,1577,1578,3,152,76,0,1578,1579,3,154,77,
        0,1579,151,1,0,0,0,1580,1582,3,4,2,0,1581,1580,1,0,0,0,1581,1582,
        1,0,0,0,1582,1584,1,0,0,0,1583,1585,3,94,47,0,1584,1583,1,0,0,0,
        1584,1585,1,0,0,0,1585,153,1,0,0,0,1586,1596,5,135,0,0,1587,1591,
        5,129,0,0,1588,1590,3,156,78,0,1589,1588,1,0,0,0,1590,1593,1,0,0,
        0,1591,1589,1,0,0,0,1591,1592,1,0,0,0,1592,1594,1,0,0,0,1593,1591,
        1,0,0,0,1594,1596,5,130,0,0,1595,1586,1,0,0,0,1595,1587,1,0,0,0,
        1596,155,1,0,0,0,1597,1607,3,158,79,0,1598,1607,3,160,80,0,1599,
        1607,3,162,81,0,1600,1602,3,266,133,0,1601,1600,1,0,0,0,1601,1602,
        1,0,0,0,1602,1603,1,0,0,0,1603,1607,3,164,82,0,1604,1607,3,66,33,
        0,1605,1607,3,70,35,0,1606,1597,1,0,0,0,1606,1598,1,0,0,0,1606,1599,
        1,0,0,0,1606,1601,1,0,0,0,1606,1604,1,0,0,0,1606,1605,1,0,0,0,1607,
        157,1,0,0,0,1608,1609,3,60,30,0,1609,1610,3,90,45,0,1610,159,1,0,
        0,0,1611,1612,3,60,30,0,1612,1613,5,31,0,0,1613,1614,3,208,104,0,
        1614,161,1,0,0,0,1615,1616,3,60,30,0,1616,1617,3,200,100,0,1617,
        163,1,0,0,0,1618,1619,3,60,30,0,1619,1620,3,202,101,0,1620,165,1,
        0,0,0,1621,1622,3,60,30,0,1622,1623,3,204,102,0,1623,167,1,0,0,0,
        1624,1625,3,60,30,0,1625,1626,3,206,103,0,1626,169,1,0,0,0,1627,
        1629,3,1028,514,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1631,
        1,0,0,0,1630,1632,7,1,0,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,
        1634,1,0,0,0,1633,1635,5,32,0,0,1634,1633,1,0,0,0,1634,1635,1,0,
        0,0,1635,1637,1,0,0,0,1636,1638,5,33,0,0,1637,1636,1,0,0,0,1637,
        1638,1,0,0,0,1638,1640,1,0,0,0,1639,1641,5,34,0,0,1640,1639,1,0,
        0,0,1640,1641,1,0,0,0,1641,171,1,0,0,0,1642,1644,3,170,85,0,1643,
        1645,5,13,0,0,1644,1643,1,0,0,0,1644,1645,1,0,0,0,1645,173,1,0,0,
        0,1646,1647,3,34,17,0,1647,175,1,0,0,0,1648,1652,3,172,86,0,1649,
        1651,3,174,87,0,1650,1649,1,0,0,0,1651,1654,1,0,0,0,1652,1650,1,
        0,0,0,1652,1653,1,0,0,0,1653,177,1,0,0,0,1654,1652,1,0,0,0,1655,
        1657,3,180,90,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1658,1,
        0,0,0,1658,1659,3,182,91,0,1659,179,1,0,0,0,1660,1661,3,100,50,0,
        1661,181,1,0,0,0,1662,1664,3,186,93,0,1663,1662,1,0,0,0,1663,1664,
        1,0,0,0,1664,1665,1,0,0,0,1665,1666,3,184,92,0,1666,183,1,0,0,0,
        1667,1668,3,154,77,0,1668,185,1,0,0,0,1669,1670,3,188,94,0,1670,
        187,1,0,0,0,1671,1678,5,147,0,0,1672,1678,5,148,0,0,1673,1675,5,
        35,0,0,1674,1676,7,2,0,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,
        1678,1,0,0,0,1677,1671,1,0,0,0,1677,1672,1,0,0,0,1677,1673,1,0,0,
        0,1678,1679,1,0,0,0,1679,1680,3,844,422,0,1680,189,1,0,0,0,1681,
        1682,5,13,0,0,1682,191,1,0,0,0,1683,1684,3,190,95,0,1684,193,1,0,
        0,0,1685,1686,3,170,85,0,1686,1688,3,180,90,0,1687,1689,3,186,93,
        0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,1690,1,0,0,0,1690,1691,
        3,184,92,0,1691,195,1,0,0,0,1692,1693,3,170,85,0,1693,1694,3,192,
        96,0,1694,1695,3,178,89,0,1695,197,1,0,0,0,1696,1700,3,134,67,0,
        1697,1699,3,106,53,0,1698,1697,1,0,0,0,1699,1702,1,0,0,0,1700,1698,
        1,0,0,0,1700,1701,1,0,0,0,1701,1703,1,0,0,0,1702,1700,1,0,0,0,1703,
        1704,3,184,92,0,1704,199,1,0,0,0,1705,1713,3,194,97,0,1706,1713,
        3,196,98,0,1707,1713,3,222,111,0,1708,1713,3,238,119,0,1709,1713,
        3,324,162,0,1710,1713,3,328,164,0,1711,1713,3,212,106,0,1712,1705,
        1,0,0,0,1712,1706,1,0,0,0,1712,1707,1,0,0,0,1712,1708,1,0,0,0,1712,
        1709,1,0,0,0,1712,1710,1,0,0,0,1712,1711,1,0,0,0,1713,201,1,0,0,
        0,1714,1717,3,204,102,0,1715,1717,3,206,103,0,1716,1714,1,0,0,0,
        1716,1715,1,0,0,0,1717,203,1,0,0,0,1718,1734,3,258,129,0,1719,1734,
        3,260,130,0,1720,1734,3,262,131,0,1721,1734,3,264,132,0,1722,1734,
        3,286,143,0,1723,1734,3,296,148,0,1724,1734,3,806,403,0,1725,1734,
        3,838,419,0,1726,1734,3,316,158,0,1727,1734,3,340,170,0,1728,1734,
        3,420,210,0,1729,1734,3,444,222,0,1730,1734,3,360,180,0,1731,1734,
        3,368,184,0,1732,1734,3,372,186,0,1733,1718,1,0,0,0,1733,1719,1,
        0,0,0,1733,1720,1,0,0,0,1733,1721,1,0,0,0,1733,1722,1,0,0,0,1733,
        1723,1,0,0,0,1733,1724,1,0,0,0,1733,1725,1,0,0,0,1733,1726,1,0,0,
        0,1733,1727,1,0,0,0,1733,1728,1,0,0,0,1733,1729,1,0,0,0,1733,1730,
        1,0,0,0,1733,1731,1,0,0,0,1733,1732,1,0,0,0,1734,205,1,0,0,0,1735,
        1752,3,468,234,0,1736,1752,3,666,333,0,1737,1752,3,620,310,0,1738,
        1752,3,676,338,0,1739,1752,3,714,357,0,1740,1752,3,734,367,0,1741,
        1752,3,752,376,0,1742,1752,3,762,381,0,1743,1752,3,772,386,0,1744,
        1752,3,786,393,0,1745,1752,3,828,414,0,1746,1752,3,470,235,0,1747,
        1752,3,624,312,0,1748,1752,3,788,394,0,1749,1752,3,678,339,0,1750,
        1752,3,716,358,0,1751,1735,1,0,0,0,1751,1736,1,0,0,0,1751,1737,1,
        0,0,0,1751,1738,1,0,0,0,1751,1739,1,0,0,0,1751,1740,1,0,0,0,1751,
        1741,1,0,0,0,1751,1742,1,0,0,0,1751,1743,1,0,0,0,1751,1744,1,0,0,
        0,1751,1745,1,0,0,0,1751,1746,1,0,0,0,1751,1747,1,0,0,0,1751,1748,
        1,0,0,0,1751,1749,1,0,0,0,1751,1750,1,0,0,0,1752,207,1,0,0,0,1753,
        1775,3,198,99,0,1754,1775,3,196,98,0,1755,1775,3,222,111,0,1756,
        1775,3,324,162,0,1757,1775,3,328,164,0,1758,1775,3,258,129,0,1759,
        1775,3,260,130,0,1760,1775,3,262,131,0,1761,1775,3,264,132,0,1762,
        1775,3,286,143,0,1763,1775,3,296,148,0,1764,1775,3,806,403,0,1765,
        1775,3,838,419,0,1766,1775,3,316,158,0,1767,1775,3,340,170,0,1768,
        1775,3,420,210,0,1769,1775,3,444,222,0,1770,1775,3,360,180,0,1771,
        1775,3,368,184,0,1772,1775,3,372,186,0,1773,1775,3,206,103,0,1774,
        1753,1,0,0,0,1774,1754,1,0,0,0,1774,1755,1,0,0,0,1774,1756,1,0,0,
        0,1774,1757,1,0,0,0,1774,1758,1,0,0,0,1774,1759,1,0,0,0,1774,1760,
        1,0,0,0,1774,1761,1,0,0,0,1774,1762,1,0,0,0,1774,1763,1,0,0,0,1774,
        1764,1,0,0,0,1774,1765,1,0,0,0,1774,1766,1,0,0,0,1774,1767,1,0,0,
        0,1774,1768,1,0,0,0,1774,1769,1,0,0,0,1774,1770,1,0,0,0,1774,1771,
        1,0,0,0,1774,1772,1,0,0,0,1774,1773,1,0,0,0,1775,209,1,0,0,0,1776,
        1778,3,144,72,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,1778,1780,1,
        0,0,0,1779,1781,3,146,73,0,1780,1779,1,0,0,0,1781,1782,1,0,0,0,1782,
        1780,1,0,0,0,1782,1783,1,0,0,0,1783,1784,1,0,0,0,1784,1785,5,11,
        0,0,1785,1786,3,150,75,0,1786,211,1,0,0,0,1787,1789,3,172,86,0,1788,
        1790,3,174,87,0,1789,1788,1,0,0,0,1790,1791,1,0,0,0,1791,1789,1,
        0,0,0,1791,1792,1,0,0,0,1792,1793,1,0,0,0,1793,1794,3,178,89,0,1794,
        213,1,0,0,0,1795,1796,5,36,0,0,1796,215,1,0,0,0,1797,1798,3,214,
        107,0,1798,1799,5,11,0,0,1799,217,1,0,0,0,1800,1801,3,214,107,0,
        1801,219,1,0,0,0,1802,1803,3,148,74,0,1803,1804,3,216,108,0,1804,
        1805,3,150,75,0,1805,221,1,0,0,0,1806,1807,3,176,88,0,1807,1808,
        3,218,109,0,1808,1809,3,178,89,0,1809,223,1,0,0,0,1810,1811,5,37,
        0,0,1811,225,1,0,0,0,1812,1813,3,224,112,0,1813,1814,5,11,0,0,1814,
        227,1,0,0,0,1815,1816,3,224,112,0,1816,229,1,0,0,0,1817,1819,3,146,
        73,0,1818,1817,1,0,0,0,1819,1822,1,0,0,0,1820,1818,1,0,0,0,1820,
        1821,1,0,0,0,1821,1823,1,0,0,0,1822,1820,1,0,0,0,1823,1824,3,226,
        113,0,1824,1825,3,152,76,0,1825,1826,3,232,116,0,1826,231,1,0,0,
        0,1827,1838,5,135,0,0,1828,1833,5,129,0,0,1829,1832,3,14,7,0,1830,
        1832,3,234,117,0,1831,1829,1,0,0,0,1831,1830,1,0,0,0,1832,1835,1,
        0,0,0,1833,1831,1,0,0,0,1833,1834,1,0,0,0,1834,1836,1,0,0,0,1835,
        1833,1,0,0,0,1836,1838,5,130,0,0,1837,1827,1,0,0,0,1837,1828,1,0,
        0,0,1838,233,1,0,0,0,1839,1840,3,60,30,0,1840,1841,3,236,118,0,1841,
        235,1,0,0,0,1842,1844,3,174,87,0,1843,1842,1,0,0,0,1844,1847,1,0,
        0,0,1845,1843,1,0,0,0,1845,1846,1,0,0,0,1846,1849,1,0,0,0,1847,1845,
        1,0,0,0,1848,1850,3,228,114,0,1849,1848,1,0,0,0,1849,1850,1,0,0,
        0,1850,1851,1,0,0,0,1851,1852,3,178,89,0,1852,237,1,0,0,0,1853,1854,
        3,176,88,0,1854,1855,3,228,114,0,1855,1856,3,178,89,0,1856,239,1,
        0,0,0,1857,1858,5,38,0,0,1858,241,1,0,0,0,1859,1860,3,240,120,0,
        1860,1861,5,11,0,0,1861,243,1,0,0,0,1862,1864,3,144,72,0,1863,1862,
        1,0,0,0,1863,1864,1,0,0,0,1864,1867,1,0,0,0,1865,1866,5,39,0,0,1866,
        1868,3,250,125,0,1867,1865,1,0,0,0,1867,1868,1,0,0,0,1868,1872,1,
        0,0,0,1869,1871,3,146,73,0,1870,1869,1,0,0,0,1871,1874,1,0,0,0,1872,
        1870,1,0,0,0,1872,1873,1,0,0,0,1873,245,1,0,0,0,1874,1872,1,0,0,
        0,1875,1876,3,244,122,0,1876,1877,3,242,121,0,1877,1878,3,150,75,
        0,1878,247,1,0,0,0,1879,1881,3,144,72,0,1880,1879,1,0,0,0,1880,1881,
        1,0,0,0,1881,1882,1,0,0,0,1882,1886,5,39,0,0,1883,1885,3,146,73,
        0,1884,1883,1,0,0,0,1885,1888,1,0,0,0,1886,1884,1,0,0,0,1886,1887,
        1,0,0,0,1887,1889,1,0,0,0,1888,1886,1,0,0,0,1889,1890,5,11,0,0,1890,
        1891,3,150,75,0,1891,1892,3,250,125,0,1892,249,1,0,0,0,1893,1894,
        3,252,126,0,1894,251,1,0,0,0,1895,1896,1,0,0,0,1896,253,1,0,0,0,
        1897,1898,3,240,120,0,1898,255,1,0,0,0,1899,1901,3,172,86,0,1900,
        1902,5,39,0,0,1901,1900,1,0,0,0,1901,1902,1,0,0,0,1902,1904,1,0,
        0,0,1903,1905,3,1030,515,0,1904,1903,1,0,0,0,1904,1905,1,0,0,0,1905,
        1909,1,0,0,0,1906,1908,3,174,87,0,1907,1906,1,0,0,0,1908,1911,1,
        0,0,0,1909,1907,1,0,0,0,1909,1910,1,0,0,0,1910,257,1,0,0,0,1911,
        1909,1,0,0,0,1912,1913,3,256,128,0,1913,1914,3,254,127,0,1914,1915,
        3,178,89,0,1915,259,1,0,0,0,1916,1917,3,172,86,0,1917,1921,5,39,
        0,0,1918,1920,3,174,87,0,1919,1918,1,0,0,0,1920,1923,1,0,0,0,1921,
        1919,1,0,0,0,1921,1922,1,0,0,0,1922,1924,1,0,0,0,1923,1921,1,0,0,
        0,1924,1925,3,178,89,0,1925,261,1,0,0,0,1926,1928,3,172,86,0,1927,
        1929,5,39,0,0,1928,1927,1,0,0,0,1928,1929,1,0,0,0,1929,1930,1,0,
        0,0,1930,1934,3,1030,515,0,1931,1933,3,174,87,0,1932,1931,1,0,0,
        0,1933,1936,1,0,0,0,1934,1932,1,0,0,0,1934,1935,1,0,0,0,1935,1937,
        1,0,0,0,1936,1934,1,0,0,0,1937,1938,3,178,89,0,1938,263,1,0,0,0,
        1939,1940,3,256,128,0,1940,1949,5,40,0,0,1941,1943,3,134,67,0,1942,
        1944,3,102,51,0,1943,1942,1,0,0,0,1943,1944,1,0,0,0,1944,1950,1,
        0,0,0,1945,1947,3,254,127,0,1946,1948,3,180,90,0,1947,1946,1,0,0,
        0,1947,1948,1,0,0,0,1948,1950,1,0,0,0,1949,1941,1,0,0,0,1949,1945,
        1,0,0,0,1950,1951,1,0,0,0,1951,1952,3,182,91,0,1952,265,1,0,0,0,
        1953,1954,3,268,134,0,1954,267,1,0,0,0,1955,1956,5,41,0,0,1956,1957,
        3,270,135,0,1957,1958,3,274,137,0,1958,269,1,0,0,0,1959,1960,3,272,
        136,0,1960,271,1,0,0,0,1961,1963,3,138,69,0,1962,1961,1,0,0,0,1962,
        1963,1,0,0,0,1963,273,1,0,0,0,1964,1965,3,276,138,0,1965,275,1,0,
        0,0,1966,1967,1,0,0,0,1967,277,1,0,0,0,1968,1969,5,42,0,0,1969,279,
        1,0,0,0,1970,1971,3,278,139,0,1971,1972,5,11,0,0,1972,281,1,0,0,
        0,1973,1974,3,278,139,0,1974,283,1,0,0,0,1975,1976,3,244,122,0,1976,
        1977,3,280,140,0,1977,1978,3,150,75,0,1978,285,1,0,0,0,1979,1980,
        3,256,128,0,1980,1981,3,282,141,0,1981,1982,3,178,89,0,1982,287,
        1,0,0,0,1983,1984,5,43,0,0,1984,289,1,0,0,0,1985,1986,3,288,144,
        0,1986,1987,5,11,0,0,1987,291,1,0,0,0,1988,1989,3,288,144,0,1989,
        293,1,0,0,0,1990,1991,3,244,122,0,1991,1992,3,290,145,0,1992,1993,
        3,150,75,0,1993,295,1,0,0,0,1994,1995,3,256,128,0,1995,1996,3,292,
        146,0,1996,1997,3,178,89,0,1997,297,1,0,0,0,1998,1999,5,44,0,0,1999,
        299,1,0,0,0,2000,2001,3,298,149,0,2001,2002,5,11,0,0,2002,301,1,
        0,0,0,2003,2004,3,148,74,0,2004,2005,3,300,150,0,2005,2006,3,150,
        75,0,2006,2007,3,304,152,0,2007,303,1,0,0,0,2008,2009,3,306,153,
        0,2009,305,1,0,0,0,2010,2011,3,308,154,0,2011,307,1,0,0,0,2012,2013,
        1,0,0,0,2013,309,1,0,0,0,2014,2015,3,312,156,0,2015,311,1,0,0,0,
        2016,2017,5,149,0,0,2017,2018,3,1022,511,0,2018,313,1,0,0,0,2019,
        2020,3,298,149,0,2020,315,1,0,0,0,2021,2022,3,256,128,0,2022,2023,
        3,314,157,0,2023,2024,3,178,89,0,2024,317,1,0,0,0,2025,2026,3,320,
        160,0,2026,319,1,0,0,0,2027,2028,3,1018,509,0,2028,2029,3,122,61,
        0,2029,2031,1,0,0,0,2030,2027,1,0,0,0,2030,2031,1,0,0,0,2031,2032,
        1,0,0,0,2032,2034,3,134,67,0,2033,2035,3,138,69,0,2034,2033,1,0,
        0,0,2034,2035,1,0,0,0,2035,321,1,0,0,0,2036,2037,5,45,0,0,2037,323,
        1,0,0,0,2038,2043,3,176,88,0,2039,2041,3,322,161,0,2040,2042,3,180,
        90,0,2041,2040,1,0,0,0,2041,2042,1,0,0,0,2042,2044,1,0,0,0,2043,
        2039,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2046,5,46,
        0,0,2046,2047,3,318,159,0,2047,2048,5,147,0,0,2048,2049,3,318,159,
        0,2049,2050,3,154,77,0,2050,325,1,0,0,0,2051,2052,5,47,0,0,2052,
        327,1,0,0,0,2053,2058,3,176,88,0,2054,2056,3,326,163,0,2055,2057,
        3,180,90,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2059,1,0,0,0,
        2058,2054,1,0,0,0,2058,2059,1,0,0,0,2059,2060,1,0,0,0,2060,2061,
        5,48,0,0,2061,2062,3,318,159,0,2062,2063,5,41,0,0,2063,2064,3,318,
        159,0,2064,2065,3,154,77,0,2065,329,1,0,0,0,2066,2067,5,49,0,0,2067,
        331,1,0,0,0,2068,2069,3,330,165,0,2069,2070,5,11,0,0,2070,333,1,
        0,0,0,2071,2072,3,244,122,0,2072,2073,3,332,166,0,2073,2074,3,150,
        75,0,2074,335,1,0,0,0,2075,2076,5,50,0,0,2076,337,1,0,0,0,2077,2078,
        3,330,165,0,2078,339,1,0,0,0,2079,2095,3,256,128,0,2080,2082,3,338,
        169,0,2081,2083,3,180,90,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,
        2085,1,0,0,0,2084,2086,3,186,93,0,2085,2084,1,0,0,0,2085,2086,1,
        0,0,0,2086,2090,1,0,0,0,2087,2088,3,336,168,0,2088,2089,3,342,171,
        0,2089,2091,1,0,0,0,2090,2087,1,0,0,0,2090,2091,1,0,0,0,2091,2096,
        1,0,0,0,2092,2093,3,336,168,0,2093,2094,3,342,171,0,2094,2096,1,
        0,0,0,2095,2080,1,0,0,0,2095,2092,1,0,0,0,2096,2097,1,0,0,0,2097,
        2098,3,184,92,0,2098,341,1,0,0,0,2099,2102,3,344,172,0,2100,2102,
        3,346,173,0,2101,2099,1,0,0,0,2101,2100,1,0,0,0,2102,343,1,0,0,0,
        2103,2104,3,318,159,0,2104,2105,5,3,0,0,2105,2106,3,318,159,0,2106,
        345,1,0,0,0,2107,2108,5,133,0,0,2108,2109,3,318,159,0,2109,2110,
        5,136,0,0,2110,2115,3,318,159,0,2111,2112,5,136,0,0,2112,2114,3,
        318,159,0,2113,2111,1,0,0,0,2114,2117,1,0,0,0,2115,2113,1,0,0,0,
        2115,2116,1,0,0,0,2116,2118,1,0,0,0,2117,2115,1,0,0,0,2118,2119,
        5,134,0,0,2119,347,1,0,0,0,2120,2121,3,350,175,0,2121,349,1,0,0,
        0,2122,2123,1,0,0,0,2123,351,1,0,0,0,2124,2125,5,51,0,0,2125,353,
        1,0,0,0,2126,2127,3,352,176,0,2127,2128,5,11,0,0,2128,355,1,0,0,
        0,2129,2130,3,244,122,0,2130,2131,3,354,177,0,2131,2132,3,150,75,
        0,2132,357,1,0,0,0,2133,2134,5,52,0,0,2134,359,1,0,0,0,2135,2136,
        3,256,128,0,2136,2137,3,358,179,0,2137,2138,3,362,181,0,2138,2139,
        3,154,77,0,2139,361,1,0,0,0,2140,2142,3,180,90,0,2141,2140,1,0,0,
        0,2141,2142,1,0,0,0,2142,2144,1,0,0,0,2143,2145,3,186,93,0,2144,
        2143,1,0,0,0,2144,2145,1,0,0,0,2145,2148,1,0,0,0,2146,2147,5,53,
        0,0,2147,2149,3,376,188,0,2148,2146,1,0,0,0,2148,2149,1,0,0,0,2149,
        2155,1,0,0,0,2150,2151,5,2,0,0,2151,2152,3,364,182,0,2152,2153,5,
        3,0,0,2153,2154,3,364,182,0,2154,2156,1,0,0,0,2155,2150,1,0,0,0,
        2155,2156,1,0,0,0,2156,2162,1,0,0,0,2157,2158,3,364,182,0,2158,2159,
        5,3,0,0,2159,2160,3,364,182,0,2160,2162,1,0,0,0,2161,2141,1,0,0,
        0,2161,2157,1,0,0,0,2162,363,1,0,0,0,2163,2164,3,366,183,0,2164,
        365,1,0,0,0,2165,2166,3,134,67,0,2166,367,1,0,0,0,2167,2168,3,256,
        128,0,2168,2169,3,352,176,0,2169,2170,3,374,187,0,2170,2171,3,154,
        77,0,2171,369,1,0,0,0,2172,2173,3,326,163,0,2173,2174,3,352,176,
        0,2174,371,1,0,0,0,2175,2176,3,256,128,0,2176,2177,3,370,185,0,2177,
        2178,3,374,187,0,2178,2179,3,154,77,0,2179,373,1,0,0,0,2180,2182,
        3,180,90,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2184,1,0,0,0,
        2183,2185,3,186,93,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2188,
        1,0,0,0,2186,2187,5,53,0,0,2187,2189,3,376,188,0,2188,2186,1,0,0,
        0,2188,2189,1,0,0,0,2189,2195,1,0,0,0,2190,2191,5,2,0,0,2191,2192,
        3,384,192,0,2192,2193,5,3,0,0,2193,2194,3,384,192,0,2194,2196,1,
        0,0,0,2195,2190,1,0,0,0,2195,2196,1,0,0,0,2196,2202,1,0,0,0,2197,
        2198,3,384,192,0,2198,2199,5,3,0,0,2199,2200,3,384,192,0,2200,2202,
        1,0,0,0,2201,2181,1,0,0,0,2201,2197,1,0,0,0,2202,375,1,0,0,0,2203,
        2204,3,378,189,0,2204,377,1,0,0,0,2205,2206,3,380,190,0,2206,379,
        1,0,0,0,2207,2209,3,4,2,0,2208,2207,1,0,0,0,2208,2209,1,0,0,0,2209,
        2210,1,0,0,0,2210,2212,3,382,191,0,2211,2213,3,186,93,0,2212,2211,
        1,0,0,0,2212,2213,1,0,0,0,2213,2226,1,0,0,0,2214,2216,3,4,2,0,2215,
        2214,1,0,0,0,2215,2216,1,0,0,0,2216,2217,1,0,0,0,2217,2226,3,186,
        93,0,2218,2220,3,974,487,0,2219,2221,3,138,69,0,2220,2219,1,0,0,
        0,2220,2221,1,0,0,0,2221,2226,1,0,0,0,2222,2223,3,138,69,0,2223,
        2224,3,974,487,0,2224,2226,1,0,0,0,2225,2208,1,0,0,0,2225,2215,1,
        0,0,0,2225,2218,1,0,0,0,2225,2222,1,0,0,0,2226,381,1,0,0,0,2227,
        2229,3,106,53,0,2228,2227,1,0,0,0,2229,2230,1,0,0,0,2230,2228,1,
        0,0,0,2230,2231,1,0,0,0,2231,2233,1,0,0,0,2232,2234,3,104,52,0,2233,
        2232,1,0,0,0,2233,2234,1,0,0,0,2234,2238,1,0,0,0,2235,2237,3,106,
        53,0,2236,2235,1,0,0,0,2237,2240,1,0,0,0,2238,2236,1,0,0,0,2238,
        2239,1,0,0,0,2239,2248,1,0,0,0,2240,2238,1,0,0,0,2241,2243,3,104,
        52,0,2242,2244,3,106,53,0,2243,2242,1,0,0,0,2244,2245,1,0,0,0,2245,
        2243,1,0,0,0,2245,2246,1,0,0,0,2246,2248,1,0,0,0,2247,2228,1,0,0,
        0,2247,2241,1,0,0,0,2248,383,1,0,0,0,2249,2250,3,386,193,0,2250,
        385,1,0,0,0,2251,2253,3,388,194,0,2252,2251,1,0,0,0,2252,2253,1,
        0,0,0,2253,2254,1,0,0,0,2254,2255,3,392,196,0,2255,387,1,0,0,0,2256,
        2257,3,1022,511,0,2257,2258,5,150,0,0,2258,2261,1,0,0,0,2259,2261,
        3,390,195,0,2260,2256,1,0,0,0,2260,2259,1,0,0,0,2261,389,1,0,0,0,
        2262,2263,3,980,490,0,2263,2264,5,150,0,0,2264,2266,1,0,0,0,2265,
        2262,1,0,0,0,2266,2267,1,0,0,0,2267,2265,1,0,0,0,2267,2268,1,0,0,
        0,2268,2269,1,0,0,0,2269,2270,3,980,490,0,2270,2271,5,150,0,0,2271,
        391,1,0,0,0,2272,2273,3,394,197,0,2273,393,1,0,0,0,2274,2275,3,396,
        198,0,2275,395,1,0,0,0,2276,2277,3,1022,511,0,2277,397,1,0,0,0,2278,
        2279,5,54,0,0,2279,399,1,0,0,0,2280,2281,3,398,199,0,2281,2282,5,
        11,0,0,2282,401,1,0,0,0,2283,2284,3,244,122,0,2284,2285,3,400,200,
        0,2285,2286,3,152,76,0,2286,2287,3,404,202,0,2287,403,1,0,0,0,2288,
        2298,5,135,0,0,2289,2293,5,129,0,0,2290,2292,3,406,203,0,2291,2290,
        1,0,0,0,2292,2295,1,0,0,0,2293,2291,1,0,0,0,2293,2294,1,0,0,0,2294,
        2296,1,0,0,0,2295,2293,1,0,0,0,2296,2298,5,130,0,0,2297,2288,1,0,
        0,0,2297,2289,1,0,0,0,2298,405,1,0,0,0,2299,2309,3,158,79,0,2300,
        2309,3,160,80,0,2301,2309,3,408,204,0,2302,2304,3,266,133,0,2303,
        2302,1,0,0,0,2303,2304,1,0,0,0,2304,2305,1,0,0,0,2305,2309,3,412,
        206,0,2306,2309,3,66,33,0,2307,2309,3,70,35,0,2308,2299,1,0,0,0,
        2308,2300,1,0,0,0,2308,2301,1,0,0,0,2308,2303,1,0,0,0,2308,2306,
        1,0,0,0,2308,2307,1,0,0,0,2309,407,1,0,0,0,2310,2311,3,60,30,0,2311,
        2312,3,410,205,0,2312,409,1,0,0,0,2313,2319,3,196,98,0,2314,2319,
        3,222,111,0,2315,2319,3,238,119,0,2316,2319,3,324,162,0,2317,2319,
        3,328,164,0,2318,2313,1,0,0,0,2318,2314,1,0,0,0,2318,2315,1,0,0,
        0,2318,2316,1,0,0,0,2318,2317,1,0,0,0,2319,411,1,0,0,0,2320,2321,
        3,60,30,0,2321,2322,3,414,207,0,2322,413,1,0,0,0,2323,2327,3,416,
        208,0,2324,2327,3,204,102,0,2325,2327,3,206,103,0,2326,2323,1,0,
        0,0,2326,2324,1,0,0,0,2326,2325,1,0,0,0,2327,415,1,0,0,0,2328,2330,
        3,1028,514,0,2329,2328,1,0,0,0,2329,2330,1,0,0,0,2330,2332,1,0,0,
        0,2331,2333,7,1,0,0,2332,2331,1,0,0,0,2332,2333,1,0,0,0,2333,2334,
        1,0,0,0,2334,2335,5,34,0,0,2335,2336,3,178,89,0,2336,417,1,0,0,0,
        2337,2338,3,398,199,0,2338,419,1,0,0,0,2339,2340,3,256,128,0,2340,
        2341,3,418,209,0,2341,2342,3,422,211,0,2342,2343,3,404,202,0,2343,
        421,1,0,0,0,2344,2346,3,180,90,0,2345,2344,1,0,0,0,2345,2346,1,0,
        0,0,2346,2350,1,0,0,0,2347,2348,3,336,168,0,2348,2349,3,424,212,
        0,2349,2351,1,0,0,0,2350,2347,1,0,0,0,2350,2351,1,0,0,0,2351,2354,
        1,0,0,0,2352,2354,3,424,212,0,2353,2345,1,0,0,0,2353,2352,1,0,0,
        0,2354,423,1,0,0,0,2355,2358,3,426,213,0,2356,2358,3,428,214,0,2357,
        2355,1,0,0,0,2357,2356,1,0,0,0,2358,425,1,0,0,0,2359,2360,3,430,
        215,0,2360,2361,5,3,0,0,2361,2362,3,430,215,0,2362,427,1,0,0,0,2363,
        2364,5,133,0,0,2364,2365,3,430,215,0,2365,2366,5,136,0,0,2366,2371,
        3,430,215,0,2367,2368,5,136,0,0,2368,2370,3,430,215,0,2369,2367,
        1,0,0,0,2370,2373,1,0,0,0,2371,2369,1,0,0,0,2371,2372,1,0,0,0,2372,
        2374,1,0,0,0,2373,2371,1,0,0,0,2374,2375,5,134,0,0,2375,429,1,0,
        0,0,2376,2377,3,432,216,0,2377,431,1,0,0,0,2378,2379,3,1018,509,
        0,2379,2380,3,122,61,0,2380,2382,1,0,0,0,2381,2378,1,0,0,0,2381,
        2382,1,0,0,0,2382,2383,1,0,0,0,2383,2385,3,134,67,0,2384,2386,3,
        138,69,0,2385,2384,1,0,0,0,2385,2386,1,0,0,0,2386,433,1,0,0,0,2387,
        2388,5,55,0,0,2388,435,1,0,0,0,2389,2390,3,434,217,0,2390,2391,5,
        11,0,0,2391,437,1,0,0,0,2392,2393,3,244,122,0,2393,2394,3,436,218,
        0,2394,2395,3,150,75,0,2395,439,1,0,0,0,2396,2397,3,434,217,0,2397,
        441,1,0,0,0,2398,2399,5,56,0,0,2399,443,1,0,0,0,2400,2401,3,256,
        128,0,2401,2402,3,446,223,0,2402,2403,3,184,92,0,2403,445,1,0,0,
        0,2404,2406,3,440,220,0,2405,2407,3,180,90,0,2406,2405,1,0,0,0,2406,
        2407,1,0,0,0,2407,2411,1,0,0,0,2408,2409,3,442,221,0,2409,2410,3,
        342,171,0,2410,2412,1,0,0,0,2411,2408,1,0,0,0,2411,2412,1,0,0,0,
        2412,2417,1,0,0,0,2413,2414,3,442,221,0,2414,2415,3,342,171,0,2415,
        2417,1,0,0,0,2416,2404,1,0,0,0,2416,2413,1,0,0,0,2417,447,1,0,0,
        0,2418,2419,5,57,0,0,2419,449,1,0,0,0,2420,2421,3,448,224,0,2421,
        2422,5,11,0,0,2422,451,1,0,0,0,2423,2424,3,244,122,0,2424,2425,3,
        450,225,0,2425,2426,3,152,76,0,2426,2427,3,454,227,0,2427,453,1,
        0,0,0,2428,2438,5,135,0,0,2429,2433,5,129,0,0,2430,2432,3,456,228,
        0,2431,2430,1,0,0,0,2432,2435,1,0,0,0,2433,2431,1,0,0,0,2433,2434,
        1,0,0,0,2434,2436,1,0,0,0,2435,2433,1,0,0,0,2436,2438,5,130,0,0,
        2437,2428,1,0,0,0,2437,2429,1,0,0,0,2438,455,1,0,0,0,2439,2470,3,
        70,35,0,2440,2470,3,66,33,0,2441,2470,3,158,79,0,2442,2470,3,160,
        80,0,2443,2470,3,162,81,0,2444,2446,3,266,133,0,2445,2444,1,0,0,
        0,2445,2446,1,0,0,0,2446,2447,1,0,0,0,2447,2470,3,166,83,0,2448,
        2452,3,458,229,0,2449,2451,3,462,231,0,2450,2449,1,0,0,0,2451,2454,
        1,0,0,0,2452,2450,1,0,0,0,2452,2453,1,0,0,0,2453,2470,1,0,0,0,2454,
        2452,1,0,0,0,2455,2457,3,266,133,0,2456,2455,1,0,0,0,2456,2457,1,
        0,0,0,2457,2460,1,0,0,0,2458,2461,3,168,84,0,2459,2461,3,460,230,
        0,2460,2458,1,0,0,0,2460,2459,1,0,0,0,2461,2465,1,0,0,0,2462,2464,
        3,462,231,0,2463,2462,1,0,0,0,2464,2467,1,0,0,0,2465,2463,1,0,0,
        0,2465,2466,1,0,0,0,2466,2470,1,0,0,0,2467,2465,1,0,0,0,2468,2470,
        3,464,232,0,2469,2439,1,0,0,0,2469,2440,1,0,0,0,2469,2441,1,0,0,
        0,2469,2442,1,0,0,0,2469,2443,1,0,0,0,2469,2445,1,0,0,0,2469,2448,
        1,0,0,0,2469,2456,1,0,0,0,2469,2468,1,0,0,0,2470,457,1,0,0,0,2471,
        2472,3,60,30,0,2472,2473,5,48,0,0,2473,2474,3,1022,511,0,2474,2475,
        3,6,3,0,2475,459,1,0,0,0,2476,2477,3,60,30,0,2477,2478,3,476,238,
        0,2478,461,1,0,0,0,2479,2480,3,60,30,0,2480,2481,3,572,286,0,2481,
        463,1,0,0,0,2482,2483,3,580,290,0,2483,465,1,0,0,0,2484,2485,3,448,
        224,0,2485,467,1,0,0,0,2486,2487,3,256,128,0,2487,2488,3,466,233,
        0,2488,2489,3,474,237,0,2489,2490,3,454,227,0,2490,469,1,0,0,0,2491,
        2492,3,256,128,0,2492,2493,5,58,0,0,2493,2494,3,472,236,0,2494,2495,
        3,454,227,0,2495,471,1,0,0,0,2496,2498,3,134,67,0,2497,2499,3,102,
        51,0,2498,2497,1,0,0,0,2498,2499,1,0,0,0,2499,2505,1,0,0,0,2500,
        2502,3,466,233,0,2501,2503,3,180,90,0,2502,2501,1,0,0,0,2502,2503,
        1,0,0,0,2503,2505,1,0,0,0,2504,2496,1,0,0,0,2504,2500,1,0,0,0,2505,
        2507,1,0,0,0,2506,2508,3,186,93,0,2507,2506,1,0,0,0,2507,2508,1,
        0,0,0,2508,473,1,0,0,0,2509,2511,3,180,90,0,2510,2509,1,0,0,0,2510,
        2511,1,0,0,0,2511,2513,1,0,0,0,2512,2514,3,186,93,0,2513,2512,1,
        0,0,0,2513,2514,1,0,0,0,2514,475,1,0,0,0,2515,2523,3,508,254,0,2516,
        2523,3,482,241,0,2517,2523,3,518,259,0,2518,2523,3,538,269,0,2519,
        2523,3,546,273,0,2520,2523,3,548,274,0,2521,2523,3,554,277,0,2522,
        2515,1,0,0,0,2522,2516,1,0,0,0,2522,2517,1,0,0,0,2522,2518,1,0,0,
        0,2522,2519,1,0,0,0,2522,2520,1,0,0,0,2522,2521,1,0,0,0,2523,477,
        1,0,0,0,2524,2526,3,466,233,0,2525,2527,3,180,90,0,2526,2525,1,0,
        0,0,2526,2527,1,0,0,0,2527,479,1,0,0,0,2528,2530,3,256,128,0,2529,
        2531,3,478,239,0,2530,2529,1,0,0,0,2530,2531,1,0,0,0,2531,481,1,
        0,0,0,2532,2533,3,256,128,0,2533,2534,3,484,242,0,2534,2535,3,454,
        227,0,2535,483,1,0,0,0,2536,2538,3,478,239,0,2537,2536,1,0,0,0,2537,
        2538,1,0,0,0,2538,2539,1,0,0,0,2539,2540,5,59,0,0,2540,2541,3,486,
        243,0,2541,485,1,0,0,0,2542,2546,3,488,244,0,2543,2544,5,60,0,0,
        2544,2547,3,512,256,0,2545,2547,3,568,284,0,2546,2543,1,0,0,0,2546,
        2545,1,0,0,0,2547,487,1,0,0,0,2548,2549,3,490,245,0,2549,489,1,0,
        0,0,2550,2559,3,380,190,0,2551,2553,3,4,2,0,2552,2551,1,0,0,0,2552,
        2553,1,0,0,0,2553,2555,1,0,0,0,2554,2556,3,382,191,0,2555,2554,1,
        0,0,0,2555,2556,1,0,0,0,2556,2557,1,0,0,0,2557,2559,3,492,246,0,
        2558,2550,1,0,0,0,2558,2552,1,0,0,0,2559,491,1,0,0,0,2560,2561,3,
        494,247,0,2561,493,1,0,0,0,2562,2563,3,496,248,0,2563,495,1,0,0,
        0,2564,2565,3,498,249,0,2565,2566,3,986,493,0,2566,2571,1,0,0,0,
        2567,2568,3,500,250,0,2568,2569,3,502,251,0,2569,2571,1,0,0,0,2570,
        2564,1,0,0,0,2570,2567,1,0,0,0,2571,497,1,0,0,0,2572,2575,5,61,0,
        0,2573,2575,5,62,0,0,2574,2572,1,0,0,0,2574,2573,1,0,0,0,2575,499,
        1,0,0,0,2576,2577,5,63,0,0,2577,501,1,0,0,0,2578,2579,3,504,252,
        0,2579,503,1,0,0,0,2580,2581,3,506,253,0,2581,505,1,0,0,0,2582,2583,
        3,846,423,0,2583,507,1,0,0,0,2584,2585,3,256,128,0,2585,2586,3,510,
        255,0,2586,2587,3,454,227,0,2587,509,1,0,0,0,2588,2590,3,478,239,
        0,2589,2588,1,0,0,0,2589,2590,1,0,0,0,2590,2591,1,0,0,0,2591,2592,
        5,64,0,0,2592,2596,3,512,256,0,2593,2594,5,60,0,0,2594,2597,3,512,
        256,0,2595,2597,3,568,284,0,2596,2593,1,0,0,0,2596,2595,1,0,0,0,
        2597,2601,1,0,0,0,2598,2599,5,3,0,0,2599,2602,3,512,256,0,2600,2602,
        3,568,284,0,2601,2598,1,0,0,0,2601,2600,1,0,0,0,2602,511,1,0,0,0,
        2603,2604,3,514,257,0,2604,513,1,0,0,0,2605,2606,3,516,258,0,2606,
        515,1,0,0,0,2607,2608,3,844,422,0,2608,517,1,0,0,0,2609,2610,3,256,
        128,0,2610,2611,3,520,260,0,2611,2612,3,454,227,0,2612,519,1,0,0,
        0,2613,2615,3,478,239,0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,2615,
        2616,1,0,0,0,2616,2617,5,65,0,0,2617,2618,3,522,261,0,2618,2619,
        3,954,477,0,2619,2620,5,148,0,0,2620,2621,3,512,256,0,2621,521,1,
        0,0,0,2622,2623,3,524,262,0,2623,523,1,0,0,0,2624,2625,3,532,266,
        0,2625,2626,5,150,0,0,2626,2628,1,0,0,0,2627,2624,1,0,0,0,2627,2628,
        1,0,0,0,2628,2629,1,0,0,0,2629,2630,3,526,263,0,2630,525,1,0,0,0,
        2631,2632,3,528,264,0,2632,527,1,0,0,0,2633,2634,3,530,265,0,2634,
        529,1,0,0,0,2635,2636,3,570,285,0,2636,531,1,0,0,0,2637,2638,3,534,
        267,0,2638,533,1,0,0,0,2639,2663,3,956,478,0,2640,2641,5,150,0,0,
        2641,2643,3,954,477,0,2642,2640,1,0,0,0,2642,2643,1,0,0,0,2643,2659,
        1,0,0,0,2644,2645,5,132,0,0,2645,2646,3,964,482,0,2646,2647,5,131,
        0,0,2647,2660,1,0,0,0,2648,2649,5,151,0,0,2649,2653,3,914,457,0,
        2650,2654,3,960,480,0,2651,2654,3,950,475,0,2652,2654,3,982,491,
        0,2653,2650,1,0,0,0,2653,2651,1,0,0,0,2653,2652,1,0,0,0,2654,2660,
        1,0,0,0,2655,2656,5,150,0,0,2656,2660,3,960,480,0,2657,2658,5,152,
        0,0,2658,2660,3,960,480,0,2659,2644,1,0,0,0,2659,2648,1,0,0,0,2659,
        2655,1,0,0,0,2659,2657,1,0,0,0,2660,2662,1,0,0,0,2661,2642,1,0,0,
        0,2662,2665,1,0,0,0,2663,2661,1,0,0,0,2663,2664,1,0,0,0,2664,535,
        1,0,0,0,2665,2663,1,0,0,0,2666,2667,3,844,422,0,2667,537,1,0,0,0,
        2668,2669,3,480,240,0,2669,2670,5,66,0,0,2670,2671,3,536,268,0,2671,
        2677,3,540,270,0,2672,2675,5,67,0,0,2673,2676,3,540,270,0,2674,2676,
        3,544,272,0,2675,2673,1,0,0,0,2675,2674,1,0,0,0,2676,2678,1,0,0,
        0,2677,2672,1,0,0,0,2677,2678,1,0,0,0,2678,539,1,0,0,0,2679,2680,
        3,542,271,0,2680,541,1,0,0,0,2681,2683,3,466,233,0,2682,2684,3,180,
        90,0,2683,2682,1,0,0,0,2683,2684,1,0,0,0,2684,2686,1,0,0,0,2685,
        2681,1,0,0,0,2685,2686,1,0,0,0,2686,2687,1,0,0,0,2687,2691,5,129,
        0,0,2688,2690,3,456,228,0,2689,2688,1,0,0,0,2690,2693,1,0,0,0,2691,
        2689,1,0,0,0,2691,2692,1,0,0,0,2692,2694,1,0,0,0,2693,2691,1,0,0,
        0,2694,2695,5,130,0,0,2695,543,1,0,0,0,2696,2697,3,538,269,0,2697,
        545,1,0,0,0,2698,2703,3,480,240,0,2699,2700,5,68,0,0,2700,2704,3,
        536,268,0,2701,2702,5,69,0,0,2702,2704,3,568,284,0,2703,2699,1,0,
        0,0,2703,2701,1,0,0,0,2704,2705,1,0,0,0,2705,2710,3,540,270,0,2706,
        2707,5,70,0,0,2707,2708,3,536,268,0,2708,2709,5,135,0,0,2709,2711,
        1,0,0,0,2710,2706,1,0,0,0,2710,2711,1,0,0,0,2711,547,1,0,0,0,2712,
        2713,3,480,240,0,2713,2714,5,20,0,0,2714,2715,3,550,275,0,2715,2716,
        5,71,0,0,2716,2717,3,512,256,0,2717,2718,3,540,270,0,2718,549,1,
        0,0,0,2719,2720,3,552,276,0,2720,551,1,0,0,0,2721,2722,3,180,90,
        0,2722,553,1,0,0,0,2723,2728,3,558,279,0,2724,2728,3,560,280,0,2725,
        2728,3,562,281,0,2726,2728,3,564,282,0,2727,2723,1,0,0,0,2727,2724,
        1,0,0,0,2727,2725,1,0,0,0,2727,2726,1,0,0,0,2728,555,1,0,0,0,2729,
        2731,3,170,85,0,2730,2732,5,39,0,0,2731,2730,1,0,0,0,2731,2732,1,
        0,0,0,2732,2734,1,0,0,0,2733,2735,3,1030,515,0,2734,2733,1,0,0,0,
        2734,2735,1,0,0,0,2735,2739,1,0,0,0,2736,2738,3,174,87,0,2737,2736,
        1,0,0,0,2738,2741,1,0,0,0,2739,2737,1,0,0,0,2739,2740,1,0,0,0,2740,
        557,1,0,0,0,2741,2739,1,0,0,0,2742,2743,3,556,278,0,2743,2745,5,
        72,0,0,2744,2746,3,180,90,0,2745,2744,1,0,0,0,2745,2746,1,0,0,0,
        2746,2747,1,0,0,0,2747,2748,3,566,283,0,2748,559,1,0,0,0,2749,2750,
        3,556,278,0,2750,2752,5,73,0,0,2751,2753,3,180,90,0,2752,2751,1,
        0,0,0,2752,2753,1,0,0,0,2753,2754,1,0,0,0,2754,2755,3,566,283,0,
        2755,561,1,0,0,0,2756,2757,3,556,278,0,2757,2759,5,74,0,0,2758,2760,
        3,180,90,0,2759,2758,1,0,0,0,2759,2760,1,0,0,0,2760,2761,1,0,0,0,
        2761,2762,3,566,283,0,2762,563,1,0,0,0,2763,2764,3,556,278,0,2764,
        2766,5,75,0,0,2765,2767,3,180,90,0,2766,2765,1,0,0,0,2766,2767,1,
        0,0,0,2767,2768,1,0,0,0,2768,2769,3,566,283,0,2769,565,1,0,0,0,2770,
        2780,5,135,0,0,2771,2775,5,129,0,0,2772,2774,3,14,7,0,2773,2772,
        1,0,0,0,2774,2777,1,0,0,0,2775,2773,1,0,0,0,2775,2776,1,0,0,0,2776,
        2778,1,0,0,0,2777,2775,1,0,0,0,2778,2780,5,130,0,0,2779,2770,1,0,
        0,0,2779,2771,1,0,0,0,2780,567,1,0,0,0,2781,2782,3,570,285,0,2782,
        569,1,0,0,0,2783,2784,1,0,0,0,2784,571,1,0,0,0,2785,2789,3,574,287,
        0,2786,2789,3,576,288,0,2787,2789,3,578,289,0,2788,2785,1,0,0,0,
        2788,2786,1,0,0,0,2788,2787,1,0,0,0,2789,2790,1,0,0,0,2790,2791,
        3,184,92,0,2791,573,1,0,0,0,2792,2793,5,41,0,0,2793,2794,3,270,135,
        0,2794,2795,3,318,159,0,2795,575,1,0,0,0,2796,2797,3,568,284,0,2797,
        2798,3,638,319,0,2798,2799,5,41,0,0,2799,2800,3,644,322,0,2800,577,
        1,0,0,0,2801,2802,3,568,284,0,2802,2803,5,67,0,0,2803,2804,3,644,
        322,0,2804,579,1,0,0,0,2805,2806,3,326,163,0,2806,2807,3,180,90,
        0,2807,2809,1,0,0,0,2808,2805,1,0,0,0,2808,2809,1,0,0,0,2809,2810,
        1,0,0,0,2810,2811,5,48,0,0,2811,2812,3,632,316,0,2812,2813,3,568,
        284,0,2813,2814,3,638,319,0,2814,2815,5,41,0,0,2815,2816,3,644,322,
        0,2816,2817,3,184,92,0,2817,581,1,0,0,0,2818,2819,5,76,0,0,2819,
        583,1,0,0,0,2820,2821,3,582,291,0,2821,2822,5,11,0,0,2822,585,1,
        0,0,0,2823,2824,3,244,122,0,2824,2825,3,584,292,0,2825,2826,3,152,
        76,0,2826,2827,3,588,294,0,2827,587,1,0,0,0,2828,2837,5,135,0,0,
        2829,2831,5,77,0,0,2830,2829,1,0,0,0,2830,2831,1,0,0,0,2831,2832,
        1,0,0,0,2832,2833,5,129,0,0,2833,2834,3,590,295,0,2834,2835,5,130,
        0,0,2835,2837,1,0,0,0,2836,2828,1,0,0,0,2836,2830,1,0,0,0,2837,589,
        1,0,0,0,2838,2840,3,592,296,0,2839,2838,1,0,0,0,2840,2843,1,0,0,
        0,2841,2839,1,0,0,0,2841,2842,1,0,0,0,2842,591,1,0,0,0,2843,2841,
        1,0,0,0,2844,2874,3,70,35,0,2845,2874,3,66,33,0,2846,2874,3,158,
        79,0,2847,2874,3,160,80,0,2848,2874,3,162,81,0,2849,2851,3,266,133,
        0,2850,2849,1,0,0,0,2850,2851,1,0,0,0,2851,2852,1,0,0,0,2852,2874,
        3,166,83,0,2853,2855,3,266,133,0,2854,2853,1,0,0,0,2854,2855,1,0,
        0,0,2855,2856,1,0,0,0,2856,2860,3,168,84,0,2857,2859,3,616,308,0,
        2858,2857,1,0,0,0,2859,2862,1,0,0,0,2860,2858,1,0,0,0,2860,2861,
        1,0,0,0,2861,2874,1,0,0,0,2862,2860,1,0,0,0,2863,2874,3,614,307,
        0,2864,2868,3,594,297,0,2865,2867,3,606,303,0,2866,2865,1,0,0,0,
        2867,2870,1,0,0,0,2868,2866,1,0,0,0,2868,2869,1,0,0,0,2869,2874,
        1,0,0,0,2870,2868,1,0,0,0,2871,2874,3,598,299,0,2872,2874,3,602,
        301,0,2873,2844,1,0,0,0,2873,2845,1,0,0,0,2873,2846,1,0,0,0,2873,
        2847,1,0,0,0,2873,2848,1,0,0,0,2873,2850,1,0,0,0,2873,2854,1,0,0,
        0,2873,2863,1,0,0,0,2873,2864,1,0,0,0,2873,2871,1,0,0,0,2873,2872,
        1,0,0,0,2874,593,1,0,0,0,2875,2876,3,60,30,0,2876,2877,3,596,298,
        0,2877,2878,3,608,304,0,2878,595,1,0,0,0,2879,2880,5,78,0,0,2880,
        597,1,0,0,0,2881,2882,3,60,30,0,2882,2883,3,600,300,0,2883,2884,
        3,608,304,0,2884,599,1,0,0,0,2885,2886,5,79,0,0,2886,601,1,0,0,0,
        2887,2888,3,60,30,0,2888,2889,3,604,302,0,2889,2890,3,608,304,0,
        2890,603,1,0,0,0,2891,2892,5,80,0,0,2892,605,1,0,0,0,2893,2897,3,
        60,30,0,2894,2898,3,576,288,0,2895,2896,5,41,0,0,2896,2898,3,646,
        323,0,2897,2894,1,0,0,0,2897,2895,1,0,0,0,2898,2899,1,0,0,0,2899,
        2900,5,135,0,0,2900,607,1,0,0,0,2901,2902,3,610,305,0,2902,2903,
        5,135,0,0,2903,2908,1,0,0,0,2904,2905,3,612,306,0,2905,2906,3,454,
        227,0,2906,2908,1,0,0,0,2907,2901,1,0,0,0,2907,2904,1,0,0,0,2908,
        609,1,0,0,0,2909,2910,1,0,0,0,2910,611,1,0,0,0,2911,2916,3,472,236,
        0,2912,2916,3,484,242,0,2913,2916,3,510,255,0,2914,2916,3,520,260,
        0,2915,2911,1,0,0,0,2915,2912,1,0,0,0,2915,2913,1,0,0,0,2915,2914,
        1,0,0,0,2916,613,1,0,0,0,2917,2918,3,60,30,0,2918,2919,3,628,314,
        0,2919,615,1,0,0,0,2920,2921,3,60,30,0,2921,2922,3,630,315,0,2922,
        617,1,0,0,0,2923,2924,3,582,291,0,2924,619,1,0,0,0,2925,2926,3,256,
        128,0,2926,2927,3,618,309,0,2927,2928,3,474,237,0,2928,2929,3,622,
        311,0,2929,621,1,0,0,0,2930,2939,5,135,0,0,2931,2933,5,77,0,0,2932,
        2931,1,0,0,0,2932,2933,1,0,0,0,2933,2934,1,0,0,0,2934,2935,5,129,
        0,0,2935,2936,3,590,295,0,2936,2937,5,130,0,0,2937,2939,1,0,0,0,
        2938,2930,1,0,0,0,2938,2932,1,0,0,0,2939,623,1,0,0,0,2940,2941,3,
        256,128,0,2941,2950,5,81,0,0,2942,2944,3,134,67,0,2943,2945,3,102,
        51,0,2944,2943,1,0,0,0,2944,2945,1,0,0,0,2945,2951,1,0,0,0,2946,
        2948,3,618,309,0,2947,2949,3,180,90,0,2948,2947,1,0,0,0,2948,2949,
        1,0,0,0,2949,2951,1,0,0,0,2950,2942,1,0,0,0,2950,2946,1,0,0,0,2951,
        2953,1,0,0,0,2952,2954,3,186,93,0,2953,2952,1,0,0,0,2953,2954,1,
        0,0,0,2954,2955,1,0,0,0,2955,2956,3,622,311,0,2956,625,1,0,0,0,2957,
        2958,5,82,0,0,2958,627,1,0,0,0,2959,2964,3,626,313,0,2960,2962,3,
        180,90,0,2961,2960,1,0,0,0,2961,2962,1,0,0,0,2962,2963,1,0,0,0,2963,
        2965,5,48,0,0,2964,2961,1,0,0,0,2964,2965,1,0,0,0,2965,2966,1,0,
        0,0,2966,2967,3,632,316,0,2967,2971,3,568,284,0,2968,2969,3,568,
        284,0,2969,2970,3,634,317,0,2970,2972,1,0,0,0,2971,2968,1,0,0,0,
        2971,2972,1,0,0,0,2972,2974,1,0,0,0,2973,2975,3,638,319,0,2974,2973,
        1,0,0,0,2974,2975,1,0,0,0,2975,2977,1,0,0,0,2976,2978,3,640,320,
        0,2977,2976,1,0,0,0,2977,2978,1,0,0,0,2978,2979,1,0,0,0,2979,2980,
        5,41,0,0,2980,2981,3,644,322,0,2981,2982,3,454,227,0,2982,629,1,
        0,0,0,2983,3008,3,568,284,0,2984,2988,3,626,313,0,2985,2986,3,568,
        284,0,2986,2987,3,634,317,0,2987,2989,1,0,0,0,2988,2985,1,0,0,0,
        2988,2989,1,0,0,0,2989,2991,1,0,0,0,2990,2992,3,638,319,0,2991,2990,
        1,0,0,0,2991,2992,1,0,0,0,2992,2994,1,0,0,0,2993,2995,3,640,320,
        0,2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,3009,1,0,0,0,2996,2997,
        3,568,284,0,2997,2999,3,634,317,0,2998,3000,3,638,319,0,2999,2998,
        1,0,0,0,2999,3000,1,0,0,0,3000,3002,1,0,0,0,3001,3003,3,640,320,
        0,3002,3001,1,0,0,0,3002,3003,1,0,0,0,3003,3009,1,0,0,0,3004,3006,
        3,638,319,0,3005,3007,3,640,320,0,3006,3005,1,0,0,0,3006,3007,1,
        0,0,0,3007,3009,1,0,0,0,3008,2984,1,0,0,0,3008,2996,1,0,0,0,3008,
        3004,1,0,0,0,3008,3009,1,0,0,0,3009,3010,1,0,0,0,3010,3011,5,41,
        0,0,3011,3012,3,644,322,0,3012,3013,3,454,227,0,3013,631,1,0,0,0,
        3014,3017,3,1022,511,0,3015,3017,3,976,488,0,3016,3014,1,0,0,0,3016,
        3015,1,0,0,0,3017,633,1,0,0,0,3018,3019,3,1032,516,0,3019,3020,3,
        636,318,0,3020,635,1,0,0,0,3021,3022,3,486,243,0,3022,637,1,0,0,
        0,3023,3024,3,1034,517,0,3024,3025,3,844,422,0,3025,639,1,0,0,0,
        3026,3027,3,1036,518,0,3027,3028,3,642,321,0,3028,641,1,0,0,0,3029,
        3042,3,610,305,0,3030,3039,3,612,306,0,3031,3035,5,129,0,0,3032,
        3034,3,456,228,0,3033,3032,1,0,0,0,3034,3037,1,0,0,0,3035,3033,1,
        0,0,0,3035,3036,1,0,0,0,3036,3038,1,0,0,0,3037,3035,1,0,0,0,3038,
        3040,5,130,0,0,3039,3031,1,0,0,0,3039,3040,1,0,0,0,3040,3042,1,0,
        0,0,3041,3029,1,0,0,0,3041,3030,1,0,0,0,3042,643,1,0,0,0,3043,3044,
        3,646,323,0,3044,645,1,0,0,0,3045,3046,3,348,174,0,3046,3047,3,318,
        159,0,3047,647,1,0,0,0,3048,3049,5,83,0,0,3049,649,1,0,0,0,3050,
        3051,3,648,324,0,3051,3052,5,11,0,0,3052,651,1,0,0,0,3053,3054,3,
        244,122,0,3054,3055,3,650,325,0,3055,3056,3,152,76,0,3056,3057,3,
        654,327,0,3057,653,1,0,0,0,3058,3064,5,135,0,0,3059,3060,5,129,0,
        0,3060,3061,3,656,328,0,3061,3062,5,130,0,0,3062,3064,1,0,0,0,3063,
        3058,1,0,0,0,3063,3059,1,0,0,0,3064,655,1,0,0,0,3065,3067,3,658,
        329,0,3066,3065,1,0,0,0,3067,3070,1,0,0,0,3068,3066,1,0,0,0,3068,
        3069,1,0,0,0,3069,3072,1,0,0,0,3070,3068,1,0,0,0,3071,3073,3,662,
        331,0,3072,3071,1,0,0,0,3072,3073,1,0,0,0,3073,657,1,0,0,0,3074,
        3077,3,456,228,0,3075,3077,3,660,330,0,3076,3074,1,0,0,0,3076,3075,
        1,0,0,0,3077,659,1,0,0,0,3078,3079,3,60,30,0,3079,3080,5,84,0,0,
        3080,3081,3,92,46,0,3081,661,1,0,0,0,3082,3083,3,60,30,0,3083,3084,
        3,844,422,0,3084,663,1,0,0,0,3085,3086,3,648,324,0,3086,665,1,0,
        0,0,3087,3088,3,256,128,0,3088,3089,3,664,332,0,3089,3090,3,474,
        237,0,3090,3091,3,654,327,0,3091,667,1,0,0,0,3092,3093,5,85,0,0,
        3093,669,1,0,0,0,3094,3095,3,668,334,0,3095,3096,5,11,0,0,3096,671,
        1,0,0,0,3097,3098,3,244,122,0,3098,3099,3,670,335,0,3099,3100,3,
        152,76,0,3100,3101,3,654,327,0,3101,673,1,0,0,0,3102,3103,3,668,
        334,0,3103,675,1,0,0,0,3104,3105,3,256,128,0,3105,3106,3,674,337,
        0,3106,3107,3,680,340,0,3107,3108,3,654,327,0,3108,677,1,0,0,0,3109,
        3110,3,256,128,0,3110,3112,5,86,0,0,3111,3113,5,87,0,0,3112,3111,
        1,0,0,0,3112,3113,1,0,0,0,3113,3121,1,0,0,0,3114,3116,3,134,67,0,
        3115,3117,3,102,51,0,3116,3115,1,0,0,0,3116,3117,1,0,0,0,3117,3122,
        1,0,0,0,3118,3119,3,674,337,0,3119,3120,3,680,340,0,3120,3122,1,
        0,0,0,3121,3114,1,0,0,0,3121,3118,1,0,0,0,3122,3123,1,0,0,0,3123,
        3124,3,654,327,0,3124,679,1,0,0,0,3125,3127,3,180,90,0,3126,3125,
        1,0,0,0,3126,3127,1,0,0,0,3127,3129,1,0,0,0,3128,3130,3,186,93,0,
        3129,3128,1,0,0,0,3129,3130,1,0,0,0,3130,681,1,0,0,0,3131,3132,5,
        88,0,0,3132,683,1,0,0,0,3133,3134,3,682,341,0,3134,3135,5,11,0,0,
        3135,685,1,0,0,0,3136,3137,3,244,122,0,3137,3138,3,684,342,0,3138,
        3139,3,152,76,0,3139,3140,3,688,344,0,3140,687,1,0,0,0,3141,3151,
        5,135,0,0,3142,3146,5,129,0,0,3143,3145,3,690,345,0,3144,3143,1,
        0,0,0,3145,3148,1,0,0,0,3146,3144,1,0,0,0,3146,3147,1,0,0,0,3147,
        3149,1,0,0,0,3148,3146,1,0,0,0,3149,3151,5,130,0,0,3150,3141,1,0,
        0,0,3150,3142,1,0,0,0,3151,689,1,0,0,0,3152,3160,3,156,78,0,3153,
        3160,3,692,346,0,3154,3160,3,696,348,0,3155,3160,3,700,350,0,3156,
        3160,3,774,387,0,3157,3160,3,704,352,0,3158,3160,3,708,354,0,3159,
        3152,1,0,0,0,3159,3153,1,0,0,0,3159,3154,1,0,0,0,3159,3155,1,0,0,
        0,3159,3156,1,0,0,0,3159,3157,1,0,0,0,3159,3158,1,0,0,0,3160,691,
        1,0,0,0,3161,3162,3,60,30,0,3162,3163,3,694,347,0,3163,693,1,0,0,
        0,3164,3168,5,89,0,0,3165,3167,3,174,87,0,3166,3165,1,0,0,0,3167,
        3170,1,0,0,0,3168,3166,1,0,0,0,3168,3169,1,0,0,0,3169,3171,1,0,0,
        0,3170,3168,1,0,0,0,3171,3172,3,178,89,0,3172,695,1,0,0,0,3173,3174,
        3,60,30,0,3174,3175,3,1038,519,0,3175,3176,3,698,349,0,3176,697,
        1,0,0,0,3177,3181,3,134,67,0,3178,3180,3,106,53,0,3179,3178,1,0,
        0,0,3180,3183,1,0,0,0,3181,3179,1,0,0,0,3181,3182,1,0,0,0,3182,3184,
        1,0,0,0,3183,3181,1,0,0,0,3184,3185,3,654,327,0,3185,3204,1,0,0,
        0,3186,3188,3,174,87,0,3187,3186,1,0,0,0,3188,3191,1,0,0,0,3189,
        3187,1,0,0,0,3189,3190,1,0,0,0,3190,3192,1,0,0,0,3191,3189,1,0,0,
        0,3192,3199,3,674,337,0,3193,3195,3,174,87,0,3194,3193,1,0,0,0,3195,
        3196,1,0,0,0,3196,3194,1,0,0,0,3196,3197,1,0,0,0,3197,3199,1,0,0,
        0,3198,3189,1,0,0,0,3198,3194,1,0,0,0,3199,3200,1,0,0,0,3200,3201,
        3,680,340,0,3201,3202,3,654,327,0,3202,3204,1,0,0,0,3203,3177,1,
        0,0,0,3203,3198,1,0,0,0,3204,699,1,0,0,0,3205,3206,3,60,30,0,3206,
        3207,3,1040,520,0,3207,3208,3,702,351,0,3208,701,1,0,0,0,3209,3213,
        3,134,67,0,3210,3212,3,106,53,0,3211,3210,1,0,0,0,3212,3215,1,0,
        0,0,3213,3211,1,0,0,0,3213,3214,1,0,0,0,3214,3216,1,0,0,0,3215,3213,
        1,0,0,0,3216,3217,3,688,344,0,3217,3236,1,0,0,0,3218,3220,3,174,
        87,0,3219,3218,1,0,0,0,3220,3223,1,0,0,0,3221,3219,1,0,0,0,3221,
        3222,1,0,0,0,3222,3224,1,0,0,0,3223,3221,1,0,0,0,3224,3231,3,732,
        366,0,3225,3227,3,174,87,0,3226,3225,1,0,0,0,3227,3228,1,0,0,0,3228,
        3226,1,0,0,0,3228,3229,1,0,0,0,3229,3231,1,0,0,0,3230,3221,1,0,0,
        0,3230,3226,1,0,0,0,3231,3232,1,0,0,0,3232,3233,3,680,340,0,3233,
        3234,3,654,327,0,3234,3236,1,0,0,0,3235,3209,1,0,0,0,3235,3230,1,
        0,0,0,3236,703,1,0,0,0,3237,3238,3,60,30,0,3238,3239,3,706,353,0,
        3239,705,1,0,0,0,3240,3244,5,90,0,0,3241,3243,3,174,87,0,3242,3241,
        1,0,0,0,3243,3246,1,0,0,0,3244,3242,1,0,0,0,3244,3245,1,0,0,0,3245,
        3247,1,0,0,0,3246,3244,1,0,0,0,3247,3248,3,178,89,0,3248,707,1,0,
        0,0,3249,3250,3,60,30,0,3250,3251,3,710,355,0,3251,709,1,0,0,0,3252,
        3256,5,91,0,0,3253,3255,3,174,87,0,3254,3253,1,0,0,0,3255,3258,1,
        0,0,0,3256,3254,1,0,0,0,3256,3257,1,0,0,0,3257,3259,1,0,0,0,3258,
        3256,1,0,0,0,3259,3260,3,178,89,0,3260,711,1,0,0,0,3261,3262,3,682,
        341,0,3262,713,1,0,0,0,3263,3264,3,256,128,0,3264,3265,3,712,356,
        0,3265,3266,3,680,340,0,3266,3267,3,688,344,0,3267,715,1,0,0,0,3268,
        3270,3,256,128,0,3269,3271,5,86,0,0,3270,3269,1,0,0,0,3270,3271,
        1,0,0,0,3271,3273,1,0,0,0,3272,3274,5,87,0,0,3273,3272,1,0,0,0,3273,
        3274,1,0,0,0,3274,3275,1,0,0,0,3275,3284,5,92,0,0,3276,3278,3,134,
        67,0,3277,3279,3,102,51,0,3278,3277,1,0,0,0,3278,3279,1,0,0,0,3279,
        3285,1,0,0,0,3280,3282,3,712,356,0,3281,3283,3,180,90,0,3282,3281,
        1,0,0,0,3282,3283,1,0,0,0,3283,3285,1,0,0,0,3284,3276,1,0,0,0,3284,
        3280,1,0,0,0,3285,3287,1,0,0,0,3286,3288,3,186,93,0,3287,3286,1,
        0,0,0,3287,3288,1,0,0,0,3288,3291,1,0,0,0,3289,3290,5,27,0,0,3290,
        3292,3,718,359,0,3291,3289,1,0,0,0,3291,3292,1,0,0,0,3292,3293,1,
        0,0,0,3293,3294,3,688,344,0,3294,717,1,0,0,0,3295,3296,3,720,360,
        0,3296,719,1,0,0,0,3297,3298,3,722,361,0,3298,721,1,0,0,0,3299,3300,
        3,724,362,0,3300,723,1,0,0,0,3301,3302,3,954,477,0,3302,725,1,0,
        0,0,3303,3304,5,93,0,0,3304,727,1,0,0,0,3305,3306,3,726,363,0,3306,
        3307,5,11,0,0,3307,729,1,0,0,0,3308,3309,3,244,122,0,3309,3310,3,
        728,364,0,3310,3311,3,152,76,0,3311,3312,3,688,344,0,3312,731,1,
        0,0,0,3313,3314,3,726,363,0,3314,733,1,0,0,0,3315,3316,3,256,128,
        0,3316,3317,3,732,366,0,3317,3318,3,680,340,0,3318,3319,3,688,344,
        0,3319,735,1,0,0,0,3320,3321,5,94,0,0,3321,737,1,0,0,0,3322,3323,
        3,736,368,0,3323,3324,5,11,0,0,3324,739,1,0,0,0,3325,3326,3,244,
        122,0,3326,3327,3,738,369,0,3327,3328,3,152,76,0,3328,3329,3,742,
        371,0,3329,741,1,0,0,0,3330,3343,5,135,0,0,3331,3335,5,129,0,0,3332,
        3334,3,744,372,0,3333,3332,1,0,0,0,3334,3337,1,0,0,0,3335,3333,1,
        0,0,0,3335,3336,1,0,0,0,3336,3339,1,0,0,0,3337,3335,1,0,0,0,3338,
        3340,3,662,331,0,3339,3338,1,0,0,0,3339,3340,1,0,0,0,3340,3341,1,
        0,0,0,3341,3343,5,130,0,0,3342,3330,1,0,0,0,3342,3331,1,0,0,0,3343,
        743,1,0,0,0,3344,3349,3,658,329,0,3345,3349,3,692,346,0,3346,3349,
        3,704,352,0,3347,3349,3,746,373,0,3348,3344,1,0,0,0,3348,3345,1,
        0,0,0,3348,3346,1,0,0,0,3348,3347,1,0,0,0,3349,745,1,0,0,0,3350,
        3351,3,60,30,0,3351,3352,5,95,0,0,3352,3353,3,748,374,0,3353,747,
        1,0,0,0,3354,3356,3,174,87,0,3355,3354,1,0,0,0,3356,3359,1,0,0,0,
        3357,3355,1,0,0,0,3357,3358,1,0,0,0,3358,3360,1,0,0,0,3359,3357,
        1,0,0,0,3360,3361,3,680,340,0,3361,3362,3,688,344,0,3362,749,1,0,
        0,0,3363,3364,3,736,368,0,3364,751,1,0,0,0,3365,3366,3,256,128,0,
        3366,3367,3,750,375,0,3367,3368,3,474,237,0,3368,3369,3,742,371,
        0,3369,753,1,0,0,0,3370,3371,5,96,0,0,3371,755,1,0,0,0,3372,3373,
        3,754,377,0,3373,3374,5,11,0,0,3374,757,1,0,0,0,3375,3376,3,754,
        377,0,3376,759,1,0,0,0,3377,3378,3,244,122,0,3378,3379,3,756,378,
        0,3379,3380,3,152,76,0,3380,3381,3,742,371,0,3381,761,1,0,0,0,3382,
        3383,3,256,128,0,3383,3384,3,758,379,0,3384,3385,3,474,237,0,3385,
        3386,3,742,371,0,3386,763,1,0,0,0,3387,3388,5,97,0,0,3388,765,1,
        0,0,0,3389,3390,3,764,382,0,3390,3391,5,11,0,0,3391,767,1,0,0,0,
        3392,3393,3,764,382,0,3393,769,1,0,0,0,3394,3395,3,244,122,0,3395,
        3396,3,766,383,0,3396,3397,3,152,76,0,3397,3398,3,742,371,0,3398,
        771,1,0,0,0,3399,3400,3,256,128,0,3400,3401,3,768,384,0,3401,3402,
        3,474,237,0,3402,3403,3,742,371,0,3403,773,1,0,0,0,3404,3405,3,60,
        30,0,3405,3406,3,1042,521,0,3406,3407,3,776,388,0,3407,775,1,0,0,
        0,3408,3412,3,134,67,0,3409,3411,3,106,53,0,3410,3409,1,0,0,0,3411,
        3414,1,0,0,0,3412,3410,1,0,0,0,3412,3413,1,0,0,0,3413,3415,1,0,0,
        0,3414,3412,1,0,0,0,3415,3416,3,688,344,0,3416,3435,1,0,0,0,3417,
        3419,3,174,87,0,3418,3417,1,0,0,0,3419,3422,1,0,0,0,3420,3418,1,
        0,0,0,3420,3421,1,0,0,0,3421,3423,1,0,0,0,3422,3420,1,0,0,0,3423,
        3430,3,712,356,0,3424,3426,3,174,87,0,3425,3424,1,0,0,0,3426,3427,
        1,0,0,0,3427,3425,1,0,0,0,3427,3428,1,0,0,0,3428,3430,1,0,0,0,3429,
        3420,1,0,0,0,3429,3425,1,0,0,0,3430,3431,1,0,0,0,3431,3432,3,680,
        340,0,3432,3433,3,688,344,0,3433,3435,1,0,0,0,3434,3408,1,0,0,0,
        3434,3429,1,0,0,0,3435,777,1,0,0,0,3436,3437,5,98,0,0,3437,3438,
        5,94,0,0,3438,779,1,0,0,0,3439,3440,3,778,389,0,3440,3441,5,11,0,
        0,3441,781,1,0,0,0,3442,3443,3,778,389,0,3443,783,1,0,0,0,3444,3445,
        3,244,122,0,3445,3446,3,780,390,0,3446,3447,3,152,76,0,3447,3448,
        3,742,371,0,3448,785,1,0,0,0,3449,3450,3,256,128,0,3450,3451,3,782,
        391,0,3451,3452,3,474,237,0,3452,3453,3,742,371,0,3453,787,1,0,0,
        0,3454,3455,3,256,128,0,3455,3464,5,99,0,0,3456,3458,3,134,67,0,
        3457,3459,3,102,51,0,3458,3457,1,0,0,0,3458,3459,1,0,0,0,3459,3465,
        1,0,0,0,3460,3462,3,782,391,0,3461,3463,3,180,90,0,3462,3461,1,0,
        0,0,3462,3463,1,0,0,0,3463,3465,1,0,0,0,3464,3456,1,0,0,0,3464,3460,
        1,0,0,0,3465,3467,1,0,0,0,3466,3468,3,186,93,0,3467,3466,1,0,0,0,
        3467,3468,1,0,0,0,3468,3469,1,0,0,0,3469,3470,3,742,371,0,3470,789,
        1,0,0,0,3471,3472,5,100,0,0,3472,791,1,0,0,0,3473,3474,3,790,395,
        0,3474,3475,5,11,0,0,3475,793,1,0,0,0,3476,3477,3,244,122,0,3477,
        3478,3,792,396,0,3478,3479,3,152,76,0,3479,3480,3,796,398,0,3480,
        795,1,0,0,0,3481,3491,5,135,0,0,3482,3486,5,129,0,0,3483,3485,3,
        798,399,0,3484,3483,1,0,0,0,3485,3488,1,0,0,0,3486,3484,1,0,0,0,
        3486,3487,1,0,0,0,3487,3489,1,0,0,0,3488,3486,1,0,0,0,3489,3491,
        5,130,0,0,3490,3481,1,0,0,0,3490,3482,1,0,0,0,3491,797,1,0,0,0,3492,
        3496,3,156,78,0,3493,3496,3,64,32,0,3494,3496,3,800,400,0,3495,3492,
        1,0,0,0,3495,3493,1,0,0,0,3495,3494,1,0,0,0,3496,799,1,0,0,0,3497,
        3498,3,60,30,0,3498,3499,5,101,0,0,3499,3500,3,802,401,0,3500,801,
        1,0,0,0,3501,3505,3,134,67,0,3502,3504,3,106,53,0,3503,3502,1,0,
        0,0,3504,3507,1,0,0,0,3505,3503,1,0,0,0,3505,3506,1,0,0,0,3506,3508,
        1,0,0,0,3507,3505,1,0,0,0,3508,3509,3,184,92,0,3509,3526,1,0,0,0,
        3510,3512,3,174,87,0,3511,3510,1,0,0,0,3512,3515,1,0,0,0,3513,3511,
        1,0,0,0,3513,3514,1,0,0,0,3514,3516,1,0,0,0,3515,3513,1,0,0,0,3516,
        3523,5,102,0,0,3517,3519,3,174,87,0,3518,3517,1,0,0,0,3519,3520,
        1,0,0,0,3520,3518,1,0,0,0,3520,3521,1,0,0,0,3521,3523,1,0,0,0,3522,
        3513,1,0,0,0,3522,3518,1,0,0,0,3523,3524,1,0,0,0,3524,3526,3,178,
        89,0,3525,3501,1,0,0,0,3525,3522,1,0,0,0,3526,803,1,0,0,0,3527,3528,
        3,790,395,0,3528,805,1,0,0,0,3529,3530,3,256,128,0,3530,3532,3,804,
        402,0,3531,3533,3,180,90,0,3532,3531,1,0,0,0,3532,3533,1,0,0,0,3533,
        3535,1,0,0,0,3534,3536,3,186,93,0,3535,3534,1,0,0,0,3535,3536,1,
        0,0,0,3536,3537,1,0,0,0,3537,3538,3,808,404,0,3538,807,1,0,0,0,3539,
        3549,5,135,0,0,3540,3544,5,129,0,0,3541,3543,3,810,405,0,3542,3541,
        1,0,0,0,3543,3546,1,0,0,0,3544,3542,1,0,0,0,3544,3545,1,0,0,0,3545,
        3547,1,0,0,0,3546,3544,1,0,0,0,3547,3549,5,130,0,0,3548,3539,1,0,
        0,0,3548,3540,1,0,0,0,3549,809,1,0,0,0,3550,3555,3,156,78,0,3551,
        3555,3,64,32,0,3552,3555,3,814,407,0,3553,3555,3,800,400,0,3554,
        3550,1,0,0,0,3554,3551,1,0,0,0,3554,3552,1,0,0,0,3554,3553,1,0,0,
        0,3555,811,1,0,0,0,3556,3558,3,1026,513,0,3557,3556,1,0,0,0,3557,
        3558,1,0,0,0,3558,3559,1,0,0,0,3559,3560,5,103,0,0,3560,813,1,0,
        0,0,3561,3564,3,816,408,0,3562,3564,3,818,409,0,3563,3561,1,0,0,
        0,3563,3562,1,0,0,0,3564,3565,1,0,0,0,3565,3566,3,6,3,0,3566,815,
        1,0,0,0,3567,3568,3,812,406,0,3568,3569,3,74,37,0,3569,817,1,0,0,
        0,3570,3573,3,812,406,0,3571,3574,3,78,39,0,3572,3574,3,80,40,0,
        3573,3571,1,0,0,0,3573,3572,1,0,0,0,3574,819,1,0,0,0,3575,3576,5,
        104,0,0,3576,821,1,0,0,0,3577,3578,3,820,410,0,3578,3579,5,11,0,
        0,3579,823,1,0,0,0,3580,3581,3,820,410,0,3581,825,1,0,0,0,3582,3583,
        3,244,122,0,3583,3584,3,822,411,0,3584,3585,3,152,76,0,3585,3586,
        3,688,344,0,3586,827,1,0,0,0,3587,3588,3,256,128,0,3588,3589,3,824,
        412,0,3589,3590,3,680,340,0,3590,3591,3,688,344,0,3591,829,1,0,0,
        0,3592,3593,5,102,0,0,3593,831,1,0,0,0,3594,3595,3,830,415,0,3595,
        3596,5,11,0,0,3596,833,1,0,0,0,3597,3598,3,244,122,0,3598,3599,3,
        832,416,0,3599,3600,3,150,75,0,3600,835,1,0,0,0,3601,3602,3,830,
        415,0,3602,837,1,0,0,0,3603,3604,3,256,128,0,3604,3605,3,836,418,
        0,3605,3606,3,178,89,0,3606,839,1,0,0,0,3607,3608,3,654,327,0,3608,
        841,1,0,0,0,3609,3610,3,844,422,0,3610,843,1,0,0,0,3611,3612,3,848,
        424,0,3612,845,1,0,0,0,3613,3614,3,842,421,0,3614,847,1,0,0,0,3615,
        3624,3,852,426,0,3616,3617,3,850,425,0,3617,3618,3,852,426,0,3618,
        3619,5,153,0,0,3619,3620,3,846,423,0,3620,3621,5,67,0,0,3621,3622,
        3,846,423,0,3622,3624,1,0,0,0,3623,3615,1,0,0,0,3623,3616,1,0,0,
        0,3624,849,1,0,0,0,3625,3626,5,66,0,0,3626,851,1,0,0,0,3627,3633,
        3,860,430,0,3628,3629,3,854,427,0,3629,3630,3,856,428,0,3630,3632,
        1,0,0,0,3631,3628,1,0,0,0,3632,3635,1,0,0,0,3633,3631,1,0,0,0,3633,
        3634,1,0,0,0,3634,853,1,0,0,0,3635,3633,1,0,0,0,3636,3637,5,154,
        0,0,3637,855,1,0,0,0,3638,3639,3,858,429,0,3639,857,1,0,0,0,3640,
        3641,3,860,430,0,3641,859,1,0,0,0,3642,3648,3,868,434,0,3643,3644,
        3,862,431,0,3644,3645,3,864,432,0,3645,3647,1,0,0,0,3646,3643,1,
        0,0,0,3647,3650,1,0,0,0,3648,3646,1,0,0,0,3648,3649,1,0,0,0,3649,
        861,1,0,0,0,3650,3648,1,0,0,0,3651,3652,5,105,0,0,3652,863,1,0,0,
        0,3653,3654,3,866,433,0,3654,865,1,0,0,0,3655,3656,3,868,434,0,3656,
        867,1,0,0,0,3657,3668,3,878,439,0,3658,3659,3,870,435,0,3659,3660,
        3,878,439,0,3660,3665,1,0,0,0,3661,3662,3,872,436,0,3662,3663,3,
        874,437,0,3663,3665,1,0,0,0,3664,3658,1,0,0,0,3664,3661,1,0,0,0,
        3665,3667,1,0,0,0,3666,3664,1,0,0,0,3667,3670,1,0,0,0,3668,3666,
        1,0,0,0,3668,3669,1,0,0,0,3669,869,1,0,0,0,3670,3668,1,0,0,0,3671,
        3672,5,155,0,0,3672,871,1,0,0,0,3673,3674,5,106,0,0,3674,873,1,0,
        0,0,3675,3676,3,876,438,0,3676,875,1,0,0,0,3677,3678,3,878,439,0,
        3678,877,1,0,0,0,3679,3685,3,882,441,0,3680,3681,3,880,440,0,3681,
        3682,3,882,441,0,3682,3684,1,0,0,0,3683,3680,1,0,0,0,3684,3687,1,
        0,0,0,3685,3683,1,0,0,0,3685,3686,1,0,0,0,3686,879,1,0,0,0,3687,
        3685,1,0,0,0,3688,3689,5,107,0,0,3689,881,1,0,0,0,3690,3701,3,892,
        446,0,3691,3692,3,884,442,0,3692,3693,3,892,446,0,3693,3698,1,0,
        0,0,3694,3695,3,886,443,0,3695,3696,3,888,444,0,3696,3698,1,0,0,
        0,3697,3691,1,0,0,0,3697,3694,1,0,0,0,3698,3700,1,0,0,0,3699,3697,
        1,0,0,0,3700,3703,1,0,0,0,3701,3699,1,0,0,0,3701,3702,1,0,0,0,3702,
        883,1,0,0,0,3703,3701,1,0,0,0,3704,3705,5,156,0,0,3705,885,1,0,0,
        0,3706,3707,5,108,0,0,3707,887,1,0,0,0,3708,3709,3,890,445,0,3709,
        889,1,0,0,0,3710,3711,3,892,446,0,3711,891,1,0,0,0,3712,3718,3,896,
        448,0,3713,3714,3,894,447,0,3714,3715,3,896,448,0,3715,3717,1,0,
        0,0,3716,3713,1,0,0,0,3717,3720,1,0,0,0,3718,3716,1,0,0,0,3718,3719,
        1,0,0,0,3719,893,1,0,0,0,3720,3718,1,0,0,0,3721,3726,5,157,0,0,3722,
        3726,5,158,0,0,3723,3726,5,159,0,0,3724,3726,5,160,0,0,3725,3721,
        1,0,0,0,3725,3722,1,0,0,0,3725,3723,1,0,0,0,3725,3724,1,0,0,0,3726,
        895,1,0,0,0,3727,3734,3,922,461,0,3728,3729,3,898,449,0,3729,3730,
        3,908,454,0,3730,3735,1,0,0,0,3731,3732,3,902,451,0,3732,3733,3,
        910,455,0,3733,3735,1,0,0,0,3734,3728,1,0,0,0,3734,3731,1,0,0,0,
        3734,3735,1,0,0,0,3735,3753,1,0,0,0,3736,3737,3,916,458,0,3737,3738,
        3,898,449,0,3738,3739,3,908,454,0,3739,3753,1,0,0,0,3740,3741,3,
        906,453,0,3741,3742,3,900,450,0,3742,3743,3,908,454,0,3743,3753,
        1,0,0,0,3744,3745,3,916,458,0,3745,3746,3,902,451,0,3746,3747,3,
        910,455,0,3747,3753,1,0,0,0,3748,3749,3,906,453,0,3749,3750,3,904,
        452,0,3750,3751,3,910,455,0,3751,3753,1,0,0,0,3752,3727,1,0,0,0,
        3752,3736,1,0,0,0,3752,3740,1,0,0,0,3752,3744,1,0,0,0,3752,3748,
        1,0,0,0,3753,897,1,0,0,0,3754,3758,5,109,0,0,3755,3758,5,110,0,0,
        3756,3758,5,137,0,0,3757,3754,1,0,0,0,3757,3755,1,0,0,0,3757,3756,
        1,0,0,0,3758,899,1,0,0,0,3759,3760,5,161,0,0,3760,901,1,0,0,0,3761,
        3762,5,111,0,0,3762,903,1,0,0,0,3763,3764,5,112,0,0,3764,905,1,0,
        0,0,3765,3766,3,1022,511,0,3766,907,1,0,0,0,3767,3768,3,912,456,
        0,3768,909,1,0,0,0,3769,3770,3,912,456,0,3770,911,1,0,0,0,3771,3772,
        3,914,457,0,3772,913,1,0,0,0,3773,3774,3,1022,511,0,3774,915,1,0,
        0,0,3775,3776,3,918,459,0,3776,917,1,0,0,0,3777,3778,3,920,460,0,
        3778,919,1,0,0,0,3779,3780,1,0,0,0,3780,921,1,0,0,0,3781,3787,3,
        926,463,0,3782,3783,3,924,462,0,3783,3784,3,926,463,0,3784,3786,
        1,0,0,0,3785,3782,1,0,0,0,3786,3789,1,0,0,0,3787,3785,1,0,0,0,3787,
        3788,1,0,0,0,3788,923,1,0,0,0,3789,3787,1,0,0,0,3790,3795,5,127,
        0,0,3791,3795,5,128,0,0,3792,3795,5,162,0,0,3793,3795,5,163,0,0,
        3794,3790,1,0,0,0,3794,3791,1,0,0,0,3794,3792,1,0,0,0,3794,3793,
        1,0,0,0,3795,925,1,0,0,0,3796,3799,3,928,464,0,3797,3798,5,146,0,
        0,3798,3800,3,928,464,0,3799,3797,1,0,0,0,3799,3800,1,0,0,0,3800,
        927,1,0,0,0,3801,3807,3,932,466,0,3802,3803,3,930,465,0,3803,3804,
        3,932,466,0,3804,3806,1,0,0,0,3805,3802,1,0,0,0,3806,3809,1,0,0,
        0,3807,3805,1,0,0,0,3807,3808,1,0,0,0,3808,929,1,0,0,0,3809,3807,
        1,0,0,0,3810,3813,5,164,0,0,3811,3813,5,165,0,0,3812,3810,1,0,0,
        0,3812,3811,1,0,0,0,3813,931,1,0,0,0,3814,3820,3,936,468,0,3815,
        3816,3,934,467,0,3816,3817,3,936,468,0,3817,3819,1,0,0,0,3818,3815,
        1,0,0,0,3819,3822,1,0,0,0,3820,3818,1,0,0,0,3820,3821,1,0,0,0,3821,
        933,1,0,0,0,3822,3820,1,0,0,0,3823,3827,5,142,0,0,3824,3827,5,166,
        0,0,3825,3827,5,167,0,0,3826,3823,1,0,0,0,3826,3824,1,0,0,0,3826,
        3825,1,0,0,0,3827,935,1,0,0,0,3828,3832,3,940,470,0,3829,3830,3,
        938,469,0,3830,3831,3,936,468,0,3831,3833,1,0,0,0,3832,3829,1,0,
        0,0,3832,3833,1,0,0,0,3833,937,1,0,0,0,3834,3837,5,141,0,0,3835,
        3837,5,168,0,0,3836,3834,1,0,0,0,3836,3835,1,0,0,0,3837,939,1,0,
        0,0,3838,3839,3,942,471,0,3839,3840,3,944,472,0,3840,3843,1,0,0,
        0,3841,3843,3,944,472,0,3842,3838,1,0,0,0,3842,3841,1,0,0,0,3843,
        941,1,0,0,0,3844,3849,5,164,0,0,3845,3849,5,165,0,0,3846,3849,5,
        149,0,0,3847,3849,5,87,0,0,3848,3844,1,0,0,0,3848,3845,1,0,0,0,3848,
        3846,1,0,0,0,3848,3847,1,0,0,0,3849,943,1,0,0,0,3850,3851,5,22,0,
        0,3851,3854,3,910,455,0,3852,3854,3,946,473,0,3853,3850,1,0,0,0,
        3853,3852,1,0,0,0,3854,945,1,0,0,0,3855,3858,3,956,478,0,3856,3857,
        5,150,0,0,3857,3859,3,954,477,0,3858,3856,1,0,0,0,3858,3859,1,0,
        0,0,3859,3888,1,0,0,0,3860,3861,5,138,0,0,3861,3862,5,133,0,0,3862,
        3863,3,964,482,0,3863,3864,5,134,0,0,3864,3881,1,0,0,0,3865,3866,
        5,132,0,0,3866,3867,3,964,482,0,3867,3868,5,131,0,0,3868,3881,1,
        0,0,0,3869,3870,5,151,0,0,3870,3874,3,914,457,0,3871,3875,3,958,
        479,0,3872,3875,3,948,474,0,3873,3875,3,982,491,0,3874,3871,1,0,
        0,0,3874,3872,1,0,0,0,3874,3873,1,0,0,0,3875,3881,1,0,0,0,3876,3877,
        5,150,0,0,3877,3881,3,958,479,0,3878,3879,5,152,0,0,3879,3881,3,
        958,479,0,3880,3860,1,0,0,0,3880,3865,1,0,0,0,3880,3869,1,0,0,0,
        3880,3876,1,0,0,0,3880,3878,1,0,0,0,3881,3884,1,0,0,0,3882,3883,
        5,150,0,0,3883,3885,3,954,477,0,3884,3882,1,0,0,0,3884,3885,1,0,
        0,0,3885,3887,1,0,0,0,3886,3880,1,0,0,0,3887,3890,1,0,0,0,3888,3886,
        1,0,0,0,3888,3889,1,0,0,0,3889,947,1,0,0,0,3890,3888,1,0,0,0,3891,
        3892,3,950,475,0,3892,949,1,0,0,0,3893,3894,3,952,476,0,3894,951,
        1,0,0,0,3895,3896,3,914,457,0,3896,953,1,0,0,0,3897,3900,3,1022,
        511,0,3898,3900,3,976,488,0,3899,3897,1,0,0,0,3899,3898,1,0,0,0,
        3900,955,1,0,0,0,3901,3912,3,1000,500,0,3902,3912,3,1002,501,0,3903,
        3912,3,966,483,0,3904,3912,3,970,485,0,3905,3912,3,972,486,0,3906,
        3912,3,958,479,0,3907,3908,5,133,0,0,3908,3909,3,964,482,0,3909,
        3910,5,134,0,0,3910,3912,1,0,0,0,3911,3901,1,0,0,0,3911,3902,1,0,
        0,0,3911,3903,1,0,0,0,3911,3904,1,0,0,0,3911,3905,1,0,0,0,3911,3906,
        1,0,0,0,3911,3907,1,0,0,0,3912,957,1,0,0,0,3913,3914,3,960,480,0,
        3914,959,1,0,0,0,3915,3916,3,840,420,0,3916,961,1,0,0,0,3917,3918,
        3,1018,509,0,3918,963,1,0,0,0,3919,3923,3,844,422,0,3920,3924,5,
        136,0,0,3921,3922,5,136,0,0,3922,3924,3,964,482,0,3923,3920,1,0,
        0,0,3923,3921,1,0,0,0,3923,3924,1,0,0,0,3924,965,1,0,0,0,3925,3926,
        3,968,484,0,3926,967,1,0,0,0,3927,3928,3,1022,511,0,3928,969,1,0,
        0,0,3929,3930,3,1022,511,0,3930,3931,5,150,0,0,3931,3932,5,10,0,
        0,3932,971,1,0,0,0,3933,3934,3,974,487,0,3934,3935,3,982,491,0,3935,
        973,1,0,0,0,3936,3939,3,1022,511,0,3937,3939,3,976,488,0,3938,3936,
        1,0,0,0,3938,3937,1,0,0,0,3939,975,1,0,0,0,3940,3941,3,978,489,0,
        3941,977,1,0,0,0,3942,3945,3,980,490,0,3943,3944,5,150,0,0,3944,
        3946,3,980,490,0,3945,3943,1,0,0,0,3946,3947,1,0,0,0,3947,3945,1,
        0,0,0,3947,3948,1,0,0,0,3948,979,1,0,0,0,3949,3950,3,1022,511,0,
        3950,981,1,0,0,0,3951,3954,5,133,0,0,3952,3955,3,984,492,0,3953,
        3955,3,990,495,0,3954,3952,1,0,0,0,3954,3953,1,0,0,0,3954,3955,1,
        0,0,0,3955,3956,1,0,0,0,3956,3957,5,134,0,0,3957,983,1,0,0,0,3958,
        3963,3,986,493,0,3959,3960,5,136,0,0,3960,3962,3,986,493,0,3961,
        3959,1,0,0,0,3962,3965,1,0,0,0,3963,3961,1,0,0,0,3963,3964,1,0,0,
        0,3964,985,1,0,0,0,3965,3963,1,0,0,0,3966,3967,3,988,494,0,3967,
        987,1,0,0,0,3968,3969,3,998,499,0,3969,989,1,0,0,0,3970,3975,3,992,
        496,0,3971,3972,5,136,0,0,3972,3974,3,992,496,0,3973,3971,1,0,0,
        0,3974,3977,1,0,0,0,3975,3973,1,0,0,0,3975,3976,1,0,0,0,3976,991,
        1,0,0,0,3977,3975,1,0,0,0,3978,3979,3,994,497,0,3979,993,1,0,0,0,
        3980,3981,3,996,498,0,3981,3982,5,147,0,0,3982,3983,3,998,499,0,
        3983,995,1,0,0,0,3984,3985,3,1022,511,0,3985,997,1,0,0,0,3986,3987,
        3,844,422,0,3987,999,1,0,0,0,3988,3992,5,113,0,0,3989,3990,5,133,
        0,0,3990,3992,5,134,0,0,3991,3988,1,0,0,0,3991,3989,1,0,0,0,3992,
        1001,1,0,0,0,3993,3999,3,1004,502,0,3994,3999,3,1008,504,0,3995,
        3999,3,1010,505,0,3996,3999,3,1012,506,0,3997,3999,3,1016,508,0,
        3998,3993,1,0,0,0,3998,3994,1,0,0,0,3998,3995,1,0,0,0,3998,3996,
        1,0,0,0,3998,3997,1,0,0,0,3999,1003,1,0,0,0,4000,4001,3,1006,503,
        0,4001,1005,1,0,0,0,4002,4005,5,114,0,0,4003,4005,5,115,0,0,4004,
        4002,1,0,0,0,4004,4003,1,0,0,0,4005,1007,1,0,0,0,4006,4007,5,173,
        0,0,4007,1009,1,0,0,0,4008,4009,5,169,0,0,4009,1011,1,0,0,0,4010,
        4011,3,1014,507,0,4011,1013,1,0,0,0,4012,4014,5,169,0,0,4013,4012,
        1,0,0,0,4013,4014,1,0,0,0,4014,4015,1,0,0,0,4015,4016,5,150,0,0,
        4016,4019,7,3,0,0,4017,4019,5,170,0,0,4018,4013,1,0,0,0,4018,4017,
        1,0,0,0,4019,1015,1,0,0,0,4020,4021,5,142,0,0,4021,1017,1,0,0,0,
        4022,4025,5,171,0,0,4023,4025,5,172,0,0,4024,4022,1,0,0,0,4024,4023,
        1,0,0,0,4025,1019,1,0,0,0,4026,4027,3,1018,509,0,4027,4028,5,140,
        0,0,4028,4030,1,0,0,0,4029,4026,1,0,0,0,4030,4031,1,0,0,0,4031,4029,
        1,0,0,0,4031,4032,1,0,0,0,4032,1021,1,0,0,0,4033,4035,3,1020,510,
        0,4034,4033,1,0,0,0,4034,4035,1,0,0,0,4035,4036,1,0,0,0,4036,4037,
        3,1018,509,0,4037,1023,1,0,0,0,4038,4039,5,132,0,0,4039,1025,1,0,
        0,0,4040,4044,5,116,0,0,4041,4044,5,117,0,0,4042,4044,5,118,0,0,
        4043,4040,1,0,0,0,4043,4041,1,0,0,0,4043,4042,1,0,0,0,4044,1027,
        1,0,0,0,4045,4049,5,71,0,0,4046,4049,5,119,0,0,4047,4049,5,120,0,
        0,4048,4045,1,0,0,0,4048,4046,1,0,0,0,4048,4047,1,0,0,0,4049,1029,
        1,0,0,0,4050,4053,5,121,0,0,4051,4053,5,122,0,0,4052,4050,1,0,0,
        0,4052,4051,1,0,0,0,4053,1031,1,0,0,0,4054,4055,5,59,0,0,4055,1033,
        1,0,0,0,4056,4057,5,66,0,0,4057,1035,1,0,0,0,4058,4059,5,79,0,0,
        4059,1037,1,0,0,0,4060,4063,5,123,0,0,4061,4063,5,124,0,0,4062,4060,
        1,0,0,0,4062,4061,1,0,0,0,4063,1039,1,0,0,0,4064,4065,5,125,0,0,
        4065,1041,1,0,0,0,4066,4067,5,126,0,0,4067,1043,1,0,0,0,386,1050,
        1057,1060,1067,1071,1076,1081,1084,1091,1100,1115,1119,1127,1130,
        1132,1136,1142,1146,1152,1154,1167,1170,1175,1192,1203,1206,1211,
        1214,1226,1228,1232,1237,1240,1244,1247,1254,1261,1267,1275,1283,
        1285,1289,1295,1298,1303,1316,1319,1326,1330,1334,1344,1349,1356,
        1362,1366,1406,1410,1418,1423,1429,1432,1437,1440,1445,1452,1455,
        1459,1463,1467,1469,1471,1477,1484,1493,1500,1508,1515,1522,1530,
        1534,1538,1542,1546,1554,1560,1564,1569,1574,1581,1584,1591,1595,
        1601,1606,1628,1631,1634,1637,1640,1644,1652,1656,1663,1675,1677,
        1688,1700,1712,1716,1733,1751,1774,1777,1782,1791,1820,1831,1833,
        1837,1845,1849,1863,1867,1872,1880,1886,1901,1904,1909,1921,1928,
        1934,1943,1947,1949,1962,2030,2034,2041,2043,2056,2058,2082,2085,
        2090,2095,2101,2115,2141,2144,2148,2155,2161,2181,2184,2188,2195,
        2201,2208,2212,2215,2220,2225,2230,2233,2238,2245,2247,2252,2260,
        2267,2293,2297,2303,2308,2318,2326,2329,2332,2345,2350,2353,2357,
        2371,2381,2385,2406,2411,2416,2433,2437,2445,2452,2456,2460,2465,
        2469,2498,2502,2504,2507,2510,2513,2522,2526,2530,2537,2546,2552,
        2555,2558,2570,2574,2589,2596,2601,2614,2627,2642,2653,2659,2663,
        2675,2677,2683,2685,2691,2703,2710,2727,2731,2734,2739,2745,2752,
        2759,2766,2775,2779,2788,2808,2830,2836,2841,2850,2854,2860,2868,
        2873,2897,2907,2915,2932,2938,2944,2948,2950,2953,2961,2964,2971,
        2974,2977,2988,2991,2994,2999,3002,3006,3008,3016,3035,3039,3041,
        3063,3068,3072,3076,3112,3116,3121,3126,3129,3146,3150,3159,3168,
        3181,3189,3196,3198,3203,3213,3221,3228,3230,3235,3244,3256,3270,
        3273,3278,3282,3284,3287,3291,3335,3339,3342,3348,3357,3412,3420,
        3427,3429,3434,3458,3462,3464,3467,3486,3490,3495,3505,3513,3520,
        3522,3525,3532,3535,3544,3548,3554,3557,3563,3573,3623,3633,3648,
        3664,3668,3685,3697,3701,3718,3725,3734,3752,3757,3787,3794,3799,
        3807,3812,3820,3826,3832,3836,3842,3848,3853,3858,3874,3880,3884,
        3888,3899,3911,3923,3938,3947,3954,3963,3975,3991,3998,4004,4013,
        4018,4024,4031,4034,4043,4048,4052,4062
    ]

class SysMLv2Parser ( Parser ):

    grammarFileName = "SysMLv2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'dependency'", "'from'", "'to'", "'comment'", 
                     "'about'", "'locale'", "'doc'", "'rep'", "'language'", 
                     "'metadata'", "'def'", "'abstract'", "'ref'", "'redefines'", 
                     "'standard'", "'library'", "'package'", "'filter'", 
                     "'alias'", "'for'", "'import'", "'all'", "'specializes'", 
                     "'ordered'", "'nonunique'", "'defined'", "'by'", "'subsets'", 
                     "'references'", "'variation'", "'variant'", "'readonly'", 
                     "'derived'", "'end'", "'default'", "'attribute'", "'enum'", 
                     "'occurrence'", "'individual'", "'event'", "'then'", 
                     "'item'", "'part'", "'port'", "'binding'", "'bind'", 
                     "'succession'", "'first'", "'connection'", "'connect'", 
                     "'flow'", "'message'", "'of'", "'interface'", "'allocation'", 
                     "'allocate'", "'action'", "'perform'", "'accept'", 
                     "'via'", "'at'", "'after'", "'when'", "'send'", "'assign'", 
                     "'if'", "'else'", "'while'", "'loop'", "'until'", "'in'", 
                     "'merge'", "'decide'", "'join'", "'fork'", "'state'", 
                     "'parallel'", "'entry'", "'do'", "'exit'", "'exhibit'", 
                     "'transition'", "'calc'", "'return'", "'constraint'", 
                     "'assert'", "'not'", "'requirement'", "'subject'", 
                     "'actor'", "'stakeholder'", "'satisfy'", "'concern'", 
                     "'case'", "'objective'", "'analysis'", "'verification'", 
                     "'use'", "'include'", "'view'", "'render'", "'rendering'", 
                     "'expose'", "'viewpoint'", "'implies'", "'or'", "'xor'", 
                     "'and'", "'hastype'", "'istype'", "'as'", "'meta'", 
                     "'null'", "'true'", "'false'", "'public'", "'private'", 
                     "'protected'", "'out'", "'inout'", "'snapshot'", "'timeslice'", 
                     "'assume'", "'require'", "'frame'", "'verify'", "'<'", 
                     "'>'", "'{'", "'}'", "']'", "'['", "'('", "')'", "';'", 
                     "','", "'@'", "'#'", "':>>'", "'::'", "'**'", "'*'", 
                     "':>'", "':'", "'::>'", "'..'", "'='", "':='", "'~'", 
                     "'.'", "'->'", "'.?'", "'?'", "'??'", "'|'", "'&'", 
                     "'=='", "'!='", "'==='", "'!=='", "'@@'", "'<='", "'>='", 
                     "'+'", "'-'", "'/'", "'%'", "'^'" ]

    symbolicNames = [ "<INVALID>", "K_DEPENDENCY", "K_FROM", "K_TO", "K_COMMENT", 
                      "K_ABOUT", "K_LOCALE", "K_DOC", "K_REP", "K_LANGUAGE", 
                      "K_METADATA", "K_DEF", "K_ABSTRACT", "K_REF", "K_REDEFINES", 
                      "K_STANDARD", "K_LIBRARY", "K_PACKAGE", "K_FILTER", 
                      "K_ALIAS", "K_FOR", "K_IMPORT", "K_ALL", "K_SPECIALIZES", 
                      "K_ORDERED", "K_NONUNIQUE", "K_DEFINED", "K_BY", "K_SUBSETS", 
                      "K_REFERENCES", "K_VARIATION", "K_VARIANT", "K_READONLY", 
                      "K_DERIVED", "K_END", "K_DEFAULT", "K_ATTRIBUTE", 
                      "K_ENUM", "K_OCCURRENCE", "K_INDIVIDUAL", "K_EVENT", 
                      "K_THEN", "K_ITEM", "K_PART", "K_PORT", "K_BINDING", 
                      "K_BIND", "K_SUCCESSION", "K_FIRST", "K_CONNECTION", 
                      "K_CONNECT", "K_FLOW", "K_MESSAGE", "K_OF", "K_INTERFACE", 
                      "K_ALLOCATION", "K_ALLOCATE", "K_ACTION", "K_PERFORM", 
                      "K_ACCEPT", "K_VIA", "K_AT", "K_AFTER", "K_WHEN", 
                      "K_SEND", "K_ASSIGN", "K_IF", "K_ELSE", "K_WHILE", 
                      "K_LOOP", "K_UNTIL", "K_IN", "K_MERGE", "K_DECIDE", 
                      "K_JOIN", "K_FORK", "K_STATE", "K_PARALLEL", "K_ENTRY", 
                      "K_DO", "K_EXIT", "K_EXHIBIT", "K_TRANSITION", "K_CALC", 
                      "K_RETURN", "K_CONSTRAINT", "K_ASSERT", "K_NOT", "K_REQUIREMENT", 
                      "K_SUBJECT", "K_ACTOR", "K_STAKEHOLDER", "K_SATISFY", 
                      "K_CONCERN", "K_CASE", "K_OBJECTIVE", "K_ANALYSIS", 
                      "K_VERIFICATION", "K_USE", "K_INCLUDE", "K_VIEW", 
                      "K_RENDER", "K_RENDERING", "K_EXPOSE", "K_VIEWPOINT", 
                      "K_IMPLIES", "K_OR", "K_XOR", "K_AND", "K_HASTYPE", 
                      "K_ISTYPE", "K_AS", "K_META", "K_NULL", "K_TRUE", 
                      "K_FALSE", "K_PUBLIC", "K_PRIVATE", "K_PROTECTED", 
                      "K_OUT", "K_INOUT", "K_SNAPSHOT", "K_TIMESLICE", "K_ASSUME", 
                      "K_REQUIRE", "K_FRAME", "K_VERIFY", "LANGLE", "RANGLE", 
                      "LBRACE", "RBRACE", "RSQUARE", "LSQUARE", "LPAREN", 
                      "RPAREN", "OP_SEMI", "OP_COMMA", "OP_AT", "OP_HASH", 
                      "OP_COLON_RANGLE_RANGLE", "OP_COLON_COLON", "OP_STAR_STAR", 
                      "OP_STAR", "OP_COLON_RANGLE", "OP_COLON", "OP_COLON_COLON_RANGLE", 
                      "OP_DOT_DOT", "OP_EQ", "OP_COLON_EQ", "OP_TILDE", 
                      "OP_DOT", "OP_MINUS_RANGLE", "OP_DOT_QMARK", "OP_QMARK", 
                      "OP_QMARK_QMARK", "OP_BAR", "OP_AND", "OP_EQ_EQ", 
                      "OP_BANG_EQ", "OP_EQ_EQ_EQ", "OP_BANG_EQ_EQ", "OP_AT_AT", 
                      "OP_LANGLE_EQ", "OP_RANGLE_EQ", "OP_PLUS", "OP_MINUS", 
                      "OP_SLASH", "OP_PERCENT", "OP_HAT", "RULE_DECIMAL_VALUE", 
                      "RULE_EXP_VALUE", "RULE_ID", "RULE_UNRESTRICTED_NAME", 
                      "RULE_STRING_VALUE", "RULE_REGULAR_COMMENT", "RULE_ML_NOTE", 
                      "RULE_SL_NOTE", "RULE_WS" ]

    RULE_entryRuleRootNamespace = 0
    RULE_ruleRootNamespace = 1
    RULE_ruleIdentification = 2
    RULE_ruleRelationshipBody = 3
    RULE_ruleDependency = 4
    RULE_ruleAnnotation = 5
    RULE_ruleOwnedAnnotation = 6
    RULE_ruleAnnotatingMember = 7
    RULE_ruleAnnotatingElement = 8
    RULE_ruleComment = 9
    RULE_ruleDocumentation = 10
    RULE_ruleTextualRepresentation = 11
    RULE_ruleMetadataKeyword = 12
    RULE_ruleMetadataDefKeyword = 13
    RULE_ruleMetadataUsageKeyword = 14
    RULE_ruleMetadataDefinition = 15
    RULE_rulePrefixMetadataAnnotation = 16
    RULE_rulePrefixMetadataMember = 17
    RULE_rulePrefixMetadataUsage = 18
    RULE_ruleMetadataUsage = 19
    RULE_ruleMetadataUsageDeclaration = 20
    RULE_ruleMetadataTyping = 21
    RULE_ruleMetadataBody = 22
    RULE_ruleMetadataBodyUsageMember = 23
    RULE_ruleMetadataBodyUsage = 24
    RULE_rulePackage = 25
    RULE_ruleLibraryPackage = 26
    RULE_rulePackageDeclaration = 27
    RULE_rulePackageBody = 28
    RULE_rulePackageBodyElement = 29
    RULE_ruleMemberPrefix = 30
    RULE_rulePackageMember = 31
    RULE_ruleElementFilterMember = 32
    RULE_ruleAliasMember = 33
    RULE_ruleImportPrefix = 34
    RULE_ruleImport = 35
    RULE_ruleMembershipImport = 36
    RULE_ruleImportedMembership = 37
    RULE_ruleNamespaceImport = 38
    RULE_ruleImportedNamespace = 39
    RULE_ruleFilterPackage = 40
    RULE_ruleFilterPackageImport = 41
    RULE_ruleFilterPackageMembershipImport = 42
    RULE_ruleFilterPackageNamespaceImport = 43
    RULE_ruleFilterPackageMember = 44
    RULE_ruleDefinitionElement = 45
    RULE_ruleUsageElement = 46
    RULE_ruleSubclassificationPart = 47
    RULE_ruleSpecializesKeyword = 48
    RULE_ruleOwnedSubclassification = 49
    RULE_ruleFeatureDeclaration = 50
    RULE_ruleFeatureSpecializationPart = 51
    RULE_ruleMultiplicityPart = 52
    RULE_ruleFeatureSpecialization = 53
    RULE_ruleTypings = 54
    RULE_ruleTypedBy = 55
    RULE_ruleDefinedByKeyword = 56
    RULE_ruleSubsettings = 57
    RULE_ruleSubsets = 58
    RULE_ruleSubsetsKeyword = 59
    RULE_ruleReferences = 60
    RULE_ruleReferencesKeyword = 61
    RULE_ruleRedefinitions = 62
    RULE_ruleRedefines = 63
    RULE_ruleRedefinesKeyword = 64
    RULE_ruleFeatureTyping = 65
    RULE_ruleOwnedSubsetting = 66
    RULE_ruleOwnedReferenceSubsetting = 67
    RULE_ruleOwnedRedefinition = 68
    RULE_ruleOwnedMultiplicity = 69
    RULE_ruleMultiplicityRange = 70
    RULE_ruleMultiplicityExpressionMember = 71
    RULE_ruleBasicDefinitionPrefix = 72
    RULE_ruleDefinitionExtensionKeyword = 73
    RULE_ruleDefinitionPrefix = 74
    RULE_ruleDefinition = 75
    RULE_ruleDefinitionDeclaration = 76
    RULE_ruleDefinitionBody = 77
    RULE_ruleDefinitionBodyItem = 78
    RULE_ruleDefinitionMember = 79
    RULE_ruleVariantUsageMember = 80
    RULE_ruleNonOccurrenceUsageMember = 81
    RULE_ruleOccurrenceUsageMember = 82
    RULE_ruleStructureUsageMember = 83
    RULE_ruleBehaviorUsageMember = 84
    RULE_ruleRefPrefix = 85
    RULE_ruleBasicUsagePrefix = 86
    RULE_ruleUsageExtensionKeyword = 87
    RULE_ruleUsagePrefix = 88
    RULE_ruleUsage = 89
    RULE_ruleUsageDeclaration = 90
    RULE_ruleUsageCompletion = 91
    RULE_ruleUsageBody = 92
    RULE_ruleValuePart = 93
    RULE_ruleFeatureValue = 94
    RULE_ruleReferenceKeyword = 95
    RULE_ruleReferenceUsageKeyword = 96
    RULE_ruleDefaultReferenceUsage = 97
    RULE_ruleReferenceUsage = 98
    RULE_ruleVariantReference = 99
    RULE_ruleNonOccurrenceUsageElement = 100
    RULE_ruleOccurrenceUsageElement = 101
    RULE_ruleStructureUsageElement = 102
    RULE_ruleBehaviorUsageElement = 103
    RULE_ruleVariantUsageElement = 104
    RULE_ruleExtendedDefinition = 105
    RULE_ruleExtendedUsage = 106
    RULE_ruleAttributeKeyword = 107
    RULE_ruleAttributeDefKeyword = 108
    RULE_ruleAttributeUsageKeyword = 109
    RULE_ruleAttributeDefinition = 110
    RULE_ruleAttributeUsage = 111
    RULE_ruleEnumerationKeyword = 112
    RULE_ruleEnumerationDefKeyword = 113
    RULE_ruleEnumerationUsageKeyword = 114
    RULE_ruleEnumerationDefinition = 115
    RULE_ruleEnumerationBody = 116
    RULE_ruleEnumerationUsageMember = 117
    RULE_ruleEnumeratedValue = 118
    RULE_ruleEnumerationUsage = 119
    RULE_ruleOccurrenceKeyword = 120
    RULE_ruleOccurrenceDefKeyword = 121
    RULE_ruleOccurrenceDefinitionPrefix = 122
    RULE_ruleOccurrenceDefinition = 123
    RULE_ruleIndividualDefinition = 124
    RULE_ruleLifeClassMembership = 125
    RULE_ruleLifeClass = 126
    RULE_ruleOccurrenceUsageKeyword = 127
    RULE_ruleOccurrenceUsagePrefix = 128
    RULE_ruleOccurrenceUsage = 129
    RULE_ruleIndividualUsage = 130
    RULE_rulePortionUsage = 131
    RULE_ruleEventOccurrenceUsage = 132
    RULE_ruleEmptySuccessionMember = 133
    RULE_ruleEmptySuccession = 134
    RULE_ruleMultiplicitySourceEndMember = 135
    RULE_ruleMultiplicitySourceEnd = 136
    RULE_ruleEmptyTargetEndMember = 137
    RULE_ruleEmptyTargetEnd = 138
    RULE_ruleItemKeyword = 139
    RULE_ruleItemDefKeyword = 140
    RULE_ruleItemUsageKeyword = 141
    RULE_ruleItemDefinition = 142
    RULE_ruleItemUsage = 143
    RULE_rulePartKeyword = 144
    RULE_rulePartDefKeyword = 145
    RULE_rulePartUsageKeyword = 146
    RULE_rulePartDefinition = 147
    RULE_rulePartUsage = 148
    RULE_rulePortKeyword = 149
    RULE_rulePortDefKeyword = 150
    RULE_rulePortDefinition = 151
    RULE_ruleConjugatedPortDefinitionMember = 152
    RULE_ruleConjugatedPortDefinition = 153
    RULE_rulePortConjugation = 154
    RULE_ruleConjugatedPortTyping = 155
    RULE_ruleConjugatedQualifiedName = 156
    RULE_rulePortUsageKeyword = 157
    RULE_rulePortUsage = 158
    RULE_ruleConnectorEndMember = 159
    RULE_ruleConnectorEnd = 160
    RULE_ruleBindingKeyword = 161
    RULE_ruleBindingConnectorAsUsage = 162
    RULE_ruleSuccessionKeyword = 163
    RULE_ruleSuccessionAsUsage = 164
    RULE_ruleConnectionKeyword = 165
    RULE_ruleConnectionDefKeyword = 166
    RULE_ruleConnectionDefinition = 167
    RULE_ruleConnectorKeyword = 168
    RULE_ruleConnectionUsageKeyword = 169
    RULE_ruleConnectionUsage = 170
    RULE_ruleConnectorPart = 171
    RULE_ruleBinaryConnectorPart = 172
    RULE_ruleNaryConnectorPart = 173
    RULE_ruleEmptySourceEndMember = 174
    RULE_ruleEmptySourceEnd = 175
    RULE_ruleFlowConnectionKeyword = 176
    RULE_ruleFlowConnectionDefKeyword = 177
    RULE_ruleFlowConnectionDefinition = 178
    RULE_ruleMessageKeyword = 179
    RULE_ruleMessage = 180
    RULE_ruleMessageDeclaration = 181
    RULE_ruleMessageEventMember = 182
    RULE_ruleMessageEvent = 183
    RULE_ruleFlowConnectionUsage = 184
    RULE_ruleSuccessionFlowConnectionKeyword = 185
    RULE_ruleSuccessionFlowConnectionUsage = 186
    RULE_ruleFlowConnectionDeclaration = 187
    RULE_ruleItemFeatureMember = 188
    RULE_ruleItemFeature = 189
    RULE_rulePayloadFeature = 190
    RULE_rulePayloadFeatureSpecializationPart = 191
    RULE_ruleFlowEndMember = 192
    RULE_ruleFlowEnd = 193
    RULE_ruleFlowEndSubsetting = 194
    RULE_ruleFeatureChainPrefix = 195
    RULE_ruleFlowFeatureMember = 196
    RULE_ruleFlowFeature = 197
    RULE_ruleFlowRedefinition = 198
    RULE_ruleInterfaceKeyword = 199
    RULE_ruleInterfaceDefKeyword = 200
    RULE_ruleInterfaceDefinition = 201
    RULE_ruleInterfaceBody = 202
    RULE_ruleInterfaceBodyItem = 203
    RULE_ruleInterfaceNonOccurrenceUsageMember = 204
    RULE_ruleInterfaceNonOccurrenceUsageElement = 205
    RULE_ruleInterfaceOccurrenceUsageMember = 206
    RULE_ruleInterfaceOccurrenceUsageElement = 207
    RULE_ruleDefaultInterfaceEnd = 208
    RULE_ruleInterfaceUsageKeyword = 209
    RULE_ruleInterfaceUsage = 210
    RULE_ruleInterfaceUsageDeclaration = 211
    RULE_ruleInterfacePart = 212
    RULE_ruleBinaryInterfacePart = 213
    RULE_ruleNaryInterfacePart = 214
    RULE_ruleInterfaceEndMember = 215
    RULE_ruleInterfaceEnd = 216
    RULE_ruleAllocationKeyword = 217
    RULE_ruleAllocationDefKeyword = 218
    RULE_ruleAllocationDefinition = 219
    RULE_ruleAllocationUsageKeyword = 220
    RULE_ruleAllocateKeyword = 221
    RULE_ruleAllocationUsage = 222
    RULE_ruleAllocationUsageDeclaration = 223
    RULE_ruleActionKeyword = 224
    RULE_ruleActionDefKeyword = 225
    RULE_ruleActionDefinition = 226
    RULE_ruleActionBody = 227
    RULE_ruleActionBodyItem = 228
    RULE_ruleInitialNodeMember = 229
    RULE_ruleActionNodeMember = 230
    RULE_ruleTargetSuccessionMember = 231
    RULE_ruleGuardedSuccessionMember = 232
    RULE_ruleActionUsageKeyword = 233
    RULE_ruleActionUsage = 234
    RULE_rulePerformActionUsage = 235
    RULE_rulePerformActionUsageDeclaration = 236
    RULE_ruleActionUsageDeclaration = 237
    RULE_ruleActionNode = 238
    RULE_ruleActionNodeUsageDeclaration = 239
    RULE_ruleActionNodePrefix = 240
    RULE_ruleAcceptNode = 241
    RULE_ruleAcceptNodeDeclaration = 242
    RULE_ruleAcceptParameterPart = 243
    RULE_rulePayloadParameterMember = 244
    RULE_rulePayloadParameter = 245
    RULE_ruleTriggerValuePart = 246
    RULE_ruleTriggerFeatureValue = 247
    RULE_ruleTriggerExpression = 248
    RULE_ruleTimeTriggerKind = 249
    RULE_ruleChangeTriggerKind = 250
    RULE_ruleArgumentExpressionMember = 251
    RULE_ruleArgumentExpression = 252
    RULE_ruleArgumentExpressionValue = 253
    RULE_ruleSendNode = 254
    RULE_ruleSendNodeDeclaration = 255
    RULE_ruleNodeParameterMember = 256
    RULE_ruleNodeParameter = 257
    RULE_ruleFeatureBinding = 258
    RULE_ruleAssignmentNode = 259
    RULE_ruleAssignmentNodeDeclaration = 260
    RULE_ruleAssignmentTargetMember = 261
    RULE_ruleTargetParameter = 262
    RULE_ruleTargetFeatureMember = 263
    RULE_ruleTargetFeature = 264
    RULE_ruleTargetAccessedFeatureMember = 265
    RULE_ruleTargetBinding = 266
    RULE_ruleTargetExpression = 267
    RULE_ruleExpressionParameterMember = 268
    RULE_ruleIfNode = 269
    RULE_ruleActionBodyParameterMember = 270
    RULE_ruleActionBodyParameter = 271
    RULE_ruleIfNodeParameterMember = 272
    RULE_ruleWhileLoopNode = 273
    RULE_ruleForLoopNode = 274
    RULE_ruleForVariableDeclarationMember = 275
    RULE_ruleForVariableDeclaration = 276
    RULE_ruleControlNode = 277
    RULE_ruleControlNodePrefix = 278
    RULE_ruleMergeNode = 279
    RULE_ruleDecisionNode = 280
    RULE_ruleJoinNode = 281
    RULE_ruleForkNode = 282
    RULE_ruleActionNodeBody = 283
    RULE_ruleEmptyParameterMember = 284
    RULE_ruleEmptyUsage = 285
    RULE_ruleActionTargetSuccession = 286
    RULE_ruleTargetSuccession = 287
    RULE_ruleGuardedTargetSuccession = 288
    RULE_ruleDefaultTargetSuccession = 289
    RULE_ruleGuardedSuccession = 290
    RULE_ruleStateKeyword = 291
    RULE_ruleStateDefKeyword = 292
    RULE_ruleStateDefinition = 293
    RULE_ruleStateDefBody = 294
    RULE_ruleStateBodyPart = 295
    RULE_ruleStateBodyItem = 296
    RULE_ruleEntryActionMember = 297
    RULE_ruleEntryActionKind = 298
    RULE_ruleDoActionMember = 299
    RULE_ruleDoActionKind = 300
    RULE_ruleExitActionMember = 301
    RULE_ruleExitActionKind = 302
    RULE_ruleEntryTransitionMember = 303
    RULE_ruleStateActionUsage = 304
    RULE_ruleEmptyActionUsage = 305
    RULE_rulePerformedActionUsage = 306
    RULE_ruleTransitionUsageMember = 307
    RULE_ruleTargetTransitionUsageMember = 308
    RULE_ruleStateUsageKeyword = 309
    RULE_ruleStateUsage = 310
    RULE_ruleStateUsageBody = 311
    RULE_ruleExhibitStateUsage = 312
    RULE_ruleTransitionUsageKeyword = 313
    RULE_ruleTransitionUsage = 314
    RULE_ruleTargetTransitionUsage = 315
    RULE_ruleTransitionSourceMember = 316
    RULE_ruleTriggerActionMember = 317
    RULE_ruleTriggerAction = 318
    RULE_ruleGuardExpressionMember = 319
    RULE_ruleEffectBehaviorMember = 320
    RULE_ruleEffectBehaviorUsage = 321
    RULE_ruleTransitionSuccessionMember = 322
    RULE_ruleTransitionSuccession = 323
    RULE_ruleCalculationKeyword = 324
    RULE_ruleCalculationDefKeyword = 325
    RULE_ruleCalculationDefinition = 326
    RULE_ruleCalculationBody = 327
    RULE_ruleCalculationBodyPart = 328
    RULE_ruleCalculationBodyItem = 329
    RULE_ruleReturnParameterMember = 330
    RULE_ruleResultExpressionMember = 331
    RULE_ruleCalculationUsageKeyword = 332
    RULE_ruleCalculationUsage = 333
    RULE_ruleConstraintKeyword = 334
    RULE_ruleConstraintDefKeyword = 335
    RULE_ruleConstraintDefinition = 336
    RULE_ruleConstraintUsageKeyword = 337
    RULE_ruleConstraintUsage = 338
    RULE_ruleAssertConstraintUsage = 339
    RULE_ruleConstraintUsageDeclaration = 340
    RULE_ruleRequirementKeyword = 341
    RULE_ruleRequirementDefKeyword = 342
    RULE_ruleRequirementDefinition = 343
    RULE_ruleRequirementBody = 344
    RULE_ruleRequirementBodyItem = 345
    RULE_ruleSubjectMember = 346
    RULE_ruleSubjectUsage = 347
    RULE_ruleRequirementConstraintMember = 348
    RULE_ruleRequirementConstraintUsage = 349
    RULE_ruleFramedConcernMember = 350
    RULE_ruleFramedConcernUsage = 351
    RULE_ruleActorMember = 352
    RULE_ruleActorUsage = 353
    RULE_ruleStakeholderMember = 354
    RULE_ruleStakeholderUsage = 355
    RULE_ruleRequirementUsageKeyword = 356
    RULE_ruleRequirementUsage = 357
    RULE_ruleSatisfyRequirementUsage = 358
    RULE_ruleSatisfactionSubjectMember = 359
    RULE_ruleSatisfactionParameter = 360
    RULE_ruleSatisfactionFeatureValue = 361
    RULE_ruleSatisfactionReferenceExpression = 362
    RULE_ruleConcernKeyword = 363
    RULE_ruleConcernDefKeyword = 364
    RULE_ruleConcernDefinition = 365
    RULE_ruleConcernUsageKeyword = 366
    RULE_ruleConcernUsage = 367
    RULE_ruleCaseKeyword = 368
    RULE_ruleCaseDefKeyword = 369
    RULE_ruleCaseDefinition = 370
    RULE_ruleCaseBody = 371
    RULE_ruleCaseBodyItem = 372
    RULE_ruleObjectiveMember = 373
    RULE_ruleObjectiveRequirementUsage = 374
    RULE_ruleCaseUsageKeyword = 375
    RULE_ruleCaseUsage = 376
    RULE_ruleAnalysisCaseKeyword = 377
    RULE_ruleAnalysisCaseDefKeyword = 378
    RULE_ruleAnalysisCaseUsageKeyword = 379
    RULE_ruleAnalysisCaseDefinition = 380
    RULE_ruleAnalysisCaseUsage = 381
    RULE_ruleVerificationCaseKeyword = 382
    RULE_ruleVerificationCaseDefKeyword = 383
    RULE_ruleVerificationCaseUsageKeyword = 384
    RULE_ruleVerificationCaseDefinition = 385
    RULE_ruleVerificationCaseUsage = 386
    RULE_ruleRequirementVerificationMember = 387
    RULE_ruleRequirementVerificationUsage = 388
    RULE_ruleUseCaseKeyword = 389
    RULE_ruleUseCaseDefKeyword = 390
    RULE_ruleUseCaseUsageKeyword = 391
    RULE_ruleUseCaseDefinition = 392
    RULE_ruleUseCaseUsage = 393
    RULE_ruleIncludeUseCaseUsage = 394
    RULE_ruleViewKeyword = 395
    RULE_ruleViewDefKeyword = 396
    RULE_ruleViewDefinition = 397
    RULE_ruleViewDefinitionBody = 398
    RULE_ruleViewDefinitionBodyItem = 399
    RULE_ruleViewRenderingMember = 400
    RULE_ruleViewRenderingUsage = 401
    RULE_ruleViewUsageKeyword = 402
    RULE_ruleViewUsage = 403
    RULE_ruleViewBody = 404
    RULE_ruleViewBodyItem = 405
    RULE_ruleExposePrefix = 406
    RULE_ruleExpose = 407
    RULE_ruleMembershipExpose = 408
    RULE_ruleNamespaceExpose = 409
    RULE_ruleViewpointKeyword = 410
    RULE_ruleViewpointDefKeyword = 411
    RULE_ruleViewpointUsageKeyword = 412
    RULE_ruleViewpointDefinition = 413
    RULE_ruleViewpointUsage = 414
    RULE_ruleRenderingKeyword = 415
    RULE_ruleRenderingDefKeyword = 416
    RULE_ruleRenderingDefinition = 417
    RULE_ruleRenderingUsageKeyword = 418
    RULE_ruleRenderingUsage = 419
    RULE_ruleExpressionBody = 420
    RULE_ruleOwnedExpressionMember = 421
    RULE_ruleOwnedExpression = 422
    RULE_ruleOwnedExpressionReference = 423
    RULE_ruleConditionalExpression = 424
    RULE_ruleConditionalOperator = 425
    RULE_ruleNullCoalescingExpression = 426
    RULE_ruleNullCoalescingOperator = 427
    RULE_ruleImpliesExpressionReference = 428
    RULE_ruleImpliesExpressionMember = 429
    RULE_ruleImpliesExpression = 430
    RULE_ruleImpliesOperator = 431
    RULE_ruleOrExpressionReference = 432
    RULE_ruleOrExpressionMember = 433
    RULE_ruleOrExpression = 434
    RULE_ruleOrOperator = 435
    RULE_ruleConditionalOrOperator = 436
    RULE_ruleXorExpressionReference = 437
    RULE_ruleXorExpressionMember = 438
    RULE_ruleXorExpression = 439
    RULE_ruleXorOperator = 440
    RULE_ruleAndExpression = 441
    RULE_ruleAndOperator = 442
    RULE_ruleConditionalAndOperator = 443
    RULE_ruleEqualityExpressionReference = 444
    RULE_ruleEqualityExpressionMember = 445
    RULE_ruleEqualityExpression = 446
    RULE_ruleEqualityOperator = 447
    RULE_ruleClassificationExpression = 448
    RULE_ruleClassificationTestOperator = 449
    RULE_ruleMetaClassificationTestOperator = 450
    RULE_ruleCastOperator = 451
    RULE_ruleMetaCastOperator = 452
    RULE_ruleMetadataReference = 453
    RULE_ruleTypeReferenceMember = 454
    RULE_ruleTypeResultMember = 455
    RULE_ruleTypeReference = 456
    RULE_ruleReferenceTyping = 457
    RULE_ruleSelfReferenceExpression = 458
    RULE_ruleSelfReferenceMember = 459
    RULE_ruleEmptyFeature = 460
    RULE_ruleRelationalExpression = 461
    RULE_ruleRelationalOperator = 462
    RULE_ruleRangeExpression = 463
    RULE_ruleAdditiveExpression = 464
    RULE_ruleAdditiveOperator = 465
    RULE_ruleMultiplicativeExpression = 466
    RULE_ruleMultiplicativeOperator = 467
    RULE_ruleExponentiationExpression = 468
    RULE_ruleExponentiationOperator = 469
    RULE_ruleUnaryExpression = 470
    RULE_ruleUnaryOperator = 471
    RULE_ruleExtentExpression = 472
    RULE_rulePrimaryExpression = 473
    RULE_ruleFunctionReferenceExpression = 474
    RULE_ruleFunctionReferenceMember = 475
    RULE_ruleFunctionReference = 476
    RULE_ruleFeatureChainMember = 477
    RULE_ruleBaseExpression = 478
    RULE_ruleBodyExpression = 479
    RULE_ruleExpressionBodyMember = 480
    RULE_ruleBodyParameter = 481
    RULE_ruleSequenceExpression = 482
    RULE_ruleFeatureReferenceExpression = 483
    RULE_ruleFeatureReferenceMember = 484
    RULE_ruleMetadataAccessExpression = 485
    RULE_ruleInvocationExpression = 486
    RULE_ruleOwnedFeatureTyping = 487
    RULE_ruleOwnedFeatureChain = 488
    RULE_ruleFeatureChain = 489
    RULE_ruleOwnedFeatureChaining = 490
    RULE_ruleArgumentList = 491
    RULE_rulePositionalArgumentList = 492
    RULE_ruleArgumentMember = 493
    RULE_ruleArgument = 494
    RULE_ruleNamedArgumentList = 495
    RULE_ruleNamedArgumentMember = 496
    RULE_ruleNamedArgument = 497
    RULE_ruleParameterRedefinition = 498
    RULE_ruleArgumentValue = 499
    RULE_ruleNullExpression = 500
    RULE_ruleLiteralExpression = 501
    RULE_ruleLiteralBoolean = 502
    RULE_ruleBooleanValue = 503
    RULE_ruleLiteralString = 504
    RULE_ruleLiteralInteger = 505
    RULE_ruleLiteralReal = 506
    RULE_ruleRealValue = 507
    RULE_ruleLiteralInfinity = 508
    RULE_ruleName = 509
    RULE_ruleQualification = 510
    RULE_ruleQualifiedName = 511
    RULE_ruleFilterPackageMemberVisibility = 512
    RULE_ruleVisibilityIndicator = 513
    RULE_ruleFeatureDirection = 514
    RULE_rulePortionKind = 515
    RULE_ruleTriggerFeatureKind = 516
    RULE_ruleGuardFeatureKind = 517
    RULE_ruleEffectFeatureKind = 518
    RULE_ruleRequirementConstraintKind = 519
    RULE_ruleFramedConcernKind = 520
    RULE_ruleRequirementVerificationKind = 521

    ruleNames =  [ "entryRuleRootNamespace", "ruleRootNamespace", "ruleIdentification", 
                   "ruleRelationshipBody", "ruleDependency", "ruleAnnotation", 
                   "ruleOwnedAnnotation", "ruleAnnotatingMember", "ruleAnnotatingElement", 
                   "ruleComment", "ruleDocumentation", "ruleTextualRepresentation", 
                   "ruleMetadataKeyword", "ruleMetadataDefKeyword", "ruleMetadataUsageKeyword", 
                   "ruleMetadataDefinition", "rulePrefixMetadataAnnotation", 
                   "rulePrefixMetadataMember", "rulePrefixMetadataUsage", 
                   "ruleMetadataUsage", "ruleMetadataUsageDeclaration", 
                   "ruleMetadataTyping", "ruleMetadataBody", "ruleMetadataBodyUsageMember", 
                   "ruleMetadataBodyUsage", "rulePackage", "ruleLibraryPackage", 
                   "rulePackageDeclaration", "rulePackageBody", "rulePackageBodyElement", 
                   "ruleMemberPrefix", "rulePackageMember", "ruleElementFilterMember", 
                   "ruleAliasMember", "ruleImportPrefix", "ruleImport", 
                   "ruleMembershipImport", "ruleImportedMembership", "ruleNamespaceImport", 
                   "ruleImportedNamespace", "ruleFilterPackage", "ruleFilterPackageImport", 
                   "ruleFilterPackageMembershipImport", "ruleFilterPackageNamespaceImport", 
                   "ruleFilterPackageMember", "ruleDefinitionElement", "ruleUsageElement", 
                   "ruleSubclassificationPart", "ruleSpecializesKeyword", 
                   "ruleOwnedSubclassification", "ruleFeatureDeclaration", 
                   "ruleFeatureSpecializationPart", "ruleMultiplicityPart", 
                   "ruleFeatureSpecialization", "ruleTypings", "ruleTypedBy", 
                   "ruleDefinedByKeyword", "ruleSubsettings", "ruleSubsets", 
                   "ruleSubsetsKeyword", "ruleReferences", "ruleReferencesKeyword", 
                   "ruleRedefinitions", "ruleRedefines", "ruleRedefinesKeyword", 
                   "ruleFeatureTyping", "ruleOwnedSubsetting", "ruleOwnedReferenceSubsetting", 
                   "ruleOwnedRedefinition", "ruleOwnedMultiplicity", "ruleMultiplicityRange", 
                   "ruleMultiplicityExpressionMember", "ruleBasicDefinitionPrefix", 
                   "ruleDefinitionExtensionKeyword", "ruleDefinitionPrefix", 
                   "ruleDefinition", "ruleDefinitionDeclaration", "ruleDefinitionBody", 
                   "ruleDefinitionBodyItem", "ruleDefinitionMember", "ruleVariantUsageMember", 
                   "ruleNonOccurrenceUsageMember", "ruleOccurrenceUsageMember", 
                   "ruleStructureUsageMember", "ruleBehaviorUsageMember", 
                   "ruleRefPrefix", "ruleBasicUsagePrefix", "ruleUsageExtensionKeyword", 
                   "ruleUsagePrefix", "ruleUsage", "ruleUsageDeclaration", 
                   "ruleUsageCompletion", "ruleUsageBody", "ruleValuePart", 
                   "ruleFeatureValue", "ruleReferenceKeyword", "ruleReferenceUsageKeyword", 
                   "ruleDefaultReferenceUsage", "ruleReferenceUsage", "ruleVariantReference", 
                   "ruleNonOccurrenceUsageElement", "ruleOccurrenceUsageElement", 
                   "ruleStructureUsageElement", "ruleBehaviorUsageElement", 
                   "ruleVariantUsageElement", "ruleExtendedDefinition", 
                   "ruleExtendedUsage", "ruleAttributeKeyword", "ruleAttributeDefKeyword", 
                   "ruleAttributeUsageKeyword", "ruleAttributeDefinition", 
                   "ruleAttributeUsage", "ruleEnumerationKeyword", "ruleEnumerationDefKeyword", 
                   "ruleEnumerationUsageKeyword", "ruleEnumerationDefinition", 
                   "ruleEnumerationBody", "ruleEnumerationUsageMember", 
                   "ruleEnumeratedValue", "ruleEnumerationUsage", "ruleOccurrenceKeyword", 
                   "ruleOccurrenceDefKeyword", "ruleOccurrenceDefinitionPrefix", 
                   "ruleOccurrenceDefinition", "ruleIndividualDefinition", 
                   "ruleLifeClassMembership", "ruleLifeClass", "ruleOccurrenceUsageKeyword", 
                   "ruleOccurrenceUsagePrefix", "ruleOccurrenceUsage", "ruleIndividualUsage", 
                   "rulePortionUsage", "ruleEventOccurrenceUsage", "ruleEmptySuccessionMember", 
                   "ruleEmptySuccession", "ruleMultiplicitySourceEndMember", 
                   "ruleMultiplicitySourceEnd", "ruleEmptyTargetEndMember", 
                   "ruleEmptyTargetEnd", "ruleItemKeyword", "ruleItemDefKeyword", 
                   "ruleItemUsageKeyword", "ruleItemDefinition", "ruleItemUsage", 
                   "rulePartKeyword", "rulePartDefKeyword", "rulePartUsageKeyword", 
                   "rulePartDefinition", "rulePartUsage", "rulePortKeyword", 
                   "rulePortDefKeyword", "rulePortDefinition", "ruleConjugatedPortDefinitionMember", 
                   "ruleConjugatedPortDefinition", "rulePortConjugation", 
                   "ruleConjugatedPortTyping", "ruleConjugatedQualifiedName", 
                   "rulePortUsageKeyword", "rulePortUsage", "ruleConnectorEndMember", 
                   "ruleConnectorEnd", "ruleBindingKeyword", "ruleBindingConnectorAsUsage", 
                   "ruleSuccessionKeyword", "ruleSuccessionAsUsage", "ruleConnectionKeyword", 
                   "ruleConnectionDefKeyword", "ruleConnectionDefinition", 
                   "ruleConnectorKeyword", "ruleConnectionUsageKeyword", 
                   "ruleConnectionUsage", "ruleConnectorPart", "ruleBinaryConnectorPart", 
                   "ruleNaryConnectorPart", "ruleEmptySourceEndMember", 
                   "ruleEmptySourceEnd", "ruleFlowConnectionKeyword", "ruleFlowConnectionDefKeyword", 
                   "ruleFlowConnectionDefinition", "ruleMessageKeyword", 
                   "ruleMessage", "ruleMessageDeclaration", "ruleMessageEventMember", 
                   "ruleMessageEvent", "ruleFlowConnectionUsage", "ruleSuccessionFlowConnectionKeyword", 
                   "ruleSuccessionFlowConnectionUsage", "ruleFlowConnectionDeclaration", 
                   "ruleItemFeatureMember", "ruleItemFeature", "rulePayloadFeature", 
                   "rulePayloadFeatureSpecializationPart", "ruleFlowEndMember", 
                   "ruleFlowEnd", "ruleFlowEndSubsetting", "ruleFeatureChainPrefix", 
                   "ruleFlowFeatureMember", "ruleFlowFeature", "ruleFlowRedefinition", 
                   "ruleInterfaceKeyword", "ruleInterfaceDefKeyword", "ruleInterfaceDefinition", 
                   "ruleInterfaceBody", "ruleInterfaceBodyItem", "ruleInterfaceNonOccurrenceUsageMember", 
                   "ruleInterfaceNonOccurrenceUsageElement", "ruleInterfaceOccurrenceUsageMember", 
                   "ruleInterfaceOccurrenceUsageElement", "ruleDefaultInterfaceEnd", 
                   "ruleInterfaceUsageKeyword", "ruleInterfaceUsage", "ruleInterfaceUsageDeclaration", 
                   "ruleInterfacePart", "ruleBinaryInterfacePart", "ruleNaryInterfacePart", 
                   "ruleInterfaceEndMember", "ruleInterfaceEnd", "ruleAllocationKeyword", 
                   "ruleAllocationDefKeyword", "ruleAllocationDefinition", 
                   "ruleAllocationUsageKeyword", "ruleAllocateKeyword", 
                   "ruleAllocationUsage", "ruleAllocationUsageDeclaration", 
                   "ruleActionKeyword", "ruleActionDefKeyword", "ruleActionDefinition", 
                   "ruleActionBody", "ruleActionBodyItem", "ruleInitialNodeMember", 
                   "ruleActionNodeMember", "ruleTargetSuccessionMember", 
                   "ruleGuardedSuccessionMember", "ruleActionUsageKeyword", 
                   "ruleActionUsage", "rulePerformActionUsage", "rulePerformActionUsageDeclaration", 
                   "ruleActionUsageDeclaration", "ruleActionNode", "ruleActionNodeUsageDeclaration", 
                   "ruleActionNodePrefix", "ruleAcceptNode", "ruleAcceptNodeDeclaration", 
                   "ruleAcceptParameterPart", "rulePayloadParameterMember", 
                   "rulePayloadParameter", "ruleTriggerValuePart", "ruleTriggerFeatureValue", 
                   "ruleTriggerExpression", "ruleTimeTriggerKind", "ruleChangeTriggerKind", 
                   "ruleArgumentExpressionMember", "ruleArgumentExpression", 
                   "ruleArgumentExpressionValue", "ruleSendNode", "ruleSendNodeDeclaration", 
                   "ruleNodeParameterMember", "ruleNodeParameter", "ruleFeatureBinding", 
                   "ruleAssignmentNode", "ruleAssignmentNodeDeclaration", 
                   "ruleAssignmentTargetMember", "ruleTargetParameter", 
                   "ruleTargetFeatureMember", "ruleTargetFeature", "ruleTargetAccessedFeatureMember", 
                   "ruleTargetBinding", "ruleTargetExpression", "ruleExpressionParameterMember", 
                   "ruleIfNode", "ruleActionBodyParameterMember", "ruleActionBodyParameter", 
                   "ruleIfNodeParameterMember", "ruleWhileLoopNode", "ruleForLoopNode", 
                   "ruleForVariableDeclarationMember", "ruleForVariableDeclaration", 
                   "ruleControlNode", "ruleControlNodePrefix", "ruleMergeNode", 
                   "ruleDecisionNode", "ruleJoinNode", "ruleForkNode", "ruleActionNodeBody", 
                   "ruleEmptyParameterMember", "ruleEmptyUsage", "ruleActionTargetSuccession", 
                   "ruleTargetSuccession", "ruleGuardedTargetSuccession", 
                   "ruleDefaultTargetSuccession", "ruleGuardedSuccession", 
                   "ruleStateKeyword", "ruleStateDefKeyword", "ruleStateDefinition", 
                   "ruleStateDefBody", "ruleStateBodyPart", "ruleStateBodyItem", 
                   "ruleEntryActionMember", "ruleEntryActionKind", "ruleDoActionMember", 
                   "ruleDoActionKind", "ruleExitActionMember", "ruleExitActionKind", 
                   "ruleEntryTransitionMember", "ruleStateActionUsage", 
                   "ruleEmptyActionUsage", "rulePerformedActionUsage", "ruleTransitionUsageMember", 
                   "ruleTargetTransitionUsageMember", "ruleStateUsageKeyword", 
                   "ruleStateUsage", "ruleStateUsageBody", "ruleExhibitStateUsage", 
                   "ruleTransitionUsageKeyword", "ruleTransitionUsage", 
                   "ruleTargetTransitionUsage", "ruleTransitionSourceMember", 
                   "ruleTriggerActionMember", "ruleTriggerAction", "ruleGuardExpressionMember", 
                   "ruleEffectBehaviorMember", "ruleEffectBehaviorUsage", 
                   "ruleTransitionSuccessionMember", "ruleTransitionSuccession", 
                   "ruleCalculationKeyword", "ruleCalculationDefKeyword", 
                   "ruleCalculationDefinition", "ruleCalculationBody", "ruleCalculationBodyPart", 
                   "ruleCalculationBodyItem", "ruleReturnParameterMember", 
                   "ruleResultExpressionMember", "ruleCalculationUsageKeyword", 
                   "ruleCalculationUsage", "ruleConstraintKeyword", "ruleConstraintDefKeyword", 
                   "ruleConstraintDefinition", "ruleConstraintUsageKeyword", 
                   "ruleConstraintUsage", "ruleAssertConstraintUsage", "ruleConstraintUsageDeclaration", 
                   "ruleRequirementKeyword", "ruleRequirementDefKeyword", 
                   "ruleRequirementDefinition", "ruleRequirementBody", "ruleRequirementBodyItem", 
                   "ruleSubjectMember", "ruleSubjectUsage", "ruleRequirementConstraintMember", 
                   "ruleRequirementConstraintUsage", "ruleFramedConcernMember", 
                   "ruleFramedConcernUsage", "ruleActorMember", "ruleActorUsage", 
                   "ruleStakeholderMember", "ruleStakeholderUsage", "ruleRequirementUsageKeyword", 
                   "ruleRequirementUsage", "ruleSatisfyRequirementUsage", 
                   "ruleSatisfactionSubjectMember", "ruleSatisfactionParameter", 
                   "ruleSatisfactionFeatureValue", "ruleSatisfactionReferenceExpression", 
                   "ruleConcernKeyword", "ruleConcernDefKeyword", "ruleConcernDefinition", 
                   "ruleConcernUsageKeyword", "ruleConcernUsage", "ruleCaseKeyword", 
                   "ruleCaseDefKeyword", "ruleCaseDefinition", "ruleCaseBody", 
                   "ruleCaseBodyItem", "ruleObjectiveMember", "ruleObjectiveRequirementUsage", 
                   "ruleCaseUsageKeyword", "ruleCaseUsage", "ruleAnalysisCaseKeyword", 
                   "ruleAnalysisCaseDefKeyword", "ruleAnalysisCaseUsageKeyword", 
                   "ruleAnalysisCaseDefinition", "ruleAnalysisCaseUsage", 
                   "ruleVerificationCaseKeyword", "ruleVerificationCaseDefKeyword", 
                   "ruleVerificationCaseUsageKeyword", "ruleVerificationCaseDefinition", 
                   "ruleVerificationCaseUsage", "ruleRequirementVerificationMember", 
                   "ruleRequirementVerificationUsage", "ruleUseCaseKeyword", 
                   "ruleUseCaseDefKeyword", "ruleUseCaseUsageKeyword", "ruleUseCaseDefinition", 
                   "ruleUseCaseUsage", "ruleIncludeUseCaseUsage", "ruleViewKeyword", 
                   "ruleViewDefKeyword", "ruleViewDefinition", "ruleViewDefinitionBody", 
                   "ruleViewDefinitionBodyItem", "ruleViewRenderingMember", 
                   "ruleViewRenderingUsage", "ruleViewUsageKeyword", "ruleViewUsage", 
                   "ruleViewBody", "ruleViewBodyItem", "ruleExposePrefix", 
                   "ruleExpose", "ruleMembershipExpose", "ruleNamespaceExpose", 
                   "ruleViewpointKeyword", "ruleViewpointDefKeyword", "ruleViewpointUsageKeyword", 
                   "ruleViewpointDefinition", "ruleViewpointUsage", "ruleRenderingKeyword", 
                   "ruleRenderingDefKeyword", "ruleRenderingDefinition", 
                   "ruleRenderingUsageKeyword", "ruleRenderingUsage", "ruleExpressionBody", 
                   "ruleOwnedExpressionMember", "ruleOwnedExpression", "ruleOwnedExpressionReference", 
                   "ruleConditionalExpression", "ruleConditionalOperator", 
                   "ruleNullCoalescingExpression", "ruleNullCoalescingOperator", 
                   "ruleImpliesExpressionReference", "ruleImpliesExpressionMember", 
                   "ruleImpliesExpression", "ruleImpliesOperator", "ruleOrExpressionReference", 
                   "ruleOrExpressionMember", "ruleOrExpression", "ruleOrOperator", 
                   "ruleConditionalOrOperator", "ruleXorExpressionReference", 
                   "ruleXorExpressionMember", "ruleXorExpression", "ruleXorOperator", 
                   "ruleAndExpression", "ruleAndOperator", "ruleConditionalAndOperator", 
                   "ruleEqualityExpressionReference", "ruleEqualityExpressionMember", 
                   "ruleEqualityExpression", "ruleEqualityOperator", "ruleClassificationExpression", 
                   "ruleClassificationTestOperator", "ruleMetaClassificationTestOperator", 
                   "ruleCastOperator", "ruleMetaCastOperator", "ruleMetadataReference", 
                   "ruleTypeReferenceMember", "ruleTypeResultMember", "ruleTypeReference", 
                   "ruleReferenceTyping", "ruleSelfReferenceExpression", 
                   "ruleSelfReferenceMember", "ruleEmptyFeature", "ruleRelationalExpression", 
                   "ruleRelationalOperator", "ruleRangeExpression", "ruleAdditiveExpression", 
                   "ruleAdditiveOperator", "ruleMultiplicativeExpression", 
                   "ruleMultiplicativeOperator", "ruleExponentiationExpression", 
                   "ruleExponentiationOperator", "ruleUnaryExpression", 
                   "ruleUnaryOperator", "ruleExtentExpression", "rulePrimaryExpression", 
                   "ruleFunctionReferenceExpression", "ruleFunctionReferenceMember", 
                   "ruleFunctionReference", "ruleFeatureChainMember", "ruleBaseExpression", 
                   "ruleBodyExpression", "ruleExpressionBodyMember", "ruleBodyParameter", 
                   "ruleSequenceExpression", "ruleFeatureReferenceExpression", 
                   "ruleFeatureReferenceMember", "ruleMetadataAccessExpression", 
                   "ruleInvocationExpression", "ruleOwnedFeatureTyping", 
                   "ruleOwnedFeatureChain", "ruleFeatureChain", "ruleOwnedFeatureChaining", 
                   "ruleArgumentList", "rulePositionalArgumentList", "ruleArgumentMember", 
                   "ruleArgument", "ruleNamedArgumentList", "ruleNamedArgumentMember", 
                   "ruleNamedArgument", "ruleParameterRedefinition", "ruleArgumentValue", 
                   "ruleNullExpression", "ruleLiteralExpression", "ruleLiteralBoolean", 
                   "ruleBooleanValue", "ruleLiteralString", "ruleLiteralInteger", 
                   "ruleLiteralReal", "ruleRealValue", "ruleLiteralInfinity", 
                   "ruleName", "ruleQualification", "ruleQualifiedName", 
                   "ruleFilterPackageMemberVisibility", "ruleVisibilityIndicator", 
                   "ruleFeatureDirection", "rulePortionKind", "ruleTriggerFeatureKind", 
                   "ruleGuardFeatureKind", "ruleEffectFeatureKind", "ruleRequirementConstraintKind", 
                   "ruleFramedConcernKind", "ruleRequirementVerificationKind" ]

    EOF = Token.EOF
    K_DEPENDENCY=1
    K_FROM=2
    K_TO=3
    K_COMMENT=4
    K_ABOUT=5
    K_LOCALE=6
    K_DOC=7
    K_REP=8
    K_LANGUAGE=9
    K_METADATA=10
    K_DEF=11
    K_ABSTRACT=12
    K_REF=13
    K_REDEFINES=14
    K_STANDARD=15
    K_LIBRARY=16
    K_PACKAGE=17
    K_FILTER=18
    K_ALIAS=19
    K_FOR=20
    K_IMPORT=21
    K_ALL=22
    K_SPECIALIZES=23
    K_ORDERED=24
    K_NONUNIQUE=25
    K_DEFINED=26
    K_BY=27
    K_SUBSETS=28
    K_REFERENCES=29
    K_VARIATION=30
    K_VARIANT=31
    K_READONLY=32
    K_DERIVED=33
    K_END=34
    K_DEFAULT=35
    K_ATTRIBUTE=36
    K_ENUM=37
    K_OCCURRENCE=38
    K_INDIVIDUAL=39
    K_EVENT=40
    K_THEN=41
    K_ITEM=42
    K_PART=43
    K_PORT=44
    K_BINDING=45
    K_BIND=46
    K_SUCCESSION=47
    K_FIRST=48
    K_CONNECTION=49
    K_CONNECT=50
    K_FLOW=51
    K_MESSAGE=52
    K_OF=53
    K_INTERFACE=54
    K_ALLOCATION=55
    K_ALLOCATE=56
    K_ACTION=57
    K_PERFORM=58
    K_ACCEPT=59
    K_VIA=60
    K_AT=61
    K_AFTER=62
    K_WHEN=63
    K_SEND=64
    K_ASSIGN=65
    K_IF=66
    K_ELSE=67
    K_WHILE=68
    K_LOOP=69
    K_UNTIL=70
    K_IN=71
    K_MERGE=72
    K_DECIDE=73
    K_JOIN=74
    K_FORK=75
    K_STATE=76
    K_PARALLEL=77
    K_ENTRY=78
    K_DO=79
    K_EXIT=80
    K_EXHIBIT=81
    K_TRANSITION=82
    K_CALC=83
    K_RETURN=84
    K_CONSTRAINT=85
    K_ASSERT=86
    K_NOT=87
    K_REQUIREMENT=88
    K_SUBJECT=89
    K_ACTOR=90
    K_STAKEHOLDER=91
    K_SATISFY=92
    K_CONCERN=93
    K_CASE=94
    K_OBJECTIVE=95
    K_ANALYSIS=96
    K_VERIFICATION=97
    K_USE=98
    K_INCLUDE=99
    K_VIEW=100
    K_RENDER=101
    K_RENDERING=102
    K_EXPOSE=103
    K_VIEWPOINT=104
    K_IMPLIES=105
    K_OR=106
    K_XOR=107
    K_AND=108
    K_HASTYPE=109
    K_ISTYPE=110
    K_AS=111
    K_META=112
    K_NULL=113
    K_TRUE=114
    K_FALSE=115
    K_PUBLIC=116
    K_PRIVATE=117
    K_PROTECTED=118
    K_OUT=119
    K_INOUT=120
    K_SNAPSHOT=121
    K_TIMESLICE=122
    K_ASSUME=123
    K_REQUIRE=124
    K_FRAME=125
    K_VERIFY=126
    LANGLE=127
    RANGLE=128
    LBRACE=129
    RBRACE=130
    RSQUARE=131
    LSQUARE=132
    LPAREN=133
    RPAREN=134
    OP_SEMI=135
    OP_COMMA=136
    OP_AT=137
    OP_HASH=138
    OP_COLON_RANGLE_RANGLE=139
    OP_COLON_COLON=140
    OP_STAR_STAR=141
    OP_STAR=142
    OP_COLON_RANGLE=143
    OP_COLON=144
    OP_COLON_COLON_RANGLE=145
    OP_DOT_DOT=146
    OP_EQ=147
    OP_COLON_EQ=148
    OP_TILDE=149
    OP_DOT=150
    OP_MINUS_RANGLE=151
    OP_DOT_QMARK=152
    OP_QMARK=153
    OP_QMARK_QMARK=154
    OP_BAR=155
    OP_AND=156
    OP_EQ_EQ=157
    OP_BANG_EQ=158
    OP_EQ_EQ_EQ=159
    OP_BANG_EQ_EQ=160
    OP_AT_AT=161
    OP_LANGLE_EQ=162
    OP_RANGLE_EQ=163
    OP_PLUS=164
    OP_MINUS=165
    OP_SLASH=166
    OP_PERCENT=167
    OP_HAT=168
    RULE_DECIMAL_VALUE=169
    RULE_EXP_VALUE=170
    RULE_ID=171
    RULE_UNRESTRICTED_NAME=172
    RULE_STRING_VALUE=173
    RULE_REGULAR_COMMENT=174
    RULE_ML_NOTE=175
    RULE_SL_NOTE=176
    RULE_WS=177

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class EntryRuleRootNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRootNamespace(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRootNamespaceContext,0)


        def EOF(self):
            return self.getToken(SysMLv2Parser.EOF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_entryRuleRootNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntryRuleRootNamespace" ):
                listener.enterEntryRuleRootNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntryRuleRootNamespace" ):
                listener.exitEntryRuleRootNamespace(self)




    def entryRuleRootNamespace(self):

        localctx = SysMLv2Parser.EntryRuleRootNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_entryRuleRootNamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.ruleRootNamespace()
            self.state = 1045
            self.match(SysMLv2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRootNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePackageBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RulePackageBodyElementContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RulePackageBodyElementContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRootNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRootNamespace" ):
                listener.enterRuleRootNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRootNamespace" ):
                listener.exitRuleRootNamespace(self)




    def ruleRootNamespace(self):

        localctx = SysMLv2Parser.RuleRootNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_ruleRootNamespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 567451317370353618) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2382369030299440161) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 188978561479) != 0):
                self.state = 1047
                self.rulePackageBodyElement()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleIdentificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleIdentification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleIdentification2Context(RuleIdentificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleIdentificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleIdentification2" ):
                listener.enterRuleIdentification2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleIdentification2" ):
                listener.exitRuleIdentification2(self)


    class RuleIdentification1Context(RuleIdentificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleIdentificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LANGLE(self):
            return self.getToken(SysMLv2Parser.LANGLE, 0)
        def ruleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleNameContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleNameContext,i)

        def RANGLE(self):
            return self.getToken(SysMLv2Parser.RANGLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleIdentification1" ):
                listener.enterRuleIdentification1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleIdentification1" ):
                listener.exitRuleIdentification1(self)



    def ruleIdentification(self):

        localctx = SysMLv2Parser.RuleIdentificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ruleIdentification)
        self._la = 0 # Token type
        try:
            self.state = 1060
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                localctx = SysMLv2Parser.RuleIdentification1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1053
                self.match(SysMLv2Parser.LANGLE)
                self.state = 1054
                self.ruleName()
                self.state = 1055
                self.match(SysMLv2Parser.RANGLE)
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171 or _la==172:
                    self.state = 1056
                    self.ruleName()


                pass
            elif token in [171, 172]:
                localctx = SysMLv2Parser.RuleIdentification2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1059
                self.ruleName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRelationshipBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRelationshipBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleRelationshipBody1Context(RuleRelationshipBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRelationshipBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRelationshipBody1" ):
                listener.enterRuleRelationshipBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRelationshipBody1" ):
                listener.exitRuleRelationshipBody1(self)


    class RuleRelationshipBody2Context(RuleRelationshipBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRelationshipBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleOwnedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleOwnedAnnotationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedAnnotationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRelationshipBody2" ):
                listener.enterRuleRelationshipBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRelationshipBody2" ):
                listener.exitRuleRelationshipBody2(self)



    def ruleRelationshipBody(self):

        localctx = SysMLv2Parser.RuleRelationshipBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_ruleRelationshipBody)
        self._la = 0 # Token type
        try:
            self.state = 1071
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleRelationshipBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleRelationshipBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.match(SysMLv2Parser.LBRACE)
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2000) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 137438953475) != 0):
                    self.state = 1064
                    self.ruleOwnedAnnotation()
                    self.state = 1069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1070
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DEPENDENCY(self):
            return self.getToken(SysMLv2Parser.K_DEPENDENCY, 0)

        def ruleQualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleQualifiedNameContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,i)


        def K_TO(self):
            return self.getToken(SysMLv2Parser.K_TO, 0)

        def ruleRelationshipBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRelationshipBodyContext,0)


        def rulePrefixMetadataAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RulePrefixMetadataAnnotationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RulePrefixMetadataAnnotationContext,i)


        def K_FROM(self):
            return self.getToken(SysMLv2Parser.K_FROM, 0)

        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDependency" ):
                listener.enterRuleDependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDependency" ):
                listener.exitRuleDependency(self)




    def ruleDependency(self):

        localctx = SysMLv2Parser.RuleDependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ruleDependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1073
                self.rulePrefixMetadataAnnotation()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1079
            self.match(SysMLv2Parser.K_DEPENDENCY)
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                    self.state = 1080
                    self.ruleIdentification()


                self.state = 1083
                self.match(SysMLv2Parser.K_FROM)


            self.state = 1086
            self.ruleQualifiedName()
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1087
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 1088
                self.ruleQualifiedName()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1094
            self.match(SysMLv2Parser.K_TO)
            self.state = 1095
            self.ruleQualifiedName()
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1096
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 1097
                self.ruleQualifiedName()
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1103
            self.ruleRelationshipBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnnotation" ):
                listener.enterRuleAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnnotation" ):
                listener.exitRuleAnnotation(self)




    def ruleAnnotation(self):

        localctx = SysMLv2Parser.RuleAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ruleAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAnnotatingElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAnnotatingElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedAnnotation" ):
                listener.enterRuleOwnedAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedAnnotation" ):
                listener.exitRuleOwnedAnnotation(self)




    def ruleOwnedAnnotation(self):

        localctx = SysMLv2Parser.RuleOwnedAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_ruleOwnedAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.ruleAnnotatingElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAnnotatingMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAnnotatingElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAnnotatingElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAnnotatingMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnnotatingMember" ):
                listener.enterRuleAnnotatingMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnnotatingMember" ):
                listener.exitRuleAnnotatingMember(self)




    def ruleAnnotatingMember(self):

        localctx = SysMLv2Parser.RuleAnnotatingMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_ruleAnnotatingMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.ruleAnnotatingElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAnnotatingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAnnotatingElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleAnnotatingElement1Context(RuleAnnotatingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleAnnotatingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleComment(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCommentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnnotatingElement1" ):
                listener.enterRuleAnnotatingElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnnotatingElement1" ):
                listener.exitRuleAnnotatingElement1(self)


    class RuleAnnotatingElement2Context(RuleAnnotatingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleAnnotatingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDocumentation(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDocumentationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnnotatingElement2" ):
                listener.enterRuleAnnotatingElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnnotatingElement2" ):
                listener.exitRuleAnnotatingElement2(self)


    class RuleAnnotatingElement3Context(RuleAnnotatingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleAnnotatingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleTextualRepresentation(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTextualRepresentationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnnotatingElement3" ):
                listener.enterRuleAnnotatingElement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnnotatingElement3" ):
                listener.exitRuleAnnotatingElement3(self)


    class RuleAnnotatingElement4Context(RuleAnnotatingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleAnnotatingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMetadataUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnnotatingElement4" ):
                listener.enterRuleAnnotatingElement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnnotatingElement4" ):
                listener.exitRuleAnnotatingElement4(self)



    def ruleAnnotatingElement(self):

        localctx = SysMLv2Parser.RuleAnnotatingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_ruleAnnotatingElement)
        try:
            self.state = 1115
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 6, 174]:
                localctx = SysMLv2Parser.RuleAnnotatingElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.ruleComment()
                pass
            elif token in [7]:
                localctx = SysMLv2Parser.RuleAnnotatingElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.ruleDocumentation()
                pass
            elif token in [8, 9]:
                localctx = SysMLv2Parser.RuleAnnotatingElement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1113
                self.ruleTextualRepresentation()
                pass
            elif token in [10, 137, 138]:
                localctx = SysMLv2Parser.RuleAnnotatingElement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1114
                self.ruleMetadataUsage()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_REGULAR_COMMENT(self):
            return self.getToken(SysMLv2Parser.RULE_REGULAR_COMMENT, 0)

        def K_COMMENT(self):
            return self.getToken(SysMLv2Parser.K_COMMENT, 0)

        def K_LOCALE(self):
            return self.getToken(SysMLv2Parser.K_LOCALE, 0)

        def RULE_STRING_VALUE(self):
            return self.getToken(SysMLv2Parser.RULE_STRING_VALUE, 0)

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)


        def K_ABOUT(self):
            return self.getToken(SysMLv2Parser.K_ABOUT, 0)

        def ruleAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAnnotationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAnnotationContext,i)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleComment" ):
                listener.enterRuleComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleComment" ):
                listener.exitRuleComment(self)




    def ruleComment(self):

        localctx = SysMLv2Parser.RuleCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_ruleComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 1117
                self.match(SysMLv2Parser.K_COMMENT)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                    self.state = 1118
                    self.ruleIdentification()


                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 1121
                    self.match(SysMLv2Parser.K_ABOUT)
                    self.state = 1122
                    self.ruleAnnotation()
                    self.state = 1127
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==136:
                        self.state = 1123
                        self.match(SysMLv2Parser.OP_COMMA)
                        self.state = 1124
                        self.ruleAnnotation()
                        self.state = 1129
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)





            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 1134
                self.match(SysMLv2Parser.K_LOCALE)
                self.state = 1135
                self.match(SysMLv2Parser.RULE_STRING_VALUE)


            self.state = 1138
            self.match(SysMLv2Parser.RULE_REGULAR_COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDocumentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DOC(self):
            return self.getToken(SysMLv2Parser.K_DOC, 0)

        def RULE_REGULAR_COMMENT(self):
            return self.getToken(SysMLv2Parser.RULE_REGULAR_COMMENT, 0)

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)


        def K_LOCALE(self):
            return self.getToken(SysMLv2Parser.K_LOCALE, 0)

        def RULE_STRING_VALUE(self):
            return self.getToken(SysMLv2Parser.RULE_STRING_VALUE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDocumentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDocumentation" ):
                listener.enterRuleDocumentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDocumentation" ):
                listener.exitRuleDocumentation(self)




    def ruleDocumentation(self):

        localctx = SysMLv2Parser.RuleDocumentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_ruleDocumentation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(SysMLv2Parser.K_DOC)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                self.state = 1141
                self.ruleIdentification()


            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 1144
                self.match(SysMLv2Parser.K_LOCALE)
                self.state = 1145
                self.match(SysMLv2Parser.RULE_STRING_VALUE)


            self.state = 1148
            self.match(SysMLv2Parser.RULE_REGULAR_COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTextualRepresentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_LANGUAGE(self):
            return self.getToken(SysMLv2Parser.K_LANGUAGE, 0)

        def RULE_STRING_VALUE(self):
            return self.getToken(SysMLv2Parser.RULE_STRING_VALUE, 0)

        def RULE_REGULAR_COMMENT(self):
            return self.getToken(SysMLv2Parser.RULE_REGULAR_COMMENT, 0)

        def K_REP(self):
            return self.getToken(SysMLv2Parser.K_REP, 0)

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTextualRepresentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTextualRepresentation" ):
                listener.enterRuleTextualRepresentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTextualRepresentation" ):
                listener.exitRuleTextualRepresentation(self)




    def ruleTextualRepresentation(self):

        localctx = SysMLv2Parser.RuleTextualRepresentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_ruleTextualRepresentation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1150
                self.match(SysMLv2Parser.K_REP)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                    self.state = 1151
                    self.ruleIdentification()




            self.state = 1156
            self.match(SysMLv2Parser.K_LANGUAGE)
            self.state = 1157
            self.match(SysMLv2Parser.RULE_STRING_VALUE)
            self.state = 1158
            self.match(SysMLv2Parser.RULE_REGULAR_COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_METADATA(self):
            return self.getToken(SysMLv2Parser.K_METADATA, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataKeyword" ):
                listener.enterRuleMetadataKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataKeyword" ):
                listener.exitRuleMetadataKeyword(self)




    def ruleMetadataKeyword(self):

        localctx = SysMLv2Parser.RuleMetadataKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_ruleMetadataKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(SysMLv2Parser.K_METADATA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMetadataKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataDefKeyword" ):
                listener.enterRuleMetadataDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataDefKeyword" ):
                listener.exitRuleMetadataDefKeyword(self)




    def ruleMetadataDefKeyword(self):

        localctx = SysMLv2Parser.RuleMetadataDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_ruleMetadataDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.ruleMetadataKeyword()
            self.state = 1163
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataUsageKeyword

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleMetadataUsageKeyword2Context(RuleMetadataUsageKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMetadataUsageKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_AT(self):
            return self.getToken(SysMLv2Parser.OP_AT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataUsageKeyword2" ):
                listener.enterRuleMetadataUsageKeyword2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataUsageKeyword2" ):
                listener.exitRuleMetadataUsageKeyword2(self)


    class RuleMetadataUsageKeyword1Context(RuleMetadataUsageKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMetadataUsageKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMetadataKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataKeywordContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataUsageKeyword1" ):
                listener.enterRuleMetadataUsageKeyword1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataUsageKeyword1" ):
                listener.exitRuleMetadataUsageKeyword1(self)



    def ruleMetadataUsageKeyword(self):

        localctx = SysMLv2Parser.RuleMetadataUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_ruleMetadataUsageKeyword)
        try:
            self.state = 1167
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                localctx = SysMLv2Parser.RuleMetadataUsageKeyword1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1165
                self.ruleMetadataKeyword()
                pass
            elif token in [137]:
                localctx = SysMLv2Parser.RuleMetadataUsageKeyword2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1166
                self.match(SysMLv2Parser.OP_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMetadataDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def K_ABSTRACT(self):
            return self.getToken(SysMLv2Parser.K_ABSTRACT, 0)

        def ruleDefinitionExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleDefinitionExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataDefinition" ):
                listener.enterRuleMetadataDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataDefinition" ):
                listener.exitRuleMetadataDefinition(self)




    def ruleMetadataDefinition(self):

        localctx = SysMLv2Parser.RuleMetadataDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_ruleMetadataDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1169
                self.match(SysMLv2Parser.K_ABSTRACT)


            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1172
                self.ruleDefinitionExtensionKeyword()
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1178
            self.ruleMetadataDefKeyword()
            self.state = 1179
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePrefixMetadataAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_HASH(self):
            return self.getToken(SysMLv2Parser.OP_HASH, 0)

        def rulePrefixMetadataUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePrefixMetadataUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePrefixMetadataAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePrefixMetadataAnnotation" ):
                listener.enterRulePrefixMetadataAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePrefixMetadataAnnotation" ):
                listener.exitRulePrefixMetadataAnnotation(self)




    def rulePrefixMetadataAnnotation(self):

        localctx = SysMLv2Parser.RulePrefixMetadataAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_rulePrefixMetadataAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(SysMLv2Parser.OP_HASH)
            self.state = 1182
            self.rulePrefixMetadataUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePrefixMetadataMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_HASH(self):
            return self.getToken(SysMLv2Parser.OP_HASH, 0)

        def rulePrefixMetadataUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePrefixMetadataUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePrefixMetadataMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePrefixMetadataMember" ):
                listener.enterRulePrefixMetadataMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePrefixMetadataMember" ):
                listener.exitRulePrefixMetadataMember(self)




    def rulePrefixMetadataMember(self):

        localctx = SysMLv2Parser.RulePrefixMetadataMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_rulePrefixMetadataMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(SysMLv2Parser.OP_HASH)
            self.state = 1185
            self.rulePrefixMetadataUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePrefixMetadataUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMetadataTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataTypingContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePrefixMetadataUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePrefixMetadataUsage" ):
                listener.enterRulePrefixMetadataUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePrefixMetadataUsage" ):
                listener.exitRulePrefixMetadataUsage(self)




    def rulePrefixMetadataUsage(self):

        localctx = SysMLv2Parser.RulePrefixMetadataUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_rulePrefixMetadataUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.ruleMetadataTyping()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMetadataUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataUsageKeywordContext,0)


        def ruleMetadataUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataUsageDeclarationContext,0)


        def ruleMetadataBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataBodyContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def K_ABOUT(self):
            return self.getToken(SysMLv2Parser.K_ABOUT, 0)

        def ruleAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAnnotationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAnnotationContext,i)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataUsage" ):
                listener.enterRuleMetadataUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataUsage" ):
                listener.exitRuleMetadataUsage(self)




    def ruleMetadataUsage(self):

        localctx = SysMLv2Parser.RuleMetadataUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_ruleMetadataUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1189
                self.ruleUsageExtensionKeyword()
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1195
            self.ruleMetadataUsageKeyword()
            self.state = 1196
            self.ruleMetadataUsageDeclaration()
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 1197
                self.match(SysMLv2Parser.K_ABOUT)
                self.state = 1198
                self.ruleAnnotation()
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==136:
                    self.state = 1199
                    self.match(SysMLv2Parser.OP_COMMA)
                    self.state = 1200
                    self.ruleAnnotation()
                    self.state = 1205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1208
            self.ruleMetadataBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataUsageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMetadataTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataTypingContext,0)


        def ruleDefinedByKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinedByKeywordContext,0)


        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataUsageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataUsageDeclaration" ):
                listener.enterRuleMetadataUsageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataUsageDeclaration" ):
                listener.exitRuleMetadataUsageDeclaration(self)




    def ruleMetadataUsageDeclaration(self):

        localctx = SysMLv2Parser.RuleMetadataUsageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_ruleMetadataUsageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                    self.state = 1210
                    self.ruleIdentification()


                self.state = 1213
                self.ruleDefinedByKeyword()


            self.state = 1216
            self.ruleMetadataTyping()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataTypingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataTyping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataTyping" ):
                listener.enterRuleMetadataTyping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataTyping" ):
                listener.exitRuleMetadataTyping(self)




    def ruleMetadataTyping(self):

        localctx = SysMLv2Parser.RuleMetadataTypingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_ruleMetadataTyping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleMetadataBody2Context(RuleMetadataBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMetadataBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleDefinitionMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleDefinitionMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionMemberContext,i)

        def ruleMetadataBodyUsageMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleMetadataBodyUsageMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataBodyUsageMemberContext,i)

        def ruleAliasMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAliasMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAliasMemberContext,i)

        def ruleImport(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleImportContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleImportContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataBody2" ):
                listener.enterRuleMetadataBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataBody2" ):
                listener.exitRuleMetadataBody2(self)


    class RuleMetadataBody1Context(RuleMetadataBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMetadataBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataBody1" ):
                listener.enterRuleMetadataBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataBody1" ):
                listener.exitRuleMetadataBody1(self)



    def ruleMetadataBody(self):

        localctx = SysMLv2Parser.RuleMetadataBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_ruleMetadataBody)
        self._la = 0 # Token type
        try:
            self.state = 1232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleMetadataBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1220
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleMetadataBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1221
                self.match(SysMLv2Parser.LBRACE)
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 201004951565760466) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & -2305835312272239999) != 0) or ((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & 11) != 0):
                    self.state = 1226
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 1222
                        self.ruleDefinitionMember()
                        pass

                    elif la_ == 2:
                        self.state = 1223
                        self.ruleMetadataBodyUsageMember()
                        pass

                    elif la_ == 3:
                        self.state = 1224
                        self.ruleAliasMember()
                        pass

                    elif la_ == 4:
                        self.state = 1225
                        self.ruleImport()
                        pass


                    self.state = 1230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1231
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataBodyUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMetadataBodyUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataBodyUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataBodyUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataBodyUsageMember" ):
                listener.enterRuleMetadataBodyUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataBodyUsageMember" ):
                listener.exitRuleMetadataBodyUsageMember(self)




    def ruleMetadataBodyUsageMember(self):

        localctx = SysMLv2Parser.RuleMetadataBodyUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_ruleMetadataBodyUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.ruleMetadataBodyUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataBodyUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedRedefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedRedefinitionContext,0)


        def ruleMetadataBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataBodyContext,0)


        def K_REF(self):
            return self.getToken(SysMLv2Parser.K_REF, 0)

        def ruleFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationPartContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def OP_COLON_RANGLE_RANGLE(self):
            return self.getToken(SysMLv2Parser.OP_COLON_RANGLE_RANGLE, 0)

        def K_REDEFINES(self):
            return self.getToken(SysMLv2Parser.K_REDEFINES, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataBodyUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataBodyUsage" ):
                listener.enterRuleMetadataBodyUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataBodyUsage" ):
                listener.exitRuleMetadataBodyUsage(self)




    def ruleMetadataBodyUsage(self):

        localctx = SysMLv2Parser.RuleMetadataBodyUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_ruleMetadataBodyUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1236
                self.match(SysMLv2Parser.K_REF)


            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==139:
                self.state = 1239
                _la = self._input.LA(1)
                if not(_la==14 or _la==139):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1242
            self.ruleOwnedRedefinition()
            self.state = 1244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 14465) != 0):
                self.state = 1243
                self.ruleFeatureSpecializationPart()


            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 1246
                self.ruleValuePart()


            self.state = 1249
            self.ruleMetadataBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePackageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePackageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePackageDeclarationContext,0)


        def rulePackageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePackageBodyContext,0)


        def rulePrefixMetadataMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RulePrefixMetadataMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RulePrefixMetadataMemberContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePackage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePackage" ):
                listener.enterRulePackage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePackage" ):
                listener.exitRulePackage(self)




    def rulePackage(self):

        localctx = SysMLv2Parser.RulePackageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_rulePackage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1251
                self.rulePrefixMetadataMember()
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1257
            self.rulePackageDeclaration()
            self.state = 1258
            self.rulePackageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLibraryPackageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_LIBRARY(self):
            return self.getToken(SysMLv2Parser.K_LIBRARY, 0)

        def rulePackageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePackageDeclarationContext,0)


        def rulePackageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePackageBodyContext,0)


        def K_STANDARD(self):
            return self.getToken(SysMLv2Parser.K_STANDARD, 0)

        def rulePrefixMetadataMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RulePrefixMetadataMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RulePrefixMetadataMemberContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleLibraryPackage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLibraryPackage" ):
                listener.enterRuleLibraryPackage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLibraryPackage" ):
                listener.exitRuleLibraryPackage(self)




    def ruleLibraryPackage(self):

        localctx = SysMLv2Parser.RuleLibraryPackageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_ruleLibraryPackage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 1260
                self.match(SysMLv2Parser.K_STANDARD)


            self.state = 1263
            self.match(SysMLv2Parser.K_LIBRARY)
            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1264
                self.rulePrefixMetadataMember()
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1270
            self.rulePackageDeclaration()
            self.state = 1271
            self.rulePackageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PACKAGE(self):
            return self.getToken(SysMLv2Parser.K_PACKAGE, 0)

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePackageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePackageDeclaration" ):
                listener.enterRulePackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePackageDeclaration" ):
                listener.exitRulePackageDeclaration(self)




    def rulePackageDeclaration(self):

        localctx = SysMLv2Parser.RulePackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rulePackageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(SysMLv2Parser.K_PACKAGE)
            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                self.state = 1274
                self.ruleIdentification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePackageBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePackageBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RulePackageBody2Context(RulePackageBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePackageBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def rulePackageMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RulePackageMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RulePackageMemberContext,i)

        def ruleElementFilterMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleElementFilterMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleElementFilterMemberContext,i)

        def ruleAliasMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAliasMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAliasMemberContext,i)

        def ruleImport(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleImportContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleImportContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePackageBody2" ):
                listener.enterRulePackageBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePackageBody2" ):
                listener.exitRulePackageBody2(self)


    class RulePackageBody1Context(RulePackageBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePackageBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePackageBody1" ):
                listener.enterRulePackageBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePackageBody1" ):
                listener.exitRulePackageBody1(self)



    def rulePackageBody(self):

        localctx = SysMLv2Parser.RulePackageBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_rulePackageBody)
        self._la = 0 # Token type
        try:
            self.state = 1289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RulePackageBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RulePackageBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.match(SysMLv2Parser.LBRACE)
                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 567451317370353618) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2382369030299440161) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 188978561479) != 0):
                    self.state = 1283
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                    if la_ == 1:
                        self.state = 1279
                        self.rulePackageMember()
                        pass

                    elif la_ == 2:
                        self.state = 1280
                        self.ruleElementFilterMember()
                        pass

                    elif la_ == 3:
                        self.state = 1281
                        self.ruleAliasMember()
                        pass

                    elif la_ == 4:
                        self.state = 1282
                        self.ruleImport()
                        pass


                    self.state = 1287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1288
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePackageBodyElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePackageBodyElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RulePackageBodyElement4Context(RulePackageBodyElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePackageBodyElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePackageBodyElement4" ):
                listener.enterRulePackageBodyElement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePackageBodyElement4" ):
                listener.exitRulePackageBodyElement4(self)


    class RulePackageBodyElement2Context(RulePackageBodyElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePackageBodyElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleElementFilterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleElementFilterMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePackageBodyElement2" ):
                listener.enterRulePackageBodyElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePackageBodyElement2" ):
                listener.exitRulePackageBodyElement2(self)


    class RulePackageBodyElement3Context(RulePackageBodyElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePackageBodyElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAliasMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAliasMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePackageBodyElement3" ):
                listener.enterRulePackageBodyElement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePackageBodyElement3" ):
                listener.exitRulePackageBodyElement3(self)


    class RulePackageBodyElement1Context(RulePackageBodyElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePackageBodyElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePackageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePackageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePackageBodyElement1" ):
                listener.enterRulePackageBodyElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePackageBodyElement1" ):
                listener.exitRulePackageBodyElement1(self)



    def rulePackageBodyElement(self):

        localctx = SysMLv2Parser.RulePackageBodyElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_rulePackageBodyElement)
        try:
            self.state = 1295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RulePackageBodyElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.rulePackageMember()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RulePackageBodyElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1292
                self.ruleElementFilterMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RulePackageBodyElement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1293
                self.ruleAliasMember()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RulePackageBodyElement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1294
                self.ruleImport()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMemberPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleVisibilityIndicator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVisibilityIndicatorContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMemberPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMemberPrefix" ):
                listener.enterRuleMemberPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMemberPrefix" ):
                listener.exitRuleMemberPrefix(self)




    def ruleMemberPrefix(self):

        localctx = SysMLv2Parser.RuleMemberPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ruleMemberPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 7) != 0):
                self.state = 1297
                self.ruleVisibilityIndicator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePackageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleDefinitionElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionElementContext,0)


        def ruleUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePackageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePackageMember" ):
                listener.enterRulePackageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePackageMember" ):
                listener.exitRulePackageMember(self)




    def rulePackageMember(self):

        localctx = SysMLv2Parser.RulePackageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_rulePackageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.ruleMemberPrefix()
            self.state = 1303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 1301
                self.ruleDefinitionElement()
                pass

            elif la_ == 2:
                self.state = 1302
                self.ruleUsageElement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleElementFilterMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def K_FILTER(self):
            return self.getToken(SysMLv2Parser.K_FILTER, 0)

        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleElementFilterMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleElementFilterMember" ):
                listener.enterRuleElementFilterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleElementFilterMember" ):
                listener.exitRuleElementFilterMember(self)




    def ruleElementFilterMember(self):

        localctx = SysMLv2Parser.RuleElementFilterMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_ruleElementFilterMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.ruleMemberPrefix()
            self.state = 1306
            self.match(SysMLv2Parser.K_FILTER)
            self.state = 1307
            self.ruleOwnedExpression()
            self.state = 1308
            self.match(SysMLv2Parser.OP_SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAliasMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def K_ALIAS(self):
            return self.getToken(SysMLv2Parser.K_ALIAS, 0)

        def K_FOR(self):
            return self.getToken(SysMLv2Parser.K_FOR, 0)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def ruleRelationshipBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRelationshipBodyContext,0)


        def LANGLE(self):
            return self.getToken(SysMLv2Parser.LANGLE, 0)

        def ruleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleNameContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleNameContext,i)


        def RANGLE(self):
            return self.getToken(SysMLv2Parser.RANGLE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAliasMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAliasMember" ):
                listener.enterRuleAliasMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAliasMember" ):
                listener.exitRuleAliasMember(self)




    def ruleAliasMember(self):

        localctx = SysMLv2Parser.RuleAliasMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ruleAliasMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.ruleMemberPrefix()
            self.state = 1311
            self.match(SysMLv2Parser.K_ALIAS)
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1312
                self.match(SysMLv2Parser.LANGLE)
                self.state = 1313
                self.ruleName()
                self.state = 1314
                self.match(SysMLv2Parser.RANGLE)


            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==171 or _la==172:
                self.state = 1318
                self.ruleName()


            self.state = 1321
            self.match(SysMLv2Parser.K_FOR)
            self.state = 1322
            self.ruleQualifiedName()
            self.state = 1323
            self.ruleRelationshipBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleImportPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IMPORT(self):
            return self.getToken(SysMLv2Parser.K_IMPORT, 0)

        def ruleVisibilityIndicator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVisibilityIndicatorContext,0)


        def K_ALL(self):
            return self.getToken(SysMLv2Parser.K_ALL, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleImportPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleImportPrefix" ):
                listener.enterRuleImportPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleImportPrefix" ):
                listener.exitRuleImportPrefix(self)




    def ruleImportPrefix(self):

        localctx = SysMLv2Parser.RuleImportPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ruleImportPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 7) != 0):
                self.state = 1325
                self.ruleVisibilityIndicator()


            self.state = 1328
            self.match(SysMLv2Parser.K_IMPORT)
            self.state = 1330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 1329
                self.match(SysMLv2Parser.K_ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleImportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRelationshipBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRelationshipBodyContext,0)


        def ruleMembershipImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMembershipImportContext,0)


        def ruleNamespaceImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNamespaceImportContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleImport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleImport" ):
                listener.enterRuleImport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleImport" ):
                listener.exitRuleImport(self)




    def ruleImport(self):

        localctx = SysMLv2Parser.RuleImportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ruleImport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 1332
                self.ruleMembershipImport()
                pass

            elif la_ == 2:
                self.state = 1333
                self.ruleNamespaceImport()
                pass


            self.state = 1336
            self.ruleRelationshipBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMembershipImportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleImportPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportPrefixContext,0)


        def ruleImportedMembership(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportedMembershipContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMembershipImport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMembershipImport" ):
                listener.enterRuleMembershipImport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMembershipImport" ):
                listener.exitRuleMembershipImport(self)




    def ruleMembershipImport(self):

        localctx = SysMLv2Parser.RuleMembershipImportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ruleMembershipImport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.ruleImportPrefix()
            self.state = 1339
            self.ruleImportedMembership()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleImportedMembershipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def OP_COLON_COLON(self):
            return self.getToken(SysMLv2Parser.OP_COLON_COLON, 0)

        def OP_STAR_STAR(self):
            return self.getToken(SysMLv2Parser.OP_STAR_STAR, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleImportedMembership

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleImportedMembership" ):
                listener.enterRuleImportedMembership(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleImportedMembership" ):
                listener.exitRuleImportedMembership(self)




    def ruleImportedMembership(self):

        localctx = SysMLv2Parser.RuleImportedMembershipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_ruleImportedMembership)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.ruleQualifiedName()
            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 1342
                self.match(SysMLv2Parser.OP_COLON_COLON)
                self.state = 1343
                self.match(SysMLv2Parser.OP_STAR_STAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNamespaceImportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleImportPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportPrefixContext,0)


        def ruleImportedNamespace(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportedNamespaceContext,0)


        def ruleFilterPackage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFilterPackageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNamespaceImport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNamespaceImport" ):
                listener.enterRuleNamespaceImport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNamespaceImport" ):
                listener.exitRuleNamespaceImport(self)




    def ruleNamespaceImport(self):

        localctx = SysMLv2Parser.RuleNamespaceImportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_ruleNamespaceImport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.ruleImportPrefix()
            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 1347
                self.ruleImportedNamespace()
                pass

            elif la_ == 2:
                self.state = 1348
                self.ruleFilterPackage()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleImportedNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def OP_COLON_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COLON_COLON)
            else:
                return self.getToken(SysMLv2Parser.OP_COLON_COLON, i)

        def OP_STAR(self):
            return self.getToken(SysMLv2Parser.OP_STAR, 0)

        def OP_STAR_STAR(self):
            return self.getToken(SysMLv2Parser.OP_STAR_STAR, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleImportedNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleImportedNamespace" ):
                listener.enterRuleImportedNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleImportedNamespace" ):
                listener.exitRuleImportedNamespace(self)




    def ruleImportedNamespace(self):

        localctx = SysMLv2Parser.RuleImportedNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ruleImportedNamespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.ruleQualifiedName()
            self.state = 1352
            self.match(SysMLv2Parser.OP_COLON_COLON)
            self.state = 1353
            self.match(SysMLv2Parser.OP_STAR)
            self.state = 1356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 1354
                self.match(SysMLv2Parser.OP_COLON_COLON)
                self.state = 1355
                self.match(SysMLv2Parser.OP_STAR_STAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFilterPackageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFilterPackageImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFilterPackageImportContext,0)


        def ruleFilterPackageMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFilterPackageMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFilterPackageMemberContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFilterPackage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFilterPackage" ):
                listener.enterRuleFilterPackage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFilterPackage" ):
                listener.exitRuleFilterPackage(self)




    def ruleFilterPackage(self):

        localctx = SysMLv2Parser.RuleFilterPackageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ruleFilterPackage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.ruleFilterPackageImport()
            self.state = 1360 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1359
                self.ruleFilterPackageMember()
                self.state = 1362 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==132):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFilterPackageImportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFilterPackageImport

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFilterPackageImport2Context(RuleFilterPackageImportContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFilterPackageImportContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFilterPackageNamespaceImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFilterPackageNamespaceImportContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFilterPackageImport2" ):
                listener.enterRuleFilterPackageImport2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFilterPackageImport2" ):
                listener.exitRuleFilterPackageImport2(self)


    class RuleFilterPackageImport1Context(RuleFilterPackageImportContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFilterPackageImportContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFilterPackageMembershipImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFilterPackageMembershipImportContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFilterPackageImport1" ):
                listener.enterRuleFilterPackageImport1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFilterPackageImport1" ):
                listener.exitRuleFilterPackageImport1(self)



    def ruleFilterPackageImport(self):

        localctx = SysMLv2Parser.RuleFilterPackageImportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ruleFilterPackageImport)
        try:
            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleFilterPackageImport1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1364
                self.ruleFilterPackageMembershipImport()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleFilterPackageImport2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1365
                self.ruleFilterPackageNamespaceImport()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFilterPackageMembershipImportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleImportedMembership(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportedMembershipContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFilterPackageMembershipImport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFilterPackageMembershipImport" ):
                listener.enterRuleFilterPackageMembershipImport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFilterPackageMembershipImport" ):
                listener.exitRuleFilterPackageMembershipImport(self)




    def ruleFilterPackageMembershipImport(self):

        localctx = SysMLv2Parser.RuleFilterPackageMembershipImportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ruleFilterPackageMembershipImport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.ruleImportedMembership()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFilterPackageNamespaceImportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleImportedNamespace(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportedNamespaceContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFilterPackageNamespaceImport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFilterPackageNamespaceImport" ):
                listener.enterRuleFilterPackageNamespaceImport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFilterPackageNamespaceImport" ):
                listener.exitRuleFilterPackageNamespaceImport(self)




    def ruleFilterPackageNamespaceImport(self):

        localctx = SysMLv2Parser.RuleFilterPackageNamespaceImportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_ruleFilterPackageNamespaceImport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.ruleImportedNamespace()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFilterPackageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFilterPackageMemberVisibility(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFilterPackageMemberVisibilityContext,0)


        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def RSQUARE(self):
            return self.getToken(SysMLv2Parser.RSQUARE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFilterPackageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFilterPackageMember" ):
                listener.enterRuleFilterPackageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFilterPackageMember" ):
                listener.exitRuleFilterPackageMember(self)




    def ruleFilterPackageMember(self):

        localctx = SysMLv2Parser.RuleFilterPackageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ruleFilterPackageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.ruleFilterPackageMemberVisibility()
            self.state = 1373
            self.ruleOwnedExpression()
            self.state = 1374
            self.match(SysMLv2Parser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefinitionElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefinitionElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleDefinitionElement4Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDependency(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDependencyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement4" ):
                listener.enterRuleDefinitionElement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement4" ):
                listener.exitRuleDefinitionElement4(self)


    class RuleDefinitionElement3Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAnnotatingElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAnnotatingElementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement3" ):
                listener.enterRuleDefinitionElement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement3" ):
                listener.exitRuleDefinitionElement3(self)


    class RuleDefinitionElement2Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleLibraryPackage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLibraryPackageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement2" ):
                listener.enterRuleDefinitionElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement2" ):
                listener.exitRuleDefinitionElement2(self)


    class RuleDefinitionElement1Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePackage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePackageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement1" ):
                listener.enterRuleDefinitionElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement1" ):
                listener.exitRuleDefinitionElement1(self)


    class RuleDefinitionElement11Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePartDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePartDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement11" ):
                listener.enterRuleDefinitionElement11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement11" ):
                listener.exitRuleDefinitionElement11(self)


    class RuleDefinitionElement10Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMetadataDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement10" ):
                listener.enterRuleDefinitionElement10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement10" ):
                listener.exitRuleDefinitionElement10(self)


    class RuleDefinitionElement13Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFlowConnectionDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowConnectionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement13" ):
                listener.enterRuleDefinitionElement13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement13" ):
                listener.exitRuleDefinitionElement13(self)


    class RuleDefinitionElement9Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleItemDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement9" ):
                listener.enterRuleDefinitionElement9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement9" ):
                listener.exitRuleDefinitionElement9(self)


    class RuleDefinitionElement12Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConnectionDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement12" ):
                listener.enterRuleDefinitionElement12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement12" ):
                listener.exitRuleDefinitionElement12(self)


    class RuleDefinitionElement8Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleIndividualDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIndividualDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement8" ):
                listener.enterRuleDefinitionElement8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement8" ):
                listener.exitRuleDefinitionElement8(self)


    class RuleDefinitionElement7Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOccurrenceDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement7" ):
                listener.enterRuleDefinitionElement7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement7" ):
                listener.exitRuleDefinitionElement7(self)


    class RuleDefinitionElement6Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleEnumerationDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement6" ):
                listener.enterRuleDefinitionElement6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement6" ):
                listener.exitRuleDefinitionElement6(self)


    class RuleDefinitionElement5Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAttributeDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAttributeDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement5" ):
                listener.enterRuleDefinitionElement5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement5" ):
                listener.exitRuleDefinitionElement5(self)


    class RuleDefinitionElement30Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleExtendedDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExtendedDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement30" ):
                listener.enterRuleDefinitionElement30(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement30" ):
                listener.exitRuleDefinitionElement30(self)


    class RuleDefinitionElement19Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleStateDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement19" ):
                listener.enterRuleDefinitionElement19(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement19" ):
                listener.exitRuleDefinitionElement19(self)


    class RuleDefinitionElement18Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleCalculationDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement18" ):
                listener.enterRuleDefinitionElement18(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement18" ):
                listener.exitRuleDefinitionElement18(self)


    class RuleDefinitionElement15Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAllocationDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocationDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement15" ):
                listener.enterRuleDefinitionElement15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement15" ):
                listener.exitRuleDefinitionElement15(self)


    class RuleDefinitionElement14Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleInterfaceDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement14" ):
                listener.enterRuleDefinitionElement14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement14" ):
                listener.exitRuleDefinitionElement14(self)


    class RuleDefinitionElement17Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleActionDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement17" ):
                listener.enterRuleDefinitionElement17(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement17" ):
                listener.exitRuleDefinitionElement17(self)


    class RuleDefinitionElement16Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePortDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement16" ):
                listener.enterRuleDefinitionElement16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement16" ):
                listener.exitRuleDefinitionElement16(self)


    class RuleDefinitionElement22Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConcernDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConcernDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement22" ):
                listener.enterRuleDefinitionElement22(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement22" ):
                listener.exitRuleDefinitionElement22(self)


    class RuleDefinitionElement21Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleRequirementDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement21" ):
                listener.enterRuleDefinitionElement21(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement21" ):
                listener.exitRuleDefinitionElement21(self)


    class RuleDefinitionElement24Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAnalysisCaseDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAnalysisCaseDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement24" ):
                listener.enterRuleDefinitionElement24(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement24" ):
                listener.exitRuleDefinitionElement24(self)


    class RuleDefinitionElement23Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleCaseDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement23" ):
                listener.enterRuleDefinitionElement23(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement23" ):
                listener.exitRuleDefinitionElement23(self)


    class RuleDefinitionElement20Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConstraintDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement20" ):
                listener.enterRuleDefinitionElement20(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement20" ):
                listener.exitRuleDefinitionElement20(self)


    class RuleDefinitionElement29Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleRenderingDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRenderingDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement29" ):
                listener.enterRuleDefinitionElement29(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement29" ):
                listener.exitRuleDefinitionElement29(self)


    class RuleDefinitionElement26Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleUseCaseDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUseCaseDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement26" ):
                listener.enterRuleDefinitionElement26(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement26" ):
                listener.exitRuleDefinitionElement26(self)


    class RuleDefinitionElement25Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleVerificationCaseDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVerificationCaseDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement25" ):
                listener.enterRuleDefinitionElement25(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement25" ):
                listener.exitRuleDefinitionElement25(self)


    class RuleDefinitionElement28Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleViewpointDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewpointDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement28" ):
                listener.enterRuleDefinitionElement28(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement28" ):
                listener.exitRuleDefinitionElement28(self)


    class RuleDefinitionElement27Context(RuleDefinitionElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleViewDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionElement27" ):
                listener.enterRuleDefinitionElement27(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionElement27" ):
                listener.exitRuleDefinitionElement27(self)



    def ruleDefinitionElement(self):

        localctx = SysMLv2Parser.RuleDefinitionElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ruleDefinitionElement)
        try:
            self.state = 1406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleDefinitionElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.rulePackage()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleDefinitionElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1377
                self.ruleLibraryPackage()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleDefinitionElement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1378
                self.ruleAnnotatingElement()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleDefinitionElement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1379
                self.ruleDependency()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleDefinitionElement5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1380
                self.ruleAttributeDefinition()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleDefinitionElement6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1381
                self.ruleEnumerationDefinition()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleDefinitionElement7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1382
                self.ruleOccurrenceDefinition()
                pass

            elif la_ == 8:
                localctx = SysMLv2Parser.RuleDefinitionElement8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1383
                self.ruleIndividualDefinition()
                pass

            elif la_ == 9:
                localctx = SysMLv2Parser.RuleDefinitionElement9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1384
                self.ruleItemDefinition()
                pass

            elif la_ == 10:
                localctx = SysMLv2Parser.RuleDefinitionElement10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1385
                self.ruleMetadataDefinition()
                pass

            elif la_ == 11:
                localctx = SysMLv2Parser.RuleDefinitionElement11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1386
                self.rulePartDefinition()
                pass

            elif la_ == 12:
                localctx = SysMLv2Parser.RuleDefinitionElement12Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1387
                self.ruleConnectionDefinition()
                pass

            elif la_ == 13:
                localctx = SysMLv2Parser.RuleDefinitionElement13Context(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1388
                self.ruleFlowConnectionDefinition()
                pass

            elif la_ == 14:
                localctx = SysMLv2Parser.RuleDefinitionElement14Context(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1389
                self.ruleInterfaceDefinition()
                pass

            elif la_ == 15:
                localctx = SysMLv2Parser.RuleDefinitionElement15Context(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1390
                self.ruleAllocationDefinition()
                pass

            elif la_ == 16:
                localctx = SysMLv2Parser.RuleDefinitionElement16Context(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1391
                self.rulePortDefinition()
                pass

            elif la_ == 17:
                localctx = SysMLv2Parser.RuleDefinitionElement17Context(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1392
                self.ruleActionDefinition()
                pass

            elif la_ == 18:
                localctx = SysMLv2Parser.RuleDefinitionElement18Context(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1393
                self.ruleCalculationDefinition()
                pass

            elif la_ == 19:
                localctx = SysMLv2Parser.RuleDefinitionElement19Context(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1394
                self.ruleStateDefinition()
                pass

            elif la_ == 20:
                localctx = SysMLv2Parser.RuleDefinitionElement20Context(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1395
                self.ruleConstraintDefinition()
                pass

            elif la_ == 21:
                localctx = SysMLv2Parser.RuleDefinitionElement21Context(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1396
                self.ruleRequirementDefinition()
                pass

            elif la_ == 22:
                localctx = SysMLv2Parser.RuleDefinitionElement22Context(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1397
                self.ruleConcernDefinition()
                pass

            elif la_ == 23:
                localctx = SysMLv2Parser.RuleDefinitionElement23Context(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1398
                self.ruleCaseDefinition()
                pass

            elif la_ == 24:
                localctx = SysMLv2Parser.RuleDefinitionElement24Context(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1399
                self.ruleAnalysisCaseDefinition()
                pass

            elif la_ == 25:
                localctx = SysMLv2Parser.RuleDefinitionElement25Context(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1400
                self.ruleVerificationCaseDefinition()
                pass

            elif la_ == 26:
                localctx = SysMLv2Parser.RuleDefinitionElement26Context(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1401
                self.ruleUseCaseDefinition()
                pass

            elif la_ == 27:
                localctx = SysMLv2Parser.RuleDefinitionElement27Context(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1402
                self.ruleViewDefinition()
                pass

            elif la_ == 28:
                localctx = SysMLv2Parser.RuleDefinitionElement28Context(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 1403
                self.ruleViewpointDefinition()
                pass

            elif la_ == 29:
                localctx = SysMLv2Parser.RuleDefinitionElement29Context(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 1404
                self.ruleRenderingDefinition()
                pass

            elif la_ == 30:
                localctx = SysMLv2Parser.RuleDefinitionElement30Context(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 1405
                self.ruleExtendedDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUsageElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleUsageElement1Context(RuleUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleNonOccurrenceUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNonOccurrenceUsageElementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUsageElement1" ):
                listener.enterRuleUsageElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUsageElement1" ):
                listener.exitRuleUsageElement1(self)


    class RuleUsageElement2Context(RuleUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOccurrenceUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsageElementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUsageElement2" ):
                listener.enterRuleUsageElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUsageElement2" ):
                listener.exitRuleUsageElement2(self)



    def ruleUsageElement(self):

        localctx = SysMLv2Parser.RuleUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ruleUsageElement)
        try:
            self.state = 1410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleUsageElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1408
                self.ruleNonOccurrenceUsageElement()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleUsageElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1409
                self.ruleOccurrenceUsageElement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSubclassificationPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleSpecializesKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSpecializesKeywordContext,0)


        def ruleOwnedSubclassification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleOwnedSubclassificationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedSubclassificationContext,i)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSubclassificationPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSubclassificationPart" ):
                listener.enterRuleSubclassificationPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSubclassificationPart" ):
                listener.exitRuleSubclassificationPart(self)




    def ruleSubclassificationPart(self):

        localctx = SysMLv2Parser.RuleSubclassificationPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ruleSubclassificationPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.ruleSpecializesKeyword()
            self.state = 1413
            self.ruleOwnedSubclassification()
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1414
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 1415
                self.ruleOwnedSubclassification()
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSpecializesKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSpecializesKeyword

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleSpecializesKeyword1Context(RuleSpecializesKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleSpecializesKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_COLON_RANGLE(self):
            return self.getToken(SysMLv2Parser.OP_COLON_RANGLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSpecializesKeyword1" ):
                listener.enterRuleSpecializesKeyword1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSpecializesKeyword1" ):
                listener.exitRuleSpecializesKeyword1(self)


    class RuleSpecializesKeyword2Context(RuleSpecializesKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleSpecializesKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SPECIALIZES(self):
            return self.getToken(SysMLv2Parser.K_SPECIALIZES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSpecializesKeyword2" ):
                listener.enterRuleSpecializesKeyword2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSpecializesKeyword2" ):
                listener.exitRuleSpecializesKeyword2(self)



    def ruleSpecializesKeyword(self):

        localctx = SysMLv2Parser.RuleSpecializesKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ruleSpecializesKeyword)
        try:
            self.state = 1423
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                localctx = SysMLv2Parser.RuleSpecializesKeyword1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1421
                self.match(SysMLv2Parser.OP_COLON_RANGLE)
                pass
            elif token in [23]:
                localctx = SysMLv2Parser.RuleSpecializesKeyword2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1422
                self.match(SysMLv2Parser.K_SPECIALIZES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedSubclassificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedSubclassification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedSubclassification" ):
                listener.enterRuleOwnedSubclassification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedSubclassification" ):
                listener.exitRuleOwnedSubclassification(self)




    def ruleOwnedSubclassification(self):

        localctx = SysMLv2Parser.RuleOwnedSubclassificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ruleOwnedSubclassification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFeatureDeclaration2Context(RuleFeatureDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationPartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureDeclaration2" ):
                listener.enterRuleFeatureDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureDeclaration2" ):
                listener.exitRuleFeatureDeclaration2(self)


    class RuleFeatureDeclaration1Context(RuleFeatureDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)

        def ruleFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationPartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureDeclaration1" ):
                listener.enterRuleFeatureDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureDeclaration1" ):
                listener.exitRuleFeatureDeclaration1(self)



    def ruleFeatureDeclaration(self):

        localctx = SysMLv2Parser.RuleFeatureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ruleFeatureDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127, 171, 172]:
                localctx = SysMLv2Parser.RuleFeatureDeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1427
                self.ruleIdentification()
                self.state = 1429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 14465) != 0):
                    self.state = 1428
                    self.ruleFeatureSpecializationPart()


                pass
            elif token in [14, 24, 25, 26, 28, 29, 132, 139, 143, 144, 145]:
                localctx = SysMLv2Parser.RuleFeatureDeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1431
                self.ruleFeatureSpecializationPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureSpecializationPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureSpecializationPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFeatureSpecializationPart1Context(RuleFeatureSpecializationPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureSpecializationPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFeatureSpecialization(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureSpecializationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationContext,i)

        def ruleMultiplicityPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicityPartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureSpecializationPart1" ):
                listener.enterRuleFeatureSpecializationPart1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureSpecializationPart1" ):
                listener.exitRuleFeatureSpecializationPart1(self)


    class RuleFeatureSpecializationPart2Context(RuleFeatureSpecializationPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureSpecializationPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMultiplicityPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicityPartContext,0)

        def ruleFeatureSpecialization(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureSpecializationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureSpecializationPart2" ):
                listener.enterRuleFeatureSpecializationPart2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureSpecializationPart2" ):
                listener.exitRuleFeatureSpecializationPart2(self)



    def ruleFeatureSpecializationPart(self):

        localctx = SysMLv2Parser.RuleFeatureSpecializationPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ruleFeatureSpecializationPart)
        self._la = 0 # Token type
        try:
            self.state = 1455
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 26, 28, 29, 139, 143, 144, 145]:
                localctx = SysMLv2Parser.RuleFeatureSpecializationPart1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1435 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1434
                        self.ruleFeatureSpecialization()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1437 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24 or _la==25 or _la==132:
                    self.state = 1439
                    self.ruleMultiplicityPart()


                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 872431616) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 113) != 0):
                    self.state = 1442
                    self.ruleFeatureSpecialization()
                    self.state = 1447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [24, 25, 132]:
                localctx = SysMLv2Parser.RuleFeatureSpecializationPart2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1448
                self.ruleMultiplicityPart()
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 872431616) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 113) != 0):
                    self.state = 1449
                    self.ruleFeatureSpecialization()
                    self.state = 1454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMultiplicityPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMultiplicityPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleMultiplicityPart1Context(RuleMultiplicityPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMultiplicityPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedMultiplicity(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedMultiplicityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicityPart1" ):
                listener.enterRuleMultiplicityPart1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicityPart1" ):
                listener.exitRuleMultiplicityPart1(self)


    class RuleMultiplicityPart2Context(RuleMultiplicityPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMultiplicityPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ORDERED(self):
            return self.getToken(SysMLv2Parser.K_ORDERED, 0)
        def K_NONUNIQUE(self):
            return self.getToken(SysMLv2Parser.K_NONUNIQUE, 0)
        def ruleOwnedMultiplicity(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedMultiplicityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicityPart2" ):
                listener.enterRuleMultiplicityPart2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicityPart2" ):
                listener.exitRuleMultiplicityPart2(self)



    def ruleMultiplicityPart(self):

        localctx = SysMLv2Parser.RuleMultiplicityPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ruleMultiplicityPart)
        self._la = 0 # Token type
        try:
            self.state = 1471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleMultiplicityPart1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.ruleOwnedMultiplicity()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleMultiplicityPart2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1458
                    self.ruleOwnedMultiplicity()


                self.state = 1469
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [24]:
                    self.state = 1461
                    self.match(SysMLv2Parser.K_ORDERED)
                    self.state = 1463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==25:
                        self.state = 1462
                        self.match(SysMLv2Parser.K_NONUNIQUE)


                    pass
                elif token in [25]:
                    self.state = 1465
                    self.match(SysMLv2Parser.K_NONUNIQUE)
                    self.state = 1467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==24:
                        self.state = 1466
                        self.match(SysMLv2Parser.K_ORDERED)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureSpecializationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureSpecialization

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFeatureSpecialization1Context(RuleFeatureSpecializationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureSpecializationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleTypings(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypingsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureSpecialization1" ):
                listener.enterRuleFeatureSpecialization1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureSpecialization1" ):
                listener.exitRuleFeatureSpecialization1(self)


    class RuleFeatureSpecialization2Context(RuleFeatureSpecializationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureSpecializationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSubsettings(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSubsettingsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureSpecialization2" ):
                listener.enterRuleFeatureSpecialization2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureSpecialization2" ):
                listener.exitRuleFeatureSpecialization2(self)


    class RuleFeatureSpecialization3Context(RuleFeatureSpecializationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureSpecializationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleReferences(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferencesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureSpecialization3" ):
                listener.enterRuleFeatureSpecialization3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureSpecialization3" ):
                listener.exitRuleFeatureSpecialization3(self)


    class RuleFeatureSpecialization4Context(RuleFeatureSpecializationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureSpecializationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleRedefinitions(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRedefinitionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureSpecialization4" ):
                listener.enterRuleFeatureSpecialization4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureSpecialization4" ):
                listener.exitRuleFeatureSpecialization4(self)



    def ruleFeatureSpecialization(self):

        localctx = SysMLv2Parser.RuleFeatureSpecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ruleFeatureSpecialization)
        try:
            self.state = 1477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26, 144]:
                localctx = SysMLv2Parser.RuleFeatureSpecialization1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1473
                self.ruleTypings()
                pass
            elif token in [28, 143]:
                localctx = SysMLv2Parser.RuleFeatureSpecialization2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1474
                self.ruleSubsettings()
                pass
            elif token in [29, 145]:
                localctx = SysMLv2Parser.RuleFeatureSpecialization3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1475
                self.ruleReferences()
                pass
            elif token in [14, 139]:
                localctx = SysMLv2Parser.RuleFeatureSpecialization4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1476
                self.ruleRedefinitions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTypingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTypedBy(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypedByContext,0)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def ruleFeatureTyping(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureTypingContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureTypingContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTypings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTypings" ):
                listener.enterRuleTypings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTypings" ):
                listener.exitRuleTypings(self)




    def ruleTypings(self):

        localctx = SysMLv2Parser.RuleTypingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ruleTypings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.ruleTypedBy()
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1480
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 1481
                self.ruleFeatureTyping()
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTypedByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleDefinedByKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinedByKeywordContext,0)


        def ruleFeatureTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureTypingContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTypedBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTypedBy" ):
                listener.enterRuleTypedBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTypedBy" ):
                listener.exitRuleTypedBy(self)




    def ruleTypedBy(self):

        localctx = SysMLv2Parser.RuleTypedByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_ruleTypedBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.ruleDefinedByKeyword()
            self.state = 1488
            self.ruleFeatureTyping()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefinedByKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefinedByKeyword

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleDefinedByKeyword1Context(RuleDefinedByKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinedByKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_COLON(self):
            return self.getToken(SysMLv2Parser.OP_COLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinedByKeyword1" ):
                listener.enterRuleDefinedByKeyword1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinedByKeyword1" ):
                listener.exitRuleDefinedByKeyword1(self)


    class RuleDefinedByKeyword2Context(RuleDefinedByKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinedByKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_DEFINED(self):
            return self.getToken(SysMLv2Parser.K_DEFINED, 0)
        def K_BY(self):
            return self.getToken(SysMLv2Parser.K_BY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinedByKeyword2" ):
                listener.enterRuleDefinedByKeyword2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinedByKeyword2" ):
                listener.exitRuleDefinedByKeyword2(self)



    def ruleDefinedByKeyword(self):

        localctx = SysMLv2Parser.RuleDefinedByKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_ruleDefinedByKeyword)
        try:
            self.state = 1493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [144]:
                localctx = SysMLv2Parser.RuleDefinedByKeyword1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1490
                self.match(SysMLv2Parser.OP_COLON)
                pass
            elif token in [26]:
                localctx = SysMLv2Parser.RuleDefinedByKeyword2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1491
                self.match(SysMLv2Parser.K_DEFINED)
                self.state = 1492
                self.match(SysMLv2Parser.K_BY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSubsettingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleSubsets(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSubsetsContext,0)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def ruleOwnedSubsetting(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleOwnedSubsettingContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedSubsettingContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSubsettings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSubsettings" ):
                listener.enterRuleSubsettings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSubsettings" ):
                listener.exitRuleSubsettings(self)




    def ruleSubsettings(self):

        localctx = SysMLv2Parser.RuleSubsettingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_ruleSubsettings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.ruleSubsets()
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1496
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 1497
                self.ruleOwnedSubsetting()
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSubsetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleSubsetsKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSubsetsKeywordContext,0)


        def ruleOwnedSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedSubsettingContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSubsets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSubsets" ):
                listener.enterRuleSubsets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSubsets" ):
                listener.exitRuleSubsets(self)




    def ruleSubsets(self):

        localctx = SysMLv2Parser.RuleSubsetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_ruleSubsets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            self.ruleSubsetsKeyword()
            self.state = 1504
            self.ruleOwnedSubsetting()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSubsetsKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSubsetsKeyword

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleSubsetsKeyword1Context(RuleSubsetsKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleSubsetsKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_COLON_RANGLE(self):
            return self.getToken(SysMLv2Parser.OP_COLON_RANGLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSubsetsKeyword1" ):
                listener.enterRuleSubsetsKeyword1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSubsetsKeyword1" ):
                listener.exitRuleSubsetsKeyword1(self)


    class RuleSubsetsKeyword2Context(RuleSubsetsKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleSubsetsKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SUBSETS(self):
            return self.getToken(SysMLv2Parser.K_SUBSETS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSubsetsKeyword2" ):
                listener.enterRuleSubsetsKeyword2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSubsetsKeyword2" ):
                listener.exitRuleSubsetsKeyword2(self)



    def ruleSubsetsKeyword(self):

        localctx = SysMLv2Parser.RuleSubsetsKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_ruleSubsetsKeyword)
        try:
            self.state = 1508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                localctx = SysMLv2Parser.RuleSubsetsKeyword1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1506
                self.match(SysMLv2Parser.OP_COLON_RANGLE)
                pass
            elif token in [28]:
                localctx = SysMLv2Parser.RuleSubsetsKeyword2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1507
                self.match(SysMLv2Parser.K_SUBSETS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleReferencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleReferencesKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferencesKeywordContext,0)


        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleReferences

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleReferences" ):
                listener.enterRuleReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleReferences" ):
                listener.exitRuleReferences(self)




    def ruleReferences(self):

        localctx = SysMLv2Parser.RuleReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_ruleReferences)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.ruleReferencesKeyword()
            self.state = 1511
            self.ruleOwnedReferenceSubsetting()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleReferencesKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleReferencesKeyword

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleReferencesKeyword1Context(RuleReferencesKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleReferencesKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_COLON_COLON_RANGLE(self):
            return self.getToken(SysMLv2Parser.OP_COLON_COLON_RANGLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleReferencesKeyword1" ):
                listener.enterRuleReferencesKeyword1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleReferencesKeyword1" ):
                listener.exitRuleReferencesKeyword1(self)


    class RuleReferencesKeyword2Context(RuleReferencesKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleReferencesKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_REFERENCES(self):
            return self.getToken(SysMLv2Parser.K_REFERENCES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleReferencesKeyword2" ):
                listener.enterRuleReferencesKeyword2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleReferencesKeyword2" ):
                listener.exitRuleReferencesKeyword2(self)



    def ruleReferencesKeyword(self):

        localctx = SysMLv2Parser.RuleReferencesKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_ruleReferencesKeyword)
        try:
            self.state = 1515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                localctx = SysMLv2Parser.RuleReferencesKeyword1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1513
                self.match(SysMLv2Parser.OP_COLON_COLON_RANGLE)
                pass
            elif token in [29]:
                localctx = SysMLv2Parser.RuleReferencesKeyword2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1514
                self.match(SysMLv2Parser.K_REFERENCES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRedefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRedefines(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRedefinesContext,0)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def ruleOwnedRedefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleOwnedRedefinitionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedRedefinitionContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRedefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRedefinitions" ):
                listener.enterRuleRedefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRedefinitions" ):
                listener.exitRuleRedefinitions(self)




    def ruleRedefinitions(self):

        localctx = SysMLv2Parser.RuleRedefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ruleRedefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.ruleRedefines()
            self.state = 1522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1518
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 1519
                self.ruleOwnedRedefinition()
                self.state = 1524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRedefinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRedefinesKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRedefinesKeywordContext,0)


        def ruleOwnedRedefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedRedefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRedefines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRedefines" ):
                listener.enterRuleRedefines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRedefines" ):
                listener.exitRuleRedefines(self)




    def ruleRedefines(self):

        localctx = SysMLv2Parser.RuleRedefinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_ruleRedefines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.ruleRedefinesKeyword()
            self.state = 1526
            self.ruleOwnedRedefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRedefinesKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRedefinesKeyword

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleRedefinesKeyword2Context(RuleRedefinesKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRedefinesKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_REDEFINES(self):
            return self.getToken(SysMLv2Parser.K_REDEFINES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRedefinesKeyword2" ):
                listener.enterRuleRedefinesKeyword2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRedefinesKeyword2" ):
                listener.exitRuleRedefinesKeyword2(self)


    class RuleRedefinesKeyword1Context(RuleRedefinesKeywordContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRedefinesKeywordContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_COLON_RANGLE_RANGLE(self):
            return self.getToken(SysMLv2Parser.OP_COLON_RANGLE_RANGLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRedefinesKeyword1" ):
                listener.enterRuleRedefinesKeyword1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRedefinesKeyword1" ):
                listener.exitRuleRedefinesKeyword1(self)



    def ruleRedefinesKeyword(self):

        localctx = SysMLv2Parser.RuleRedefinesKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_ruleRedefinesKeyword)
        try:
            self.state = 1530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                localctx = SysMLv2Parser.RuleRedefinesKeyword1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1528
                self.match(SysMLv2Parser.OP_COLON_RANGLE_RANGLE)
                pass
            elif token in [14]:
                localctx = SysMLv2Parser.RuleRedefinesKeyword2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1529
                self.match(SysMLv2Parser.K_REDEFINES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureTypingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureTyping

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFeatureTyping2Context(RuleFeatureTypingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureTypingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConjugatedPortTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConjugatedPortTypingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureTyping2" ):
                listener.enterRuleFeatureTyping2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureTyping2" ):
                listener.exitRuleFeatureTyping2(self)


    class RuleFeatureTyping1Context(RuleFeatureTypingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureTypingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedFeatureTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureTypingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureTyping1" ):
                listener.enterRuleFeatureTyping1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureTyping1" ):
                listener.exitRuleFeatureTyping1(self)



    def ruleFeatureTyping(self):

        localctx = SysMLv2Parser.RuleFeatureTypingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ruleFeatureTyping)
        try:
            self.state = 1534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                localctx = SysMLv2Parser.RuleFeatureTyping1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1532
                self.ruleOwnedFeatureTyping()
                pass
            elif token in [149]:
                localctx = SysMLv2Parser.RuleFeatureTyping2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1533
                self.ruleConjugatedPortTyping()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedSubsettingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedSubsetting

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleOwnedSubsetting1Context(RuleOwnedSubsettingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOwnedSubsettingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedSubsetting1" ):
                listener.enterRuleOwnedSubsetting1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedSubsetting1" ):
                listener.exitRuleOwnedSubsetting1(self)


    class RuleOwnedSubsetting2Context(RuleOwnedSubsettingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOwnedSubsettingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedFeatureChain(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedSubsetting2" ):
                listener.enterRuleOwnedSubsetting2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedSubsetting2" ):
                listener.exitRuleOwnedSubsetting2(self)



    def ruleOwnedSubsetting(self):

        localctx = SysMLv2Parser.RuleOwnedSubsettingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_ruleOwnedSubsetting)
        try:
            self.state = 1538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleOwnedSubsetting1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1536
                self.ruleQualifiedName()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleOwnedSubsetting2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1537
                self.ruleOwnedFeatureChain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedReferenceSubsettingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedReferenceSubsetting

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleOwnedReferenceSubsetting2Context(RuleOwnedReferenceSubsettingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOwnedReferenceSubsettingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedFeatureChain(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedReferenceSubsetting2" ):
                listener.enterRuleOwnedReferenceSubsetting2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedReferenceSubsetting2" ):
                listener.exitRuleOwnedReferenceSubsetting2(self)


    class RuleOwnedReferenceSubsetting1Context(RuleOwnedReferenceSubsettingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOwnedReferenceSubsettingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedReferenceSubsetting1" ):
                listener.enterRuleOwnedReferenceSubsetting1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedReferenceSubsetting1" ):
                listener.exitRuleOwnedReferenceSubsetting1(self)



    def ruleOwnedReferenceSubsetting(self):

        localctx = SysMLv2Parser.RuleOwnedReferenceSubsettingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ruleOwnedReferenceSubsetting)
        try:
            self.state = 1542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleOwnedReferenceSubsetting1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1540
                self.ruleQualifiedName()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleOwnedReferenceSubsetting2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1541
                self.ruleOwnedFeatureChain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedRedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedRedefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleOwnedRedefinition1Context(RuleOwnedRedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOwnedRedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedRedefinition1" ):
                listener.enterRuleOwnedRedefinition1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedRedefinition1" ):
                listener.exitRuleOwnedRedefinition1(self)


    class RuleOwnedRedefinition2Context(RuleOwnedRedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOwnedRedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedFeatureChain(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedRedefinition2" ):
                listener.enterRuleOwnedRedefinition2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedRedefinition2" ):
                listener.exitRuleOwnedRedefinition2(self)



    def ruleOwnedRedefinition(self):

        localctx = SysMLv2Parser.RuleOwnedRedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ruleOwnedRedefinition)
        try:
            self.state = 1546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleOwnedRedefinition1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1544
                self.ruleQualifiedName()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleOwnedRedefinition2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1545
                self.ruleOwnedFeatureChain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedMultiplicityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMultiplicityRange(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicityRangeContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedMultiplicity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedMultiplicity" ):
                listener.enterRuleOwnedMultiplicity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedMultiplicity" ):
                listener.exitRuleOwnedMultiplicity(self)




    def ruleOwnedMultiplicity(self):

        localctx = SysMLv2Parser.RuleOwnedMultiplicityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_ruleOwnedMultiplicity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.ruleMultiplicityRange()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMultiplicityRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(SysMLv2Parser.LSQUARE, 0)

        def ruleMultiplicityExpressionMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleMultiplicityExpressionMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicityExpressionMemberContext,i)


        def RSQUARE(self):
            return self.getToken(SysMLv2Parser.RSQUARE, 0)

        def OP_DOT_DOT(self):
            return self.getToken(SysMLv2Parser.OP_DOT_DOT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMultiplicityRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicityRange" ):
                listener.enterRuleMultiplicityRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicityRange" ):
                listener.exitRuleMultiplicityRange(self)




    def ruleMultiplicityRange(self):

        localctx = SysMLv2Parser.RuleMultiplicityRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_ruleMultiplicityRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.match(SysMLv2Parser.LSQUARE)
            self.state = 1551
            self.ruleMultiplicityExpressionMember()
            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1552
                self.match(SysMLv2Parser.OP_DOT_DOT)
                self.state = 1553
                self.ruleMultiplicityExpressionMember()


            self.state = 1556
            self.match(SysMLv2Parser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMultiplicityExpressionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleLiteralExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLiteralExpressionContext,0)


        def ruleFeatureReferenceExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureReferenceExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMultiplicityExpressionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicityExpressionMember" ):
                listener.enterRuleMultiplicityExpressionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicityExpressionMember" ):
                listener.exitRuleMultiplicityExpressionMember(self)




    def ruleMultiplicityExpressionMember(self):

        localctx = SysMLv2Parser.RuleMultiplicityExpressionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_ruleMultiplicityExpressionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114, 115, 142, 150, 169, 170, 173]:
                self.state = 1558
                self.ruleLiteralExpression()
                pass
            elif token in [171, 172]:
                self.state = 1559
                self.ruleFeatureReferenceExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBasicDefinitionPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBasicDefinitionPrefix

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleBasicDefinitionPrefix1Context(RuleBasicDefinitionPrefixContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBasicDefinitionPrefixContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ABSTRACT(self):
            return self.getToken(SysMLv2Parser.K_ABSTRACT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBasicDefinitionPrefix1" ):
                listener.enterRuleBasicDefinitionPrefix1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBasicDefinitionPrefix1" ):
                listener.exitRuleBasicDefinitionPrefix1(self)


    class RuleBasicDefinitionPrefix2Context(RuleBasicDefinitionPrefixContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBasicDefinitionPrefixContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_VARIATION(self):
            return self.getToken(SysMLv2Parser.K_VARIATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBasicDefinitionPrefix2" ):
                listener.enterRuleBasicDefinitionPrefix2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBasicDefinitionPrefix2" ):
                listener.exitRuleBasicDefinitionPrefix2(self)



    def ruleBasicDefinitionPrefix(self):

        localctx = SysMLv2Parser.RuleBasicDefinitionPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_ruleBasicDefinitionPrefix)
        try:
            self.state = 1564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                localctx = SysMLv2Parser.RuleBasicDefinitionPrefix1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1562
                self.match(SysMLv2Parser.K_ABSTRACT)
                pass
            elif token in [30]:
                localctx = SysMLv2Parser.RuleBasicDefinitionPrefix2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1563
                self.match(SysMLv2Parser.K_VARIATION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefinitionExtensionKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePrefixMetadataMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePrefixMetadataMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefinitionExtensionKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionExtensionKeyword" ):
                listener.enterRuleDefinitionExtensionKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionExtensionKeyword" ):
                listener.exitRuleDefinitionExtensionKeyword(self)




    def ruleDefinitionExtensionKeyword(self):

        localctx = SysMLv2Parser.RuleDefinitionExtensionKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_ruleDefinitionExtensionKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.rulePrefixMetadataMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefinitionPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBasicDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBasicDefinitionPrefixContext,0)


        def ruleDefinitionExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleDefinitionExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefinitionPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionPrefix" ):
                listener.enterRuleDefinitionPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionPrefix" ):
                listener.exitRuleDefinitionPrefix(self)




    def ruleDefinitionPrefix(self):

        localctx = SysMLv2Parser.RuleDefinitionPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_ruleDefinitionPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==30:
                self.state = 1568
                self.ruleBasicDefinitionPrefix()


            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1571
                self.ruleDefinitionExtensionKeyword()
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleDefinitionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinition" ):
                listener.enterRuleDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinition" ):
                listener.exitRuleDefinition(self)




    def ruleDefinition(self):

        localctx = SysMLv2Parser.RuleDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ruleDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.ruleDefinitionDeclaration()
            self.state = 1578
            self.ruleDefinitionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefinitionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)


        def ruleSubclassificationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSubclassificationPartContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefinitionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionDeclaration" ):
                listener.enterRuleDefinitionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionDeclaration" ):
                listener.exitRuleDefinitionDeclaration(self)




    def ruleDefinitionDeclaration(self):

        localctx = SysMLv2Parser.RuleDefinitionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ruleDefinitionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                self.state = 1580
                self.ruleIdentification()


            self.state = 1584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23 or _la==143:
                self.state = 1583
                self.ruleSubclassificationPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefinitionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefinitionBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleDefinitionBody1Context(RuleDefinitionBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionBody1" ):
                listener.enterRuleDefinitionBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionBody1" ):
                listener.exitRuleDefinitionBody1(self)


    class RuleDefinitionBody2Context(RuleDefinitionBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleDefinitionBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleDefinitionBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyItemContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionBody2" ):
                listener.enterRuleDefinitionBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionBody2" ):
                listener.exitRuleDefinitionBody2(self)



    def ruleDefinitionBody(self):

        localctx = SysMLv2Parser.RuleDefinitionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_ruleDefinitionBody)
        self._la = 0 # Token type
        try:
            self.state = 1595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleDefinitionBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1586
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleDefinitionBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1587
                self.match(SysMLv2Parser.LBRACE)
                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453518540830674) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2382369030299440161) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 188978561479) != 0):
                    self.state = 1588
                    self.ruleDefinitionBodyItem()
                    self.state = 1593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1594
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefinitionBodyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefinitionBodyItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleDefinitionBodyItem6Context(RuleDefinitionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionBodyItem6" ):
                listener.enterRuleDefinitionBodyItem6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionBodyItem6" ):
                listener.exitRuleDefinitionBodyItem6(self)


    class RuleDefinitionBodyItem5Context(RuleDefinitionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAliasMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAliasMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionBodyItem5" ):
                listener.enterRuleDefinitionBodyItem5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionBodyItem5" ):
                listener.exitRuleDefinitionBodyItem5(self)


    class RuleDefinitionBodyItem4Context(RuleDefinitionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOccurrenceUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsageMemberContext,0)

        def ruleEmptySuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptySuccessionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionBodyItem4" ):
                listener.enterRuleDefinitionBodyItem4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionBodyItem4" ):
                listener.exitRuleDefinitionBodyItem4(self)


    class RuleDefinitionBodyItem3Context(RuleDefinitionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleNonOccurrenceUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNonOccurrenceUsageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionBodyItem3" ):
                listener.enterRuleDefinitionBodyItem3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionBodyItem3" ):
                listener.exitRuleDefinitionBodyItem3(self)


    class RuleDefinitionBodyItem2Context(RuleDefinitionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleVariantUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVariantUsageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionBodyItem2" ):
                listener.enterRuleDefinitionBodyItem2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionBodyItem2" ):
                listener.exitRuleDefinitionBodyItem2(self)


    class RuleDefinitionBodyItem1Context(RuleDefinitionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleDefinitionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDefinitionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionBodyItem1" ):
                listener.enterRuleDefinitionBodyItem1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionBodyItem1" ):
                listener.exitRuleDefinitionBodyItem1(self)



    def ruleDefinitionBodyItem(self):

        localctx = SysMLv2Parser.RuleDefinitionBodyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_ruleDefinitionBodyItem)
        self._la = 0 # Token type
        try:
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleDefinitionBodyItem1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1597
                self.ruleDefinitionMember()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleDefinitionBodyItem2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1598
                self.ruleVariantUsageMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleDefinitionBodyItem3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1599
                self.ruleNonOccurrenceUsageMember()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleDefinitionBodyItem4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 1600
                    self.ruleEmptySuccessionMember()


                self.state = 1603
                self.ruleOccurrenceUsageMember()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleDefinitionBodyItem5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1604
                self.ruleAliasMember()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleDefinitionBodyItem6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1605
                self.ruleImport()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefinitionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleDefinitionElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefinitionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefinitionMember" ):
                listener.enterRuleDefinitionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefinitionMember" ):
                listener.exitRuleDefinitionMember(self)




    def ruleDefinitionMember(self):

        localctx = SysMLv2Parser.RuleDefinitionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_ruleDefinitionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.ruleMemberPrefix()
            self.state = 1609
            self.ruleDefinitionElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleVariantUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def K_VARIANT(self):
            return self.getToken(SysMLv2Parser.K_VARIANT, 0)

        def ruleVariantUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVariantUsageElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleVariantUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageMember" ):
                listener.enterRuleVariantUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageMember" ):
                listener.exitRuleVariantUsageMember(self)




    def ruleVariantUsageMember(self):

        localctx = SysMLv2Parser.RuleVariantUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_ruleVariantUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.ruleMemberPrefix()
            self.state = 1612
            self.match(SysMLv2Parser.K_VARIANT)
            self.state = 1613
            self.ruleVariantUsageElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNonOccurrenceUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleNonOccurrenceUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNonOccurrenceUsageElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNonOccurrenceUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNonOccurrenceUsageMember" ):
                listener.enterRuleNonOccurrenceUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNonOccurrenceUsageMember" ):
                listener.exitRuleNonOccurrenceUsageMember(self)




    def ruleNonOccurrenceUsageMember(self):

        localctx = SysMLv2Parser.RuleNonOccurrenceUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_ruleNonOccurrenceUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self.ruleMemberPrefix()
            self.state = 1616
            self.ruleNonOccurrenceUsageElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOccurrenceUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleOccurrenceUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsageElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOccurrenceUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceUsageMember" ):
                listener.enterRuleOccurrenceUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceUsageMember" ):
                listener.exitRuleOccurrenceUsageMember(self)




    def ruleOccurrenceUsageMember(self):

        localctx = SysMLv2Parser.RuleOccurrenceUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_ruleOccurrenceUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.ruleMemberPrefix()
            self.state = 1619
            self.ruleOccurrenceUsageElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStructureUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleStructureUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStructureUsageElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStructureUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageMember" ):
                listener.enterRuleStructureUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageMember" ):
                listener.exitRuleStructureUsageMember(self)




    def ruleStructureUsageMember(self):

        localctx = SysMLv2Parser.RuleStructureUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_ruleStructureUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.ruleMemberPrefix()
            self.state = 1622
            self.ruleStructureUsageElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBehaviorUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleBehaviorUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBehaviorUsageElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBehaviorUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageMember" ):
                listener.enterRuleBehaviorUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageMember" ):
                listener.exitRuleBehaviorUsageMember(self)




    def ruleBehaviorUsageMember(self):

        localctx = SysMLv2Parser.RuleBehaviorUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_ruleBehaviorUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.ruleMemberPrefix()
            self.state = 1625
            self.ruleBehaviorUsageElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRefPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFeatureDirection(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureDirectionContext,0)


        def K_READONLY(self):
            return self.getToken(SysMLv2Parser.K_READONLY, 0)

        def K_DERIVED(self):
            return self.getToken(SysMLv2Parser.K_DERIVED, 0)

        def K_END(self):
            return self.getToken(SysMLv2Parser.K_END, 0)

        def K_ABSTRACT(self):
            return self.getToken(SysMLv2Parser.K_ABSTRACT, 0)

        def K_VARIATION(self):
            return self.getToken(SysMLv2Parser.K_VARIATION, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRefPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRefPrefix" ):
                listener.enterRuleRefPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRefPrefix" ):
                listener.exitRuleRefPrefix(self)




    def ruleRefPrefix(self):

        localctx = SysMLv2Parser.RuleRefPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_ruleRefPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 844424930131969) != 0):
                self.state = 1627
                self.ruleFeatureDirection()


            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==30:
                self.state = 1630
                _la = self._input.LA(1)
                if not(_la==12 or _la==30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 1633
                self.match(SysMLv2Parser.K_READONLY)


            self.state = 1637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 1636
                self.match(SysMLv2Parser.K_DERIVED)


            self.state = 1640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1639
                self.match(SysMLv2Parser.K_END)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBasicUsagePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRefPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRefPrefixContext,0)


        def K_REF(self):
            return self.getToken(SysMLv2Parser.K_REF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBasicUsagePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBasicUsagePrefix" ):
                listener.enterRuleBasicUsagePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBasicUsagePrefix" ):
                listener.exitRuleBasicUsagePrefix(self)




    def ruleBasicUsagePrefix(self):

        localctx = SysMLv2Parser.RuleBasicUsagePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_ruleBasicUsagePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.ruleRefPrefix()
            self.state = 1644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1643
                self.match(SysMLv2Parser.K_REF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUsageExtensionKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePrefixMetadataMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePrefixMetadataMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUsageExtensionKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUsageExtensionKeyword" ):
                listener.enterRuleUsageExtensionKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUsageExtensionKeyword" ):
                listener.exitRuleUsageExtensionKeyword(self)




    def ruleUsageExtensionKeyword(self):

        localctx = SysMLv2Parser.RuleUsageExtensionKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_ruleUsageExtensionKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1646
            self.rulePrefixMetadataMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUsagePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBasicUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBasicUsagePrefixContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUsagePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUsagePrefix" ):
                listener.enterRuleUsagePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUsagePrefix" ):
                listener.exitRuleUsagePrefix(self)




    def ruleUsagePrefix(self):

        localctx = SysMLv2Parser.RuleUsagePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_ruleUsagePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.ruleBasicUsagePrefix()
            self.state = 1652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1649
                self.ruleUsageExtensionKeyword()
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsageCompletion(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageCompletionContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUsage" ):
                listener.enterRuleUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUsage" ):
                listener.exitRuleUsage(self)




    def ruleUsage(self):

        localctx = SysMLv2Parser.RuleUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_ruleUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                self.state = 1655
                self.ruleUsageDeclaration()


            self.state = 1658
            self.ruleUsageCompletion()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUsageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFeatureDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUsageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUsageDeclaration" ):
                listener.enterRuleUsageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUsageDeclaration" ):
                listener.exitRuleUsageDeclaration(self)




    def ruleUsageDeclaration(self):

        localctx = SysMLv2Parser.RuleUsageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_ruleUsageDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1660
            self.ruleFeatureDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUsageCompletionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageBodyContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUsageCompletion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUsageCompletion" ):
                listener.enterRuleUsageCompletion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUsageCompletion" ):
                listener.exitRuleUsageCompletion(self)




    def ruleUsageCompletion(self):

        localctx = SysMLv2Parser.RuleUsageCompletionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_ruleUsageCompletion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 1662
                self.ruleValuePart()


            self.state = 1665
            self.ruleUsageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUsageBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleDefinitionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUsageBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUsageBody" ):
                listener.enterRuleUsageBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUsageBody" ):
                listener.exitRuleUsageBody(self)




    def ruleUsageBody(self):

        localctx = SysMLv2Parser.RuleUsageBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ruleUsageBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.ruleDefinitionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleValuePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFeatureValue(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureValueContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleValuePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleValuePart" ):
                listener.enterRuleValuePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleValuePart" ):
                listener.exitRuleValuePart(self)




    def ruleValuePart(self):

        localctx = SysMLv2Parser.RuleValuePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_ruleValuePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.ruleFeatureValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def OP_EQ(self):
            return self.getToken(SysMLv2Parser.OP_EQ, 0)

        def OP_COLON_EQ(self):
            return self.getToken(SysMLv2Parser.OP_COLON_EQ, 0)

        def K_DEFAULT(self):
            return self.getToken(SysMLv2Parser.K_DEFAULT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureValue" ):
                listener.enterRuleFeatureValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureValue" ):
                listener.exitRuleFeatureValue(self)




    def ruleFeatureValue(self):

        localctx = SysMLv2Parser.RuleFeatureValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_ruleFeatureValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [147]:
                self.state = 1671
                self.match(SysMLv2Parser.OP_EQ)
                pass
            elif token in [148]:
                self.state = 1672
                self.match(SysMLv2Parser.OP_COLON_EQ)
                pass
            elif token in [35]:
                self.state = 1673
                self.match(SysMLv2Parser.K_DEFAULT)
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147 or _la==148:
                    self.state = 1674
                    _la = self._input.LA(1)
                    if not(_la==147 or _la==148):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1679
            self.ruleOwnedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleReferenceKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REF(self):
            return self.getToken(SysMLv2Parser.K_REF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleReferenceKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleReferenceKeyword" ):
                listener.enterRuleReferenceKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleReferenceKeyword" ):
                listener.exitRuleReferenceKeyword(self)




    def ruleReferenceKeyword(self):

        localctx = SysMLv2Parser.RuleReferenceKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_ruleReferenceKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            self.match(SysMLv2Parser.K_REF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleReferenceUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleReferenceKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferenceKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleReferenceUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleReferenceUsageKeyword" ):
                listener.enterRuleReferenceUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleReferenceUsageKeyword" ):
                listener.exitRuleReferenceUsageKeyword(self)




    def ruleReferenceUsageKeyword(self):

        localctx = SysMLv2Parser.RuleReferenceUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_ruleReferenceUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.ruleReferenceKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefaultReferenceUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRefPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRefPrefixContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def ruleUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageBodyContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefaultReferenceUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefaultReferenceUsage" ):
                listener.enterRuleDefaultReferenceUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefaultReferenceUsage" ):
                listener.exitRuleDefaultReferenceUsage(self)




    def ruleDefaultReferenceUsage(self):

        localctx = SysMLv2Parser.RuleDefaultReferenceUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_ruleDefaultReferenceUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1685
            self.ruleRefPrefix()
            self.state = 1686
            self.ruleUsageDeclaration()
            self.state = 1688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 1687
                self.ruleValuePart()


            self.state = 1690
            self.ruleUsageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleReferenceUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRefPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRefPrefixContext,0)


        def ruleReferenceUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferenceUsageKeywordContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleReferenceUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleReferenceUsage" ):
                listener.enterRuleReferenceUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleReferenceUsage" ):
                listener.exitRuleReferenceUsage(self)




    def ruleReferenceUsage(self):

        localctx = SysMLv2Parser.RuleReferenceUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_ruleReferenceUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.ruleRefPrefix()
            self.state = 1693
            self.ruleReferenceUsageKeyword()
            self.state = 1694
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleVariantReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def ruleUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageBodyContext,0)


        def ruleFeatureSpecialization(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureSpecializationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleVariantReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantReference" ):
                listener.enterRuleVariantReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantReference" ):
                listener.exitRuleVariantReference(self)




    def ruleVariantReference(self):

        localctx = SysMLv2Parser.RuleVariantReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_ruleVariantReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.ruleOwnedReferenceSubsetting()
            self.state = 1700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 872431616) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 113) != 0):
                self.state = 1697
                self.ruleFeatureSpecialization()
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1703
            self.ruleUsageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNonOccurrenceUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNonOccurrenceUsageElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleNonOccurrenceUsageElement7Context(RuleNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleExtendedUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExtendedUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNonOccurrenceUsageElement7" ):
                listener.enterRuleNonOccurrenceUsageElement7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNonOccurrenceUsageElement7" ):
                listener.exitRuleNonOccurrenceUsageElement7(self)


    class RuleNonOccurrenceUsageElement5Context(RuleNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBindingConnectorAsUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBindingConnectorAsUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNonOccurrenceUsageElement5" ):
                listener.enterRuleNonOccurrenceUsageElement5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNonOccurrenceUsageElement5" ):
                listener.exitRuleNonOccurrenceUsageElement5(self)


    class RuleNonOccurrenceUsageElement6Context(RuleNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSuccessionAsUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSuccessionAsUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNonOccurrenceUsageElement6" ):
                listener.enterRuleNonOccurrenceUsageElement6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNonOccurrenceUsageElement6" ):
                listener.exitRuleNonOccurrenceUsageElement6(self)


    class RuleNonOccurrenceUsageElement3Context(RuleNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAttributeUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAttributeUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNonOccurrenceUsageElement3" ):
                listener.enterRuleNonOccurrenceUsageElement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNonOccurrenceUsageElement3" ):
                listener.exitRuleNonOccurrenceUsageElement3(self)


    class RuleNonOccurrenceUsageElement4Context(RuleNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleEnumerationUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNonOccurrenceUsageElement4" ):
                listener.enterRuleNonOccurrenceUsageElement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNonOccurrenceUsageElement4" ):
                listener.exitRuleNonOccurrenceUsageElement4(self)


    class RuleNonOccurrenceUsageElement1Context(RuleNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDefaultReferenceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefaultReferenceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNonOccurrenceUsageElement1" ):
                listener.enterRuleNonOccurrenceUsageElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNonOccurrenceUsageElement1" ):
                listener.exitRuleNonOccurrenceUsageElement1(self)


    class RuleNonOccurrenceUsageElement2Context(RuleNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleReferenceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferenceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNonOccurrenceUsageElement2" ):
                listener.enterRuleNonOccurrenceUsageElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNonOccurrenceUsageElement2" ):
                listener.exitRuleNonOccurrenceUsageElement2(self)



    def ruleNonOccurrenceUsageElement(self):

        localctx = SysMLv2Parser.RuleNonOccurrenceUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_ruleNonOccurrenceUsageElement)
        try:
            self.state = 1712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleNonOccurrenceUsageElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1705
                self.ruleDefaultReferenceUsage()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleNonOccurrenceUsageElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1706
                self.ruleReferenceUsage()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleNonOccurrenceUsageElement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1707
                self.ruleAttributeUsage()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleNonOccurrenceUsageElement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1708
                self.ruleEnumerationUsage()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleNonOccurrenceUsageElement5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1709
                self.ruleBindingConnectorAsUsage()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleNonOccurrenceUsageElement6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1710
                self.ruleSuccessionAsUsage()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleNonOccurrenceUsageElement7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1711
                self.ruleExtendedUsage()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOccurrenceUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOccurrenceUsageElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleOccurrenceUsageElement2Context(RuleOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBehaviorUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBehaviorUsageElementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceUsageElement2" ):
                listener.enterRuleOccurrenceUsageElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceUsageElement2" ):
                listener.exitRuleOccurrenceUsageElement2(self)


    class RuleOccurrenceUsageElement1Context(RuleOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleStructureUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStructureUsageElementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceUsageElement1" ):
                listener.enterRuleOccurrenceUsageElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceUsageElement1" ):
                listener.exitRuleOccurrenceUsageElement1(self)



    def ruleOccurrenceUsageElement(self):

        localctx = SysMLv2Parser.RuleOccurrenceUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_ruleOccurrenceUsageElement)
        try:
            self.state = 1716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleOccurrenceUsageElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1714
                self.ruleStructureUsageElement()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleOccurrenceUsageElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1715
                self.ruleBehaviorUsageElement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStructureUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStructureUsageElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleStructureUsageElement9Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePortUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement9" ):
                listener.enterRuleStructureUsageElement9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement9" ):
                listener.exitRuleStructureUsageElement9(self)


    class RuleStructureUsageElement8Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleRenderingUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRenderingUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement8" ):
                listener.enterRuleStructureUsageElement8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement8" ):
                listener.exitRuleStructureUsageElement8(self)


    class RuleStructureUsageElement7Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleViewUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement7" ):
                listener.enterRuleStructureUsageElement7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement7" ):
                listener.exitRuleStructureUsageElement7(self)


    class RuleStructureUsageElement6Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePartUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePartUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement6" ):
                listener.enterRuleStructureUsageElement6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement6" ):
                listener.exitRuleStructureUsageElement6(self)


    class RuleStructureUsageElement5Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleItemUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement5" ):
                listener.enterRuleStructureUsageElement5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement5" ):
                listener.exitRuleStructureUsageElement5(self)


    class RuleStructureUsageElement4Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleEventOccurrenceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEventOccurrenceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement4" ):
                listener.enterRuleStructureUsageElement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement4" ):
                listener.exitRuleStructureUsageElement4(self)


    class RuleStructureUsageElement3Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePortionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement3" ):
                listener.enterRuleStructureUsageElement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement3" ):
                listener.exitRuleStructureUsageElement3(self)


    class RuleStructureUsageElement2Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleIndividualUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIndividualUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement2" ):
                listener.enterRuleStructureUsageElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement2" ):
                listener.exitRuleStructureUsageElement2(self)


    class RuleStructureUsageElement1Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOccurrenceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement1" ):
                listener.enterRuleStructureUsageElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement1" ):
                listener.exitRuleStructureUsageElement1(self)


    class RuleStructureUsageElement10Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConnectionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement10" ):
                listener.enterRuleStructureUsageElement10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement10" ):
                listener.exitRuleStructureUsageElement10(self)


    class RuleStructureUsageElement11Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleInterfaceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement11" ):
                listener.enterRuleStructureUsageElement11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement11" ):
                listener.exitRuleStructureUsageElement11(self)


    class RuleStructureUsageElement12Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAllocationUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocationUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement12" ):
                listener.enterRuleStructureUsageElement12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement12" ):
                listener.exitRuleStructureUsageElement12(self)


    class RuleStructureUsageElement13Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMessage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMessageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement13" ):
                listener.enterRuleStructureUsageElement13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement13" ):
                listener.exitRuleStructureUsageElement13(self)


    class RuleStructureUsageElement14Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFlowConnectionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowConnectionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement14" ):
                listener.enterRuleStructureUsageElement14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement14" ):
                listener.exitRuleStructureUsageElement14(self)


    class RuleStructureUsageElement15Context(RuleStructureUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStructureUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSuccessionFlowConnectionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSuccessionFlowConnectionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStructureUsageElement15" ):
                listener.enterRuleStructureUsageElement15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStructureUsageElement15" ):
                listener.exitRuleStructureUsageElement15(self)



    def ruleStructureUsageElement(self):

        localctx = SysMLv2Parser.RuleStructureUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_ruleStructureUsageElement)
        try:
            self.state = 1733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleStructureUsageElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1718
                self.ruleOccurrenceUsage()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleStructureUsageElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1719
                self.ruleIndividualUsage()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleStructureUsageElement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1720
                self.rulePortionUsage()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleStructureUsageElement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1721
                self.ruleEventOccurrenceUsage()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleStructureUsageElement5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1722
                self.ruleItemUsage()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleStructureUsageElement6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1723
                self.rulePartUsage()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleStructureUsageElement7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1724
                self.ruleViewUsage()
                pass

            elif la_ == 8:
                localctx = SysMLv2Parser.RuleStructureUsageElement8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1725
                self.ruleRenderingUsage()
                pass

            elif la_ == 9:
                localctx = SysMLv2Parser.RuleStructureUsageElement9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1726
                self.rulePortUsage()
                pass

            elif la_ == 10:
                localctx = SysMLv2Parser.RuleStructureUsageElement10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1727
                self.ruleConnectionUsage()
                pass

            elif la_ == 11:
                localctx = SysMLv2Parser.RuleStructureUsageElement11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1728
                self.ruleInterfaceUsage()
                pass

            elif la_ == 12:
                localctx = SysMLv2Parser.RuleStructureUsageElement12Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1729
                self.ruleAllocationUsage()
                pass

            elif la_ == 13:
                localctx = SysMLv2Parser.RuleStructureUsageElement13Context(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1730
                self.ruleMessage()
                pass

            elif la_ == 14:
                localctx = SysMLv2Parser.RuleStructureUsageElement14Context(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1731
                self.ruleFlowConnectionUsage()
                pass

            elif la_ == 15:
                localctx = SysMLv2Parser.RuleStructureUsageElement15Context(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1732
                self.ruleSuccessionFlowConnectionUsage()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBehaviorUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBehaviorUsageElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleBehaviorUsageElement12Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePerformActionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePerformActionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement12" ):
                listener.enterRuleBehaviorUsageElement12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement12" ):
                listener.exitRuleBehaviorUsageElement12(self)


    class RuleBehaviorUsageElement13Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleExhibitStateUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExhibitStateUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement13" ):
                listener.enterRuleBehaviorUsageElement13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement13" ):
                listener.exitRuleBehaviorUsageElement13(self)


    class RuleBehaviorUsageElement10Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleUseCaseUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUseCaseUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement10" ):
                listener.enterRuleBehaviorUsageElement10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement10" ):
                listener.exitRuleBehaviorUsageElement10(self)


    class RuleBehaviorUsageElement9Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleVerificationCaseUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVerificationCaseUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement9" ):
                listener.enterRuleBehaviorUsageElement9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement9" ):
                listener.exitRuleBehaviorUsageElement9(self)


    class RuleBehaviorUsageElement11Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleViewpointUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewpointUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement11" ):
                listener.enterRuleBehaviorUsageElement11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement11" ):
                listener.exitRuleBehaviorUsageElement11(self)


    class RuleBehaviorUsageElement16Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSatisfyRequirementUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSatisfyRequirementUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement16" ):
                listener.enterRuleBehaviorUsageElement16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement16" ):
                listener.exitRuleBehaviorUsageElement16(self)


    class RuleBehaviorUsageElement14Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleIncludeUseCaseUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIncludeUseCaseUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement14" ):
                listener.enterRuleBehaviorUsageElement14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement14" ):
                listener.exitRuleBehaviorUsageElement14(self)


    class RuleBehaviorUsageElement15Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAssertConstraintUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAssertConstraintUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement15" ):
                listener.enterRuleBehaviorUsageElement15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement15" ):
                listener.exitRuleBehaviorUsageElement15(self)


    class RuleBehaviorUsageElement4Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConstraintUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement4" ):
                listener.enterRuleBehaviorUsageElement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement4" ):
                listener.exitRuleBehaviorUsageElement4(self)


    class RuleBehaviorUsageElement3Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleStateUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement3" ):
                listener.enterRuleBehaviorUsageElement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement3" ):
                listener.exitRuleBehaviorUsageElement3(self)


    class RuleBehaviorUsageElement2Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleCalculationUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement2" ):
                listener.enterRuleBehaviorUsageElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement2" ):
                listener.exitRuleBehaviorUsageElement2(self)


    class RuleBehaviorUsageElement1Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleActionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement1" ):
                listener.enterRuleBehaviorUsageElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement1" ):
                listener.exitRuleBehaviorUsageElement1(self)


    class RuleBehaviorUsageElement8Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAnalysisCaseUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAnalysisCaseUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement8" ):
                listener.enterRuleBehaviorUsageElement8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement8" ):
                listener.exitRuleBehaviorUsageElement8(self)


    class RuleBehaviorUsageElement7Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleCaseUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement7" ):
                listener.enterRuleBehaviorUsageElement7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement7" ):
                listener.exitRuleBehaviorUsageElement7(self)


    class RuleBehaviorUsageElement6Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConcernUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConcernUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement6" ):
                listener.enterRuleBehaviorUsageElement6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement6" ):
                listener.exitRuleBehaviorUsageElement6(self)


    class RuleBehaviorUsageElement5Context(RuleBehaviorUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBehaviorUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleRequirementUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBehaviorUsageElement5" ):
                listener.enterRuleBehaviorUsageElement5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBehaviorUsageElement5" ):
                listener.exitRuleBehaviorUsageElement5(self)



    def ruleBehaviorUsageElement(self):

        localctx = SysMLv2Parser.RuleBehaviorUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_ruleBehaviorUsageElement)
        try:
            self.state = 1751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1735
                self.ruleActionUsage()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1736
                self.ruleCalculationUsage()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1737
                self.ruleStateUsage()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1738
                self.ruleConstraintUsage()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1739
                self.ruleRequirementUsage()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1740
                self.ruleConcernUsage()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1741
                self.ruleCaseUsage()
                pass

            elif la_ == 8:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1742
                self.ruleAnalysisCaseUsage()
                pass

            elif la_ == 9:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1743
                self.ruleVerificationCaseUsage()
                pass

            elif la_ == 10:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1744
                self.ruleUseCaseUsage()
                pass

            elif la_ == 11:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1745
                self.ruleViewpointUsage()
                pass

            elif la_ == 12:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement12Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1746
                self.rulePerformActionUsage()
                pass

            elif la_ == 13:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement13Context(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1747
                self.ruleExhibitStateUsage()
                pass

            elif la_ == 14:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement14Context(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1748
                self.ruleIncludeUseCaseUsage()
                pass

            elif la_ == 15:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement15Context(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1749
                self.ruleAssertConstraintUsage()
                pass

            elif la_ == 16:
                localctx = SysMLv2Parser.RuleBehaviorUsageElement16Context(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1750
                self.ruleSatisfyRequirementUsage()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleVariantUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleVariantUsageElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleVariantUsageElement5Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSuccessionAsUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSuccessionAsUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement5" ):
                listener.enterRuleVariantUsageElement5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement5" ):
                listener.exitRuleVariantUsageElement5(self)


    class RuleVariantUsageElement4Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBindingConnectorAsUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBindingConnectorAsUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement4" ):
                listener.enterRuleVariantUsageElement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement4" ):
                listener.exitRuleVariantUsageElement4(self)


    class RuleVariantUsageElement7Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleIndividualUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIndividualUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement7" ):
                listener.enterRuleVariantUsageElement7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement7" ):
                listener.exitRuleVariantUsageElement7(self)


    class RuleVariantUsageElement6Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOccurrenceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement6" ):
                listener.enterRuleVariantUsageElement6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement6" ):
                listener.exitRuleVariantUsageElement6(self)


    class RuleVariantUsageElement9Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleEventOccurrenceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEventOccurrenceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement9" ):
                listener.enterRuleVariantUsageElement9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement9" ):
                listener.exitRuleVariantUsageElement9(self)


    class RuleVariantUsageElement8Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePortionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement8" ):
                listener.enterRuleVariantUsageElement8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement8" ):
                listener.exitRuleVariantUsageElement8(self)


    class RuleVariantUsageElement19Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFlowConnectionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowConnectionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement19" ):
                listener.enterRuleVariantUsageElement19(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement19" ):
                listener.exitRuleVariantUsageElement19(self)


    class RuleVariantUsageElement1Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleVariantReference(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVariantReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement1" ):
                listener.enterRuleVariantUsageElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement1" ):
                listener.exitRuleVariantUsageElement1(self)


    class RuleVariantUsageElement17Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAllocationUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocationUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement17" ):
                listener.enterRuleVariantUsageElement17(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement17" ):
                listener.exitRuleVariantUsageElement17(self)


    class RuleVariantUsageElement18Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMessage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMessageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement18" ):
                listener.enterRuleVariantUsageElement18(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement18" ):
                listener.exitRuleVariantUsageElement18(self)


    class RuleVariantUsageElement3Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAttributeUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAttributeUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement3" ):
                listener.enterRuleVariantUsageElement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement3" ):
                listener.exitRuleVariantUsageElement3(self)


    class RuleVariantUsageElement15Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConnectionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement15" ):
                listener.enterRuleVariantUsageElement15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement15" ):
                listener.exitRuleVariantUsageElement15(self)


    class RuleVariantUsageElement2Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleReferenceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferenceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement2" ):
                listener.enterRuleVariantUsageElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement2" ):
                listener.exitRuleVariantUsageElement2(self)


    class RuleVariantUsageElement16Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleInterfaceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement16" ):
                listener.enterRuleVariantUsageElement16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement16" ):
                listener.exitRuleVariantUsageElement16(self)


    class RuleVariantUsageElement13Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleRenderingUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRenderingUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement13" ):
                listener.enterRuleVariantUsageElement13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement13" ):
                listener.exitRuleVariantUsageElement13(self)


    class RuleVariantUsageElement14Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePortUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement14" ):
                listener.enterRuleVariantUsageElement14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement14" ):
                listener.exitRuleVariantUsageElement14(self)


    class RuleVariantUsageElement11Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePartUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePartUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement11" ):
                listener.enterRuleVariantUsageElement11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement11" ):
                listener.exitRuleVariantUsageElement11(self)


    class RuleVariantUsageElement12Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleViewUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement12" ):
                listener.enterRuleVariantUsageElement12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement12" ):
                listener.exitRuleVariantUsageElement12(self)


    class RuleVariantUsageElement20Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSuccessionFlowConnectionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSuccessionFlowConnectionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement20" ):
                listener.enterRuleVariantUsageElement20(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement20" ):
                listener.exitRuleVariantUsageElement20(self)


    class RuleVariantUsageElement10Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleItemUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement10" ):
                listener.enterRuleVariantUsageElement10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement10" ):
                listener.exitRuleVariantUsageElement10(self)


    class RuleVariantUsageElement21Context(RuleVariantUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVariantUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBehaviorUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBehaviorUsageElementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVariantUsageElement21" ):
                listener.enterRuleVariantUsageElement21(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVariantUsageElement21" ):
                listener.exitRuleVariantUsageElement21(self)



    def ruleVariantUsageElement(self):

        localctx = SysMLv2Parser.RuleVariantUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_ruleVariantUsageElement)
        try:
            self.state = 1774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleVariantUsageElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1753
                self.ruleVariantReference()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleVariantUsageElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1754
                self.ruleReferenceUsage()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleVariantUsageElement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1755
                self.ruleAttributeUsage()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleVariantUsageElement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1756
                self.ruleBindingConnectorAsUsage()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleVariantUsageElement5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1757
                self.ruleSuccessionAsUsage()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleVariantUsageElement6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1758
                self.ruleOccurrenceUsage()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleVariantUsageElement7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1759
                self.ruleIndividualUsage()
                pass

            elif la_ == 8:
                localctx = SysMLv2Parser.RuleVariantUsageElement8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1760
                self.rulePortionUsage()
                pass

            elif la_ == 9:
                localctx = SysMLv2Parser.RuleVariantUsageElement9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1761
                self.ruleEventOccurrenceUsage()
                pass

            elif la_ == 10:
                localctx = SysMLv2Parser.RuleVariantUsageElement10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1762
                self.ruleItemUsage()
                pass

            elif la_ == 11:
                localctx = SysMLv2Parser.RuleVariantUsageElement11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1763
                self.rulePartUsage()
                pass

            elif la_ == 12:
                localctx = SysMLv2Parser.RuleVariantUsageElement12Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1764
                self.ruleViewUsage()
                pass

            elif la_ == 13:
                localctx = SysMLv2Parser.RuleVariantUsageElement13Context(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1765
                self.ruleRenderingUsage()
                pass

            elif la_ == 14:
                localctx = SysMLv2Parser.RuleVariantUsageElement14Context(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1766
                self.rulePortUsage()
                pass

            elif la_ == 15:
                localctx = SysMLv2Parser.RuleVariantUsageElement15Context(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1767
                self.ruleConnectionUsage()
                pass

            elif la_ == 16:
                localctx = SysMLv2Parser.RuleVariantUsageElement16Context(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1768
                self.ruleInterfaceUsage()
                pass

            elif la_ == 17:
                localctx = SysMLv2Parser.RuleVariantUsageElement17Context(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1769
                self.ruleAllocationUsage()
                pass

            elif la_ == 18:
                localctx = SysMLv2Parser.RuleVariantUsageElement18Context(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1770
                self.ruleMessage()
                pass

            elif la_ == 19:
                localctx = SysMLv2Parser.RuleVariantUsageElement19Context(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1771
                self.ruleFlowConnectionUsage()
                pass

            elif la_ == 20:
                localctx = SysMLv2Parser.RuleVariantUsageElement20Context(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1772
                self.ruleSuccessionFlowConnectionUsage()
                pass

            elif la_ == 21:
                localctx = SysMLv2Parser.RuleVariantUsageElement21Context(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1773
                self.ruleBehaviorUsageElement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExtendedDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def ruleBasicDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBasicDefinitionPrefixContext,0)


        def ruleDefinitionExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleDefinitionExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExtendedDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExtendedDefinition" ):
                listener.enterRuleExtendedDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExtendedDefinition" ):
                listener.exitRuleExtendedDefinition(self)




    def ruleExtendedDefinition(self):

        localctx = SysMLv2Parser.RuleExtendedDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_ruleExtendedDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==30:
                self.state = 1776
                self.ruleBasicDefinitionPrefix()


            self.state = 1780 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1779
                self.ruleDefinitionExtensionKeyword()
                self.state = 1782 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==138):
                    break

            self.state = 1784
            self.match(SysMLv2Parser.K_DEF)
            self.state = 1785
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExtendedUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBasicUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBasicUsagePrefixContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExtendedUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExtendedUsage" ):
                listener.enterRuleExtendedUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExtendedUsage" ):
                listener.exitRuleExtendedUsage(self)




    def ruleExtendedUsage(self):

        localctx = SysMLv2Parser.RuleExtendedUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_ruleExtendedUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.ruleBasicUsagePrefix()
            self.state = 1789 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1788
                self.ruleUsageExtensionKeyword()
                self.state = 1791 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==138):
                    break

            self.state = 1793
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAttributeKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ATTRIBUTE(self):
            return self.getToken(SysMLv2Parser.K_ATTRIBUTE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAttributeKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAttributeKeyword" ):
                listener.enterRuleAttributeKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAttributeKeyword" ):
                listener.exitRuleAttributeKeyword(self)




    def ruleAttributeKeyword(self):

        localctx = SysMLv2Parser.RuleAttributeKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_ruleAttributeKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.match(SysMLv2Parser.K_ATTRIBUTE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAttributeDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAttributeKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAttributeKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAttributeDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAttributeDefKeyword" ):
                listener.enterRuleAttributeDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAttributeDefKeyword" ):
                listener.exitRuleAttributeDefKeyword(self)




    def ruleAttributeDefKeyword(self):

        localctx = SysMLv2Parser.RuleAttributeDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_ruleAttributeDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.ruleAttributeKeyword()
            self.state = 1798
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAttributeUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAttributeKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAttributeKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAttributeUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAttributeUsageKeyword" ):
                listener.enterRuleAttributeUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAttributeUsageKeyword" ):
                listener.exitRuleAttributeUsageKeyword(self)




    def ruleAttributeUsageKeyword(self):

        localctx = SysMLv2Parser.RuleAttributeUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_ruleAttributeUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self.ruleAttributeKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAttributeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionPrefixContext,0)


        def ruleAttributeDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAttributeDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAttributeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAttributeDefinition" ):
                listener.enterRuleAttributeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAttributeDefinition" ):
                listener.exitRuleAttributeDefinition(self)




    def ruleAttributeDefinition(self):

        localctx = SysMLv2Parser.RuleAttributeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_ruleAttributeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            self.ruleDefinitionPrefix()
            self.state = 1803
            self.ruleAttributeDefKeyword()
            self.state = 1804
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAttributeUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsagePrefixContext,0)


        def ruleAttributeUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAttributeUsageKeywordContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAttributeUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAttributeUsage" ):
                listener.enterRuleAttributeUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAttributeUsage" ):
                listener.exitRuleAttributeUsage(self)




    def ruleAttributeUsage(self):

        localctx = SysMLv2Parser.RuleAttributeUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_ruleAttributeUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.ruleUsagePrefix()
            self.state = 1807
            self.ruleAttributeUsageKeyword()
            self.state = 1808
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEnumerationKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ENUM(self):
            return self.getToken(SysMLv2Parser.K_ENUM, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEnumerationKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEnumerationKeyword" ):
                listener.enterRuleEnumerationKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEnumerationKeyword" ):
                listener.exitRuleEnumerationKeyword(self)




    def ruleEnumerationKeyword(self):

        localctx = SysMLv2Parser.RuleEnumerationKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_ruleEnumerationKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            self.match(SysMLv2Parser.K_ENUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEnumerationDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEnumerationKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEnumerationDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEnumerationDefKeyword" ):
                listener.enterRuleEnumerationDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEnumerationDefKeyword" ):
                listener.exitRuleEnumerationDefKeyword(self)




    def ruleEnumerationDefKeyword(self):

        localctx = SysMLv2Parser.RuleEnumerationDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_ruleEnumerationDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.ruleEnumerationKeyword()
            self.state = 1813
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEnumerationUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEnumerationKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEnumerationUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEnumerationUsageKeyword" ):
                listener.enterRuleEnumerationUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEnumerationUsageKeyword" ):
                listener.exitRuleEnumerationUsageKeyword(self)




    def ruleEnumerationUsageKeyword(self):

        localctx = SysMLv2Parser.RuleEnumerationUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_ruleEnumerationUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.ruleEnumerationKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEnumerationDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEnumerationDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleEnumerationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationBodyContext,0)


        def ruleDefinitionExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleDefinitionExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEnumerationDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEnumerationDefinition" ):
                listener.enterRuleEnumerationDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEnumerationDefinition" ):
                listener.exitRuleEnumerationDefinition(self)




    def ruleEnumerationDefinition(self):

        localctx = SysMLv2Parser.RuleEnumerationDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_ruleEnumerationDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1817
                self.ruleDefinitionExtensionKeyword()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1823
            self.ruleEnumerationDefKeyword()
            self.state = 1824
            self.ruleDefinitionDeclaration()
            self.state = 1825
            self.ruleEnumerationBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEnumerationBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEnumerationBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleEnumerationBody2Context(RuleEnumerationBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleEnumerationBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleAnnotatingMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAnnotatingMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAnnotatingMemberContext,i)

        def ruleEnumerationUsageMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleEnumerationUsageMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationUsageMemberContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEnumerationBody2" ):
                listener.enterRuleEnumerationBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEnumerationBody2" ):
                listener.exitRuleEnumerationBody2(self)


    class RuleEnumerationBody1Context(RuleEnumerationBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleEnumerationBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEnumerationBody1" ):
                listener.enterRuleEnumerationBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEnumerationBody1" ):
                listener.exitRuleEnumerationBody1(self)



    def ruleEnumerationBody(self):

        localctx = SysMLv2Parser.RuleEnumerationBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_ruleEnumerationBody)
        self._la = 0 # Token type
        try:
            self.state = 1837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleEnumerationBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1827
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleEnumerationBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                self.match(SysMLv2Parser.LBRACE)
                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 172721457104) != 0) or ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 396316774605858823) != 0):
                    self.state = 1831
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                    if la_ == 1:
                        self.state = 1829
                        self.ruleAnnotatingMember()
                        pass

                    elif la_ == 2:
                        self.state = 1830
                        self.ruleEnumerationUsageMember()
                        pass


                    self.state = 1835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1836
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEnumerationUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleEnumeratedValue(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumeratedValueContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEnumerationUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEnumerationUsageMember" ):
                listener.enterRuleEnumerationUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEnumerationUsageMember" ):
                listener.exitRuleEnumerationUsageMember(self)




    def ruleEnumerationUsageMember(self):

        localctx = SysMLv2Parser.RuleEnumerationUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_ruleEnumerationUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self.ruleMemberPrefix()
            self.state = 1840
            self.ruleEnumeratedValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEnumeratedValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def ruleEnumerationUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationUsageKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEnumeratedValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEnumeratedValue" ):
                listener.enterRuleEnumeratedValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEnumeratedValue" ):
                listener.exitRuleEnumeratedValue(self)




    def ruleEnumeratedValue(self):

        localctx = SysMLv2Parser.RuleEnumeratedValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_ruleEnumeratedValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1842
                self.ruleUsageExtensionKeyword()
                self.state = 1847
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1848
                self.ruleEnumerationUsageKeyword()


            self.state = 1851
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEnumerationUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsagePrefixContext,0)


        def ruleEnumerationUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationUsageKeywordContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEnumerationUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEnumerationUsage" ):
                listener.enterRuleEnumerationUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEnumerationUsage" ):
                listener.exitRuleEnumerationUsage(self)




    def ruleEnumerationUsage(self):

        localctx = SysMLv2Parser.RuleEnumerationUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_ruleEnumerationUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self.ruleUsagePrefix()
            self.state = 1854
            self.ruleEnumerationUsageKeyword()
            self.state = 1855
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOccurrenceKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OCCURRENCE(self):
            return self.getToken(SysMLv2Parser.K_OCCURRENCE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOccurrenceKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceKeyword" ):
                listener.enterRuleOccurrenceKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceKeyword" ):
                listener.exitRuleOccurrenceKeyword(self)




    def ruleOccurrenceKeyword(self):

        localctx = SysMLv2Parser.RuleOccurrenceKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_ruleOccurrenceKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.match(SysMLv2Parser.K_OCCURRENCE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOccurrenceDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOccurrenceDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceDefKeyword" ):
                listener.enterRuleOccurrenceDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceDefKeyword" ):
                listener.exitRuleOccurrenceDefKeyword(self)




    def ruleOccurrenceDefKeyword(self):

        localctx = SysMLv2Parser.RuleOccurrenceDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_ruleOccurrenceDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.ruleOccurrenceKeyword()
            self.state = 1860
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOccurrenceDefinitionPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBasicDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBasicDefinitionPrefixContext,0)


        def K_INDIVIDUAL(self):
            return self.getToken(SysMLv2Parser.K_INDIVIDUAL, 0)

        def ruleLifeClassMembership(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLifeClassMembershipContext,0)


        def ruleDefinitionExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleDefinitionExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOccurrenceDefinitionPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceDefinitionPrefix" ):
                listener.enterRuleOccurrenceDefinitionPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceDefinitionPrefix" ):
                listener.exitRuleOccurrenceDefinitionPrefix(self)




    def ruleOccurrenceDefinitionPrefix(self):

        localctx = SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_ruleOccurrenceDefinitionPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==30:
                self.state = 1862
                self.ruleBasicDefinitionPrefix()


            self.state = 1867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 1865
                self.match(SysMLv2Parser.K_INDIVIDUAL)
                self.state = 1866
                self.ruleLifeClassMembership()


            self.state = 1872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1869
                self.ruleDefinitionExtensionKeyword()
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOccurrenceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleOccurrenceDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOccurrenceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceDefinition" ):
                listener.enterRuleOccurrenceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceDefinition" ):
                listener.exitRuleOccurrenceDefinition(self)




    def ruleOccurrenceDefinition(self):

        localctx = SysMLv2Parser.RuleOccurrenceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_ruleOccurrenceDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 1876
            self.ruleOccurrenceDefKeyword()
            self.state = 1877
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleIndividualDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INDIVIDUAL(self):
            return self.getToken(SysMLv2Parser.K_INDIVIDUAL, 0)

        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def ruleLifeClassMembership(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLifeClassMembershipContext,0)


        def ruleBasicDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBasicDefinitionPrefixContext,0)


        def ruleDefinitionExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleDefinitionExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleIndividualDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleIndividualDefinition" ):
                listener.enterRuleIndividualDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleIndividualDefinition" ):
                listener.exitRuleIndividualDefinition(self)




    def ruleIndividualDefinition(self):

        localctx = SysMLv2Parser.RuleIndividualDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_ruleIndividualDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==30:
                self.state = 1879
                self.ruleBasicDefinitionPrefix()


            self.state = 1882
            self.match(SysMLv2Parser.K_INDIVIDUAL)
            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1883
                self.ruleDefinitionExtensionKeyword()
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1889
            self.match(SysMLv2Parser.K_DEF)
            self.state = 1890
            self.ruleDefinition()
            self.state = 1891
            self.ruleLifeClassMembership()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLifeClassMembershipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleLifeClass(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLifeClassContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleLifeClassMembership

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLifeClassMembership" ):
                listener.enterRuleLifeClassMembership(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLifeClassMembership" ):
                listener.exitRuleLifeClassMembership(self)




    def ruleLifeClassMembership(self):

        localctx = SysMLv2Parser.RuleLifeClassMembershipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_ruleLifeClassMembership)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1893
            self.ruleLifeClass()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLifeClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleLifeClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLifeClass" ):
                listener.enterRuleLifeClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLifeClass" ):
                listener.exitRuleLifeClass(self)




    def ruleLifeClass(self):

        localctx = SysMLv2Parser.RuleLifeClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_ruleLifeClass)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOccurrenceUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOccurrenceUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceUsageKeyword" ):
                listener.enterRuleOccurrenceUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceUsageKeyword" ):
                listener.exitRuleOccurrenceUsageKeyword(self)




    def ruleOccurrenceUsageKeyword(self):

        localctx = SysMLv2Parser.RuleOccurrenceUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_ruleOccurrenceUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.ruleOccurrenceKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOccurrenceUsagePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBasicUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBasicUsagePrefixContext,0)


        def K_INDIVIDUAL(self):
            return self.getToken(SysMLv2Parser.K_INDIVIDUAL, 0)

        def rulePortionKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortionKindContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOccurrenceUsagePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceUsagePrefix" ):
                listener.enterRuleOccurrenceUsagePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceUsagePrefix" ):
                listener.exitRuleOccurrenceUsagePrefix(self)




    def ruleOccurrenceUsagePrefix(self):

        localctx = SysMLv2Parser.RuleOccurrenceUsagePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_ruleOccurrenceUsagePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1899
            self.ruleBasicUsagePrefix()
            self.state = 1901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 1900
                self.match(SysMLv2Parser.K_INDIVIDUAL)


            self.state = 1904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121 or _la==122:
                self.state = 1903
                self.rulePortionKind()


            self.state = 1909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1906
                self.ruleUsageExtensionKeyword()
                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOccurrenceUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleOccurrenceUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsageKeywordContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOccurrenceUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOccurrenceUsage" ):
                listener.enterRuleOccurrenceUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOccurrenceUsage" ):
                listener.exitRuleOccurrenceUsage(self)




    def ruleOccurrenceUsage(self):

        localctx = SysMLv2Parser.RuleOccurrenceUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_ruleOccurrenceUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.ruleOccurrenceUsagePrefix()
            self.state = 1913
            self.ruleOccurrenceUsageKeyword()
            self.state = 1914
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleIndividualUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBasicUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBasicUsagePrefixContext,0)


        def K_INDIVIDUAL(self):
            return self.getToken(SysMLv2Parser.K_INDIVIDUAL, 0)

        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleIndividualUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleIndividualUsage" ):
                listener.enterRuleIndividualUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleIndividualUsage" ):
                listener.exitRuleIndividualUsage(self)




    def ruleIndividualUsage(self):

        localctx = SysMLv2Parser.RuleIndividualUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_ruleIndividualUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1916
            self.ruleBasicUsagePrefix()
            self.state = 1917
            self.match(SysMLv2Parser.K_INDIVIDUAL)
            self.state = 1921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1918
                self.ruleUsageExtensionKeyword()
                self.state = 1923
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1924
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePortionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBasicUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBasicUsagePrefixContext,0)


        def rulePortionKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortionKindContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def K_INDIVIDUAL(self):
            return self.getToken(SysMLv2Parser.K_INDIVIDUAL, 0)

        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePortionUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePortionUsage" ):
                listener.enterRulePortionUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePortionUsage" ):
                listener.exitRulePortionUsage(self)




    def rulePortionUsage(self):

        localctx = SysMLv2Parser.RulePortionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_rulePortionUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            self.ruleBasicUsagePrefix()
            self.state = 1928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 1927
                self.match(SysMLv2Parser.K_INDIVIDUAL)


            self.state = 1930
            self.rulePortionKind()
            self.state = 1934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1931
                self.ruleUsageExtensionKeyword()
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1937
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEventOccurrenceUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def K_EVENT(self):
            return self.getToken(SysMLv2Parser.K_EVENT, 0)

        def ruleUsageCompletion(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageCompletionContext,0)


        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def ruleOccurrenceUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsageKeywordContext,0)


        def ruleFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationPartContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEventOccurrenceUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEventOccurrenceUsage" ):
                listener.enterRuleEventOccurrenceUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEventOccurrenceUsage" ):
                listener.exitRuleEventOccurrenceUsage(self)




    def ruleEventOccurrenceUsage(self):

        localctx = SysMLv2Parser.RuleEventOccurrenceUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_ruleEventOccurrenceUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1939
            self.ruleOccurrenceUsagePrefix()
            self.state = 1940
            self.match(SysMLv2Parser.K_EVENT)
            self.state = 1949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                self.state = 1941
                self.ruleOwnedReferenceSubsetting()
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 14465) != 0):
                    self.state = 1942
                    self.ruleFeatureSpecializationPart()


                pass
            elif token in [38]:
                self.state = 1945
                self.ruleOccurrenceUsageKeyword()
                self.state = 1947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 1946
                    self.ruleUsageDeclaration()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1951
            self.ruleUsageCompletion()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptySuccessionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptySuccession(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptySuccessionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptySuccessionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptySuccessionMember" ):
                listener.enterRuleEmptySuccessionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptySuccessionMember" ):
                listener.exitRuleEmptySuccessionMember(self)




    def ruleEmptySuccessionMember(self):

        localctx = SysMLv2Parser.RuleEmptySuccessionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_ruleEmptySuccessionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.ruleEmptySuccession()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptySuccessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_THEN(self):
            return self.getToken(SysMLv2Parser.K_THEN, 0)

        def ruleMultiplicitySourceEndMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicitySourceEndMemberContext,0)


        def ruleEmptyTargetEndMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyTargetEndMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptySuccession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptySuccession" ):
                listener.enterRuleEmptySuccession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptySuccession" ):
                listener.exitRuleEmptySuccession(self)




    def ruleEmptySuccession(self):

        localctx = SysMLv2Parser.RuleEmptySuccessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_ruleEmptySuccession)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1955
            self.match(SysMLv2Parser.K_THEN)
            self.state = 1956
            self.ruleMultiplicitySourceEndMember()
            self.state = 1957
            self.ruleEmptyTargetEndMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMultiplicitySourceEndMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMultiplicitySourceEnd(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicitySourceEndContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMultiplicitySourceEndMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicitySourceEndMember" ):
                listener.enterRuleMultiplicitySourceEndMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicitySourceEndMember" ):
                listener.exitRuleMultiplicitySourceEndMember(self)




    def ruleMultiplicitySourceEndMember(self):

        localctx = SysMLv2Parser.RuleMultiplicitySourceEndMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_ruleMultiplicitySourceEndMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self.ruleMultiplicitySourceEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMultiplicitySourceEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedMultiplicity(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedMultiplicityContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMultiplicitySourceEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicitySourceEnd" ):
                listener.enterRuleMultiplicitySourceEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicitySourceEnd" ):
                listener.exitRuleMultiplicitySourceEnd(self)




    def ruleMultiplicitySourceEnd(self):

        localctx = SysMLv2Parser.RuleMultiplicitySourceEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_ruleMultiplicitySourceEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1961
                self.ruleOwnedMultiplicity()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptyTargetEndMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptyTargetEnd(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyTargetEndContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptyTargetEndMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptyTargetEndMember" ):
                listener.enterRuleEmptyTargetEndMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptyTargetEndMember" ):
                listener.exitRuleEmptyTargetEndMember(self)




    def ruleEmptyTargetEndMember(self):

        localctx = SysMLv2Parser.RuleEmptyTargetEndMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_ruleEmptyTargetEndMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1964
            self.ruleEmptyTargetEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptyTargetEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptyTargetEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptyTargetEnd" ):
                listener.enterRuleEmptyTargetEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptyTargetEnd" ):
                listener.exitRuleEmptyTargetEnd(self)




    def ruleEmptyTargetEnd(self):

        localctx = SysMLv2Parser.RuleEmptyTargetEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_ruleEmptyTargetEnd)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleItemKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ITEM(self):
            return self.getToken(SysMLv2Parser.K_ITEM, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleItemKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleItemKeyword" ):
                listener.enterRuleItemKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleItemKeyword" ):
                listener.exitRuleItemKeyword(self)




    def ruleItemKeyword(self):

        localctx = SysMLv2Parser.RuleItemKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_ruleItemKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self.match(SysMLv2Parser.K_ITEM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleItemDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleItemKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleItemDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleItemDefKeyword" ):
                listener.enterRuleItemDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleItemDefKeyword" ):
                listener.exitRuleItemDefKeyword(self)




    def ruleItemDefKeyword(self):

        localctx = SysMLv2Parser.RuleItemDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_ruleItemDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.ruleItemKeyword()
            self.state = 1971
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleItemUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleItemKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleItemUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleItemUsageKeyword" ):
                listener.enterRuleItemUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleItemUsageKeyword" ):
                listener.exitRuleItemUsageKeyword(self)




    def ruleItemUsageKeyword(self):

        localctx = SysMLv2Parser.RuleItemUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_ruleItemUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self.ruleItemKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleItemDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleItemDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleItemDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleItemDefinition" ):
                listener.enterRuleItemDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleItemDefinition" ):
                listener.exitRuleItemDefinition(self)




    def ruleItemDefinition(self):

        localctx = SysMLv2Parser.RuleItemDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_ruleItemDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 1976
            self.ruleItemDefKeyword()
            self.state = 1977
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleItemUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleItemUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemUsageKeywordContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleItemUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleItemUsage" ):
                listener.enterRuleItemUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleItemUsage" ):
                listener.exitRuleItemUsage(self)




    def ruleItemUsage(self):

        localctx = SysMLv2Parser.RuleItemUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_ruleItemUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1979
            self.ruleOccurrenceUsagePrefix()
            self.state = 1980
            self.ruleItemUsageKeyword()
            self.state = 1981
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePartKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PART(self):
            return self.getToken(SysMLv2Parser.K_PART, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePartKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePartKeyword" ):
                listener.enterRulePartKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePartKeyword" ):
                listener.exitRulePartKeyword(self)




    def rulePartKeyword(self):

        localctx = SysMLv2Parser.RulePartKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_rulePartKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            self.match(SysMLv2Parser.K_PART)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePartDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePartKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePartKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePartDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePartDefKeyword" ):
                listener.enterRulePartDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePartDefKeyword" ):
                listener.exitRulePartDefKeyword(self)




    def rulePartDefKeyword(self):

        localctx = SysMLv2Parser.RulePartDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_rulePartDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.rulePartKeyword()
            self.state = 1986
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePartUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePartKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePartKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePartUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePartUsageKeyword" ):
                listener.enterRulePartUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePartUsageKeyword" ):
                listener.exitRulePartUsageKeyword(self)




    def rulePartUsageKeyword(self):

        localctx = SysMLv2Parser.RulePartUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_rulePartUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            self.rulePartKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePartDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def rulePartDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePartDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePartDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePartDefinition" ):
                listener.enterRulePartDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePartDefinition" ):
                listener.exitRulePartDefinition(self)




    def rulePartDefinition(self):

        localctx = SysMLv2Parser.RulePartDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_rulePartDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 1991
            self.rulePartDefKeyword()
            self.state = 1992
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePartUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def rulePartUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePartUsageKeywordContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePartUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePartUsage" ):
                listener.enterRulePartUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePartUsage" ):
                listener.exitRulePartUsage(self)




    def rulePartUsage(self):

        localctx = SysMLv2Parser.RulePartUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_rulePartUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.ruleOccurrenceUsagePrefix()
            self.state = 1995
            self.rulePartUsageKeyword()
            self.state = 1996
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePortKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PORT(self):
            return self.getToken(SysMLv2Parser.K_PORT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePortKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePortKeyword" ):
                listener.enterRulePortKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePortKeyword" ):
                listener.exitRulePortKeyword(self)




    def rulePortKeyword(self):

        localctx = SysMLv2Parser.RulePortKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_rulePortKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.match(SysMLv2Parser.K_PORT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePortDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePortKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePortDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePortDefKeyword" ):
                listener.enterRulePortDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePortDefKeyword" ):
                listener.exitRulePortDefKeyword(self)




    def rulePortDefKeyword(self):

        localctx = SysMLv2Parser.RulePortDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_rulePortDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.rulePortKeyword()
            self.state = 2001
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePortDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionPrefixContext,0)


        def rulePortDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def ruleConjugatedPortDefinitionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConjugatedPortDefinitionMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePortDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePortDefinition" ):
                listener.enterRulePortDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePortDefinition" ):
                listener.exitRulePortDefinition(self)




    def rulePortDefinition(self):

        localctx = SysMLv2Parser.RulePortDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_rulePortDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self.ruleDefinitionPrefix()
            self.state = 2004
            self.rulePortDefKeyword()
            self.state = 2005
            self.ruleDefinition()
            self.state = 2006
            self.ruleConjugatedPortDefinitionMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConjugatedPortDefinitionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConjugatedPortDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConjugatedPortDefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConjugatedPortDefinitionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConjugatedPortDefinitionMember" ):
                listener.enterRuleConjugatedPortDefinitionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConjugatedPortDefinitionMember" ):
                listener.exitRuleConjugatedPortDefinitionMember(self)




    def ruleConjugatedPortDefinitionMember(self):

        localctx = SysMLv2Parser.RuleConjugatedPortDefinitionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_ruleConjugatedPortDefinitionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.ruleConjugatedPortDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConjugatedPortDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePortConjugation(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortConjugationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConjugatedPortDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConjugatedPortDefinition" ):
                listener.enterRuleConjugatedPortDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConjugatedPortDefinition" ):
                listener.exitRuleConjugatedPortDefinition(self)




    def ruleConjugatedPortDefinition(self):

        localctx = SysMLv2Parser.RuleConjugatedPortDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_ruleConjugatedPortDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.rulePortConjugation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePortConjugationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePortConjugation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePortConjugation" ):
                listener.enterRulePortConjugation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePortConjugation" ):
                listener.exitRulePortConjugation(self)




    def rulePortConjugation(self):

        localctx = SysMLv2Parser.RulePortConjugationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_rulePortConjugation)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConjugatedPortTypingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConjugatedQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConjugatedQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConjugatedPortTyping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConjugatedPortTyping" ):
                listener.enterRuleConjugatedPortTyping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConjugatedPortTyping" ):
                listener.exitRuleConjugatedPortTyping(self)




    def ruleConjugatedPortTyping(self):

        localctx = SysMLv2Parser.RuleConjugatedPortTypingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_ruleConjugatedPortTyping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.ruleConjugatedQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConjugatedQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_TILDE(self):
            return self.getToken(SysMLv2Parser.OP_TILDE, 0)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConjugatedQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConjugatedQualifiedName" ):
                listener.enterRuleConjugatedQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConjugatedQualifiedName" ):
                listener.exitRuleConjugatedQualifiedName(self)




    def ruleConjugatedQualifiedName(self):

        localctx = SysMLv2Parser.RuleConjugatedQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_ruleConjugatedQualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.match(SysMLv2Parser.OP_TILDE)
            self.state = 2017
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePortUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePortKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePortUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePortUsageKeyword" ):
                listener.enterRulePortUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePortUsageKeyword" ):
                listener.exitRulePortUsageKeyword(self)




    def rulePortUsageKeyword(self):

        localctx = SysMLv2Parser.RulePortUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_rulePortUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2019
            self.rulePortKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePortUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def rulePortUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortUsageKeywordContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePortUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePortUsage" ):
                listener.enterRulePortUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePortUsage" ):
                listener.exitRulePortUsage(self)




    def rulePortUsage(self):

        localctx = SysMLv2Parser.RulePortUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_rulePortUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.ruleOccurrenceUsagePrefix()
            self.state = 2022
            self.rulePortUsageKeyword()
            self.state = 2023
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConnectorEndMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConnectorEnd(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorEndContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConnectorEndMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectorEndMember" ):
                listener.enterRuleConnectorEndMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectorEndMember" ):
                listener.exitRuleConnectorEndMember(self)




    def ruleConnectorEndMember(self):

        localctx = SysMLv2Parser.RuleConnectorEndMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_ruleConnectorEndMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            self.ruleConnectorEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConnectorEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def ruleName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNameContext,0)


        def ruleReferencesKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferencesKeywordContext,0)


        def ruleOwnedMultiplicity(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedMultiplicityContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConnectorEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectorEnd" ):
                listener.enterRuleConnectorEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectorEnd" ):
                listener.exitRuleConnectorEnd(self)




    def ruleConnectorEnd(self):

        localctx = SysMLv2Parser.RuleConnectorEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_ruleConnectorEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 2027
                self.ruleName()
                self.state = 2028
                self.ruleReferencesKeyword()


            self.state = 2032
            self.ruleOwnedReferenceSubsetting()
            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2033
                self.ruleOwnedMultiplicity()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBindingKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BINDING(self):
            return self.getToken(SysMLv2Parser.K_BINDING, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBindingKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBindingKeyword" ):
                listener.enterRuleBindingKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBindingKeyword" ):
                listener.exitRuleBindingKeyword(self)




    def ruleBindingKeyword(self):

        localctx = SysMLv2Parser.RuleBindingKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_ruleBindingKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.match(SysMLv2Parser.K_BINDING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBindingConnectorAsUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsagePrefixContext,0)


        def K_BIND(self):
            return self.getToken(SysMLv2Parser.K_BIND, 0)

        def ruleConnectorEndMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleConnectorEndMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorEndMemberContext,i)


        def OP_EQ(self):
            return self.getToken(SysMLv2Parser.OP_EQ, 0)

        def ruleDefinitionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyContext,0)


        def ruleBindingKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBindingKeywordContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBindingConnectorAsUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBindingConnectorAsUsage" ):
                listener.enterRuleBindingConnectorAsUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBindingConnectorAsUsage" ):
                listener.exitRuleBindingConnectorAsUsage(self)




    def ruleBindingConnectorAsUsage(self):

        localctx = SysMLv2Parser.RuleBindingConnectorAsUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_ruleBindingConnectorAsUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.ruleUsagePrefix()
            self.state = 2043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 2039
                self.ruleBindingKeyword()
                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2040
                    self.ruleUsageDeclaration()




            self.state = 2045
            self.match(SysMLv2Parser.K_BIND)
            self.state = 2046
            self.ruleConnectorEndMember()
            self.state = 2047
            self.match(SysMLv2Parser.OP_EQ)
            self.state = 2048
            self.ruleConnectorEndMember()
            self.state = 2049
            self.ruleDefinitionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSuccessionKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SUCCESSION(self):
            return self.getToken(SysMLv2Parser.K_SUCCESSION, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSuccessionKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSuccessionKeyword" ):
                listener.enterRuleSuccessionKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSuccessionKeyword" ):
                listener.exitRuleSuccessionKeyword(self)




    def ruleSuccessionKeyword(self):

        localctx = SysMLv2Parser.RuleSuccessionKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_ruleSuccessionKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            self.match(SysMLv2Parser.K_SUCCESSION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSuccessionAsUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsagePrefixContext,0)


        def K_FIRST(self):
            return self.getToken(SysMLv2Parser.K_FIRST, 0)

        def ruleConnectorEndMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleConnectorEndMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorEndMemberContext,i)


        def K_THEN(self):
            return self.getToken(SysMLv2Parser.K_THEN, 0)

        def ruleDefinitionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyContext,0)


        def ruleSuccessionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSuccessionKeywordContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSuccessionAsUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSuccessionAsUsage" ):
                listener.enterRuleSuccessionAsUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSuccessionAsUsage" ):
                listener.exitRuleSuccessionAsUsage(self)




    def ruleSuccessionAsUsage(self):

        localctx = SysMLv2Parser.RuleSuccessionAsUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_ruleSuccessionAsUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self.ruleUsagePrefix()
            self.state = 2058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 2054
                self.ruleSuccessionKeyword()
                self.state = 2056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2055
                    self.ruleUsageDeclaration()




            self.state = 2060
            self.match(SysMLv2Parser.K_FIRST)
            self.state = 2061
            self.ruleConnectorEndMember()
            self.state = 2062
            self.match(SysMLv2Parser.K_THEN)
            self.state = 2063
            self.ruleConnectorEndMember()
            self.state = 2064
            self.ruleDefinitionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConnectionKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CONNECTION(self):
            return self.getToken(SysMLv2Parser.K_CONNECTION, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConnectionKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectionKeyword" ):
                listener.enterRuleConnectionKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectionKeyword" ):
                listener.exitRuleConnectionKeyword(self)




    def ruleConnectionKeyword(self):

        localctx = SysMLv2Parser.RuleConnectionKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_ruleConnectionKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.match(SysMLv2Parser.K_CONNECTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConnectionDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConnectionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectionKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConnectionDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectionDefKeyword" ):
                listener.enterRuleConnectionDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectionDefKeyword" ):
                listener.exitRuleConnectionDefKeyword(self)




    def ruleConnectionDefKeyword(self):

        localctx = SysMLv2Parser.RuleConnectionDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_ruleConnectionDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            self.ruleConnectionKeyword()
            self.state = 2069
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConnectionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleConnectionDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectionDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConnectionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectionDefinition" ):
                listener.enterRuleConnectionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectionDefinition" ):
                listener.exitRuleConnectionDefinition(self)




    def ruleConnectionDefinition(self):

        localctx = SysMLv2Parser.RuleConnectionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_ruleConnectionDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 2072
            self.ruleConnectionDefKeyword()
            self.state = 2073
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConnectorKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CONNECT(self):
            return self.getToken(SysMLv2Parser.K_CONNECT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConnectorKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectorKeyword" ):
                listener.enterRuleConnectorKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectorKeyword" ):
                listener.exitRuleConnectorKeyword(self)




    def ruleConnectorKeyword(self):

        localctx = SysMLv2Parser.RuleConnectorKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_ruleConnectorKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self.match(SysMLv2Parser.K_CONNECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConnectionUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConnectionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectionKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConnectionUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectionUsageKeyword" ):
                listener.enterRuleConnectionUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectionUsageKeyword" ):
                listener.exitRuleConnectionUsageKeyword(self)




    def ruleConnectionUsageKeyword(self):

        localctx = SysMLv2Parser.RuleConnectionUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_ruleConnectionUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.ruleConnectionKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConnectionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageBodyContext,0)


        def ruleConnectionUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectionUsageKeywordContext,0)


        def ruleConnectorKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorKeywordContext,0)


        def ruleConnectorPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorPartContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConnectionUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectionUsage" ):
                listener.enterRuleConnectionUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectionUsage" ):
                listener.exitRuleConnectionUsage(self)




    def ruleConnectionUsage(self):

        localctx = SysMLv2Parser.RuleConnectionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_ruleConnectionUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            self.ruleOccurrenceUsagePrefix()
            self.state = 2095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 2080
                self.ruleConnectionUsageKeyword()
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2081
                    self.ruleUsageDeclaration()


                self.state = 2085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35 or _la==147 or _la==148:
                    self.state = 2084
                    self.ruleValuePart()


                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 2087
                    self.ruleConnectorKeyword()
                    self.state = 2088
                    self.ruleConnectorPart()


                pass
            elif token in [50]:
                self.state = 2092
                self.ruleConnectorKeyword()
                self.state = 2093
                self.ruleConnectorPart()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2097
            self.ruleUsageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConnectorPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConnectorPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleConnectorPart2Context(RuleConnectorPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleConnectorPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleNaryConnectorPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNaryConnectorPartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectorPart2" ):
                listener.enterRuleConnectorPart2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectorPart2" ):
                listener.exitRuleConnectorPart2(self)


    class RuleConnectorPart1Context(RuleConnectorPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleConnectorPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBinaryConnectorPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBinaryConnectorPartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConnectorPart1" ):
                listener.enterRuleConnectorPart1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConnectorPart1" ):
                listener.exitRuleConnectorPart1(self)



    def ruleConnectorPart(self):

        localctx = SysMLv2Parser.RuleConnectorPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_ruleConnectorPart)
        try:
            self.state = 2101
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                localctx = SysMLv2Parser.RuleConnectorPart1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2099
                self.ruleBinaryConnectorPart()
                pass
            elif token in [133]:
                localctx = SysMLv2Parser.RuleConnectorPart2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2100
                self.ruleNaryConnectorPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBinaryConnectorPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConnectorEndMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleConnectorEndMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorEndMemberContext,i)


        def K_TO(self):
            return self.getToken(SysMLv2Parser.K_TO, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBinaryConnectorPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBinaryConnectorPart" ):
                listener.enterRuleBinaryConnectorPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBinaryConnectorPart" ):
                listener.exitRuleBinaryConnectorPart(self)




    def ruleBinaryConnectorPart(self):

        localctx = SysMLv2Parser.RuleBinaryConnectorPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_ruleBinaryConnectorPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2103
            self.ruleConnectorEndMember()
            self.state = 2104
            self.match(SysMLv2Parser.K_TO)
            self.state = 2105
            self.ruleConnectorEndMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNaryConnectorPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SysMLv2Parser.LPAREN, 0)

        def ruleConnectorEndMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleConnectorEndMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorEndMemberContext,i)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def RPAREN(self):
            return self.getToken(SysMLv2Parser.RPAREN, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNaryConnectorPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNaryConnectorPart" ):
                listener.enterRuleNaryConnectorPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNaryConnectorPart" ):
                listener.exitRuleNaryConnectorPart(self)




    def ruleNaryConnectorPart(self):

        localctx = SysMLv2Parser.RuleNaryConnectorPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_ruleNaryConnectorPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            self.match(SysMLv2Parser.LPAREN)
            self.state = 2108
            self.ruleConnectorEndMember()
            self.state = 2109
            self.match(SysMLv2Parser.OP_COMMA)
            self.state = 2110
            self.ruleConnectorEndMember()
            self.state = 2115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 2111
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 2112
                self.ruleConnectorEndMember()
                self.state = 2117
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2118
            self.match(SysMLv2Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptySourceEndMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptySourceEnd(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptySourceEndContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptySourceEndMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptySourceEndMember" ):
                listener.enterRuleEmptySourceEndMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptySourceEndMember" ):
                listener.exitRuleEmptySourceEndMember(self)




    def ruleEmptySourceEndMember(self):

        localctx = SysMLv2Parser.RuleEmptySourceEndMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_ruleEmptySourceEndMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.ruleEmptySourceEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptySourceEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptySourceEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptySourceEnd" ):
                listener.enterRuleEmptySourceEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptySourceEnd" ):
                listener.exitRuleEmptySourceEnd(self)




    def ruleEmptySourceEnd(self):

        localctx = SysMLv2Parser.RuleEmptySourceEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_ruleEmptySourceEnd)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowConnectionKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_FLOW(self):
            return self.getToken(SysMLv2Parser.K_FLOW, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowConnectionKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowConnectionKeyword" ):
                listener.enterRuleFlowConnectionKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowConnectionKeyword" ):
                listener.exitRuleFlowConnectionKeyword(self)




    def ruleFlowConnectionKeyword(self):

        localctx = SysMLv2Parser.RuleFlowConnectionKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_ruleFlowConnectionKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(SysMLv2Parser.K_FLOW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowConnectionDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFlowConnectionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowConnectionKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowConnectionDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowConnectionDefKeyword" ):
                listener.enterRuleFlowConnectionDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowConnectionDefKeyword" ):
                listener.exitRuleFlowConnectionDefKeyword(self)




    def ruleFlowConnectionDefKeyword(self):

        localctx = SysMLv2Parser.RuleFlowConnectionDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_ruleFlowConnectionDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            self.ruleFlowConnectionKeyword()
            self.state = 2127
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowConnectionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleFlowConnectionDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowConnectionDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowConnectionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowConnectionDefinition" ):
                listener.enterRuleFlowConnectionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowConnectionDefinition" ):
                listener.exitRuleFlowConnectionDefinition(self)




    def ruleFlowConnectionDefinition(self):

        localctx = SysMLv2Parser.RuleFlowConnectionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_ruleFlowConnectionDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 2130
            self.ruleFlowConnectionDefKeyword()
            self.state = 2131
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMessageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_MESSAGE(self):
            return self.getToken(SysMLv2Parser.K_MESSAGE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMessageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMessageKeyword" ):
                listener.enterRuleMessageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMessageKeyword" ):
                listener.exitRuleMessageKeyword(self)




    def ruleMessageKeyword(self):

        localctx = SysMLv2Parser.RuleMessageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_ruleMessageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2133
            self.match(SysMLv2Parser.K_MESSAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMessageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleMessageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMessageKeywordContext,0)


        def ruleMessageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMessageDeclarationContext,0)


        def ruleDefinitionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMessage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMessage" ):
                listener.enterRuleMessage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMessage" ):
                listener.exitRuleMessage(self)




    def ruleMessage(self):

        localctx = SysMLv2Parser.RuleMessageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_ruleMessage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.ruleOccurrenceUsagePrefix()
            self.state = 2136
            self.ruleMessageKeyword()
            self.state = 2137
            self.ruleMessageDeclaration()
            self.state = 2138
            self.ruleDefinitionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMessageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMessageDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleMessageDeclaration1Context(RuleMessageDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMessageDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)

        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)

        def K_OF(self):
            return self.getToken(SysMLv2Parser.K_OF, 0)
        def ruleItemFeatureMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemFeatureMemberContext,0)

        def K_FROM(self):
            return self.getToken(SysMLv2Parser.K_FROM, 0)
        def ruleMessageEventMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleMessageEventMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleMessageEventMemberContext,i)

        def K_TO(self):
            return self.getToken(SysMLv2Parser.K_TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMessageDeclaration1" ):
                listener.enterRuleMessageDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMessageDeclaration1" ):
                listener.exitRuleMessageDeclaration1(self)


    class RuleMessageDeclaration2Context(RuleMessageDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMessageDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMessageEventMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleMessageEventMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleMessageEventMemberContext,i)

        def K_TO(self):
            return self.getToken(SysMLv2Parser.K_TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMessageDeclaration2" ):
                listener.enterRuleMessageDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMessageDeclaration2" ):
                listener.exitRuleMessageDeclaration2(self)



    def ruleMessageDeclaration(self):

        localctx = SysMLv2Parser.RuleMessageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_ruleMessageDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleMessageDeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2140
                    self.ruleUsageDeclaration()


                self.state = 2144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35 or _la==147 or _la==148:
                    self.state = 2143
                    self.ruleValuePart()


                self.state = 2148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2146
                    self.match(SysMLv2Parser.K_OF)
                    self.state = 2147
                    self.ruleItemFeatureMember()


                self.state = 2155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2150
                    self.match(SysMLv2Parser.K_FROM)
                    self.state = 2151
                    self.ruleMessageEventMember()
                    self.state = 2152
                    self.match(SysMLv2Parser.K_TO)
                    self.state = 2153
                    self.ruleMessageEventMember()


                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleMessageDeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2157
                self.ruleMessageEventMember()
                self.state = 2158
                self.match(SysMLv2Parser.K_TO)
                self.state = 2159
                self.ruleMessageEventMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMessageEventMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMessageEvent(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMessageEventContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMessageEventMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMessageEventMember" ):
                listener.enterRuleMessageEventMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMessageEventMember" ):
                listener.exitRuleMessageEventMember(self)




    def ruleMessageEventMember(self):

        localctx = SysMLv2Parser.RuleMessageEventMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_ruleMessageEventMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.ruleMessageEvent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMessageEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMessageEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMessageEvent" ):
                listener.enterRuleMessageEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMessageEvent" ):
                listener.exitRuleMessageEvent(self)




    def ruleMessageEvent(self):

        localctx = SysMLv2Parser.RuleMessageEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_ruleMessageEvent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2165
            self.ruleOwnedReferenceSubsetting()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowConnectionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleFlowConnectionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowConnectionKeywordContext,0)


        def ruleFlowConnectionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowConnectionDeclarationContext,0)


        def ruleDefinitionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowConnectionUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowConnectionUsage" ):
                listener.enterRuleFlowConnectionUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowConnectionUsage" ):
                listener.exitRuleFlowConnectionUsage(self)




    def ruleFlowConnectionUsage(self):

        localctx = SysMLv2Parser.RuleFlowConnectionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_ruleFlowConnectionUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.ruleOccurrenceUsagePrefix()
            self.state = 2168
            self.ruleFlowConnectionKeyword()
            self.state = 2169
            self.ruleFlowConnectionDeclaration()
            self.state = 2170
            self.ruleDefinitionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSuccessionFlowConnectionKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleSuccessionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSuccessionKeywordContext,0)


        def ruleFlowConnectionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowConnectionKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSuccessionFlowConnectionKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSuccessionFlowConnectionKeyword" ):
                listener.enterRuleSuccessionFlowConnectionKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSuccessionFlowConnectionKeyword" ):
                listener.exitRuleSuccessionFlowConnectionKeyword(self)




    def ruleSuccessionFlowConnectionKeyword(self):

        localctx = SysMLv2Parser.RuleSuccessionFlowConnectionKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_ruleSuccessionFlowConnectionKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2172
            self.ruleSuccessionKeyword()
            self.state = 2173
            self.ruleFlowConnectionKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSuccessionFlowConnectionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleSuccessionFlowConnectionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSuccessionFlowConnectionKeywordContext,0)


        def ruleFlowConnectionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowConnectionDeclarationContext,0)


        def ruleDefinitionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSuccessionFlowConnectionUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSuccessionFlowConnectionUsage" ):
                listener.enterRuleSuccessionFlowConnectionUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSuccessionFlowConnectionUsage" ):
                listener.exitRuleSuccessionFlowConnectionUsage(self)




    def ruleSuccessionFlowConnectionUsage(self):

        localctx = SysMLv2Parser.RuleSuccessionFlowConnectionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_ruleSuccessionFlowConnectionUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.ruleOccurrenceUsagePrefix()
            self.state = 2176
            self.ruleSuccessionFlowConnectionKeyword()
            self.state = 2177
            self.ruleFlowConnectionDeclaration()
            self.state = 2178
            self.ruleDefinitionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowConnectionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowConnectionDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFlowConnectionDeclaration1Context(RuleFlowConnectionDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFlowConnectionDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)

        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)

        def K_OF(self):
            return self.getToken(SysMLv2Parser.K_OF, 0)
        def ruleItemFeatureMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemFeatureMemberContext,0)

        def K_FROM(self):
            return self.getToken(SysMLv2Parser.K_FROM, 0)
        def ruleFlowEndMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFlowEndMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFlowEndMemberContext,i)

        def K_TO(self):
            return self.getToken(SysMLv2Parser.K_TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowConnectionDeclaration1" ):
                listener.enterRuleFlowConnectionDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowConnectionDeclaration1" ):
                listener.exitRuleFlowConnectionDeclaration1(self)


    class RuleFlowConnectionDeclaration2Context(RuleFlowConnectionDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFlowConnectionDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFlowEndMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFlowEndMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFlowEndMemberContext,i)

        def K_TO(self):
            return self.getToken(SysMLv2Parser.K_TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowConnectionDeclaration2" ):
                listener.enterRuleFlowConnectionDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowConnectionDeclaration2" ):
                listener.exitRuleFlowConnectionDeclaration2(self)



    def ruleFlowConnectionDeclaration(self):

        localctx = SysMLv2Parser.RuleFlowConnectionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_ruleFlowConnectionDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleFlowConnectionDeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2180
                    self.ruleUsageDeclaration()


                self.state = 2184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35 or _la==147 or _la==148:
                    self.state = 2183
                    self.ruleValuePart()


                self.state = 2188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2186
                    self.match(SysMLv2Parser.K_OF)
                    self.state = 2187
                    self.ruleItemFeatureMember()


                self.state = 2195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2190
                    self.match(SysMLv2Parser.K_FROM)
                    self.state = 2191
                    self.ruleFlowEndMember()
                    self.state = 2192
                    self.match(SysMLv2Parser.K_TO)
                    self.state = 2193
                    self.ruleFlowEndMember()


                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleFlowConnectionDeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2197
                self.ruleFlowEndMember()
                self.state = 2198
                self.match(SysMLv2Parser.K_TO)
                self.state = 2199
                self.ruleFlowEndMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleItemFeatureMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleItemFeature(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleItemFeatureContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleItemFeatureMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleItemFeatureMember" ):
                listener.enterRuleItemFeatureMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleItemFeatureMember" ):
                listener.exitRuleItemFeatureMember(self)




    def ruleItemFeatureMember(self):

        localctx = SysMLv2Parser.RuleItemFeatureMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_ruleItemFeatureMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2203
            self.ruleItemFeature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleItemFeatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePayloadFeature(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePayloadFeatureContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleItemFeature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleItemFeature" ):
                listener.enterRuleItemFeature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleItemFeature" ):
                listener.exitRuleItemFeature(self)




    def ruleItemFeature(self):

        localctx = SysMLv2Parser.RuleItemFeatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_ruleItemFeature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            self.rulePayloadFeature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePayloadFeatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePayloadFeature

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RulePayloadFeature1Context(RulePayloadFeatureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePayloadFeatureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePayloadFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePayloadFeatureSpecializationPartContext,0)

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)

        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePayloadFeature1" ):
                listener.enterRulePayloadFeature1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePayloadFeature1" ):
                listener.exitRulePayloadFeature1(self)


    class RulePayloadFeature2Context(RulePayloadFeatureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePayloadFeatureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePayloadFeature2" ):
                listener.enterRulePayloadFeature2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePayloadFeature2" ):
                listener.exitRulePayloadFeature2(self)


    class RulePayloadFeature3Context(RulePayloadFeatureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePayloadFeatureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedFeatureTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureTypingContext,0)

        def ruleOwnedMultiplicity(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedMultiplicityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePayloadFeature3" ):
                listener.enterRulePayloadFeature3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePayloadFeature3" ):
                listener.exitRulePayloadFeature3(self)


    class RulePayloadFeature4Context(RulePayloadFeatureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePayloadFeatureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedMultiplicity(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedMultiplicityContext,0)

        def ruleOwnedFeatureTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureTypingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePayloadFeature4" ):
                listener.enterRulePayloadFeature4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePayloadFeature4" ):
                listener.exitRulePayloadFeature4(self)



    def rulePayloadFeature(self):

        localctx = SysMLv2Parser.RulePayloadFeatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_rulePayloadFeature)
        self._la = 0 # Token type
        try:
            self.state = 2225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RulePayloadFeature1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                    self.state = 2207
                    self.ruleIdentification()


                self.state = 2210
                self.rulePayloadFeatureSpecializationPart()
                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35 or _la==147 or _la==148:
                    self.state = 2211
                    self.ruleValuePart()


                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RulePayloadFeature2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                    self.state = 2214
                    self.ruleIdentification()


                self.state = 2217
                self.ruleValuePart()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RulePayloadFeature3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2218
                self.ruleOwnedFeatureTyping()
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2219
                    self.ruleOwnedMultiplicity()


                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RulePayloadFeature4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2222
                self.ruleOwnedMultiplicity()
                self.state = 2223
                self.ruleOwnedFeatureTyping()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePayloadFeatureSpecializationPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePayloadFeatureSpecializationPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RulePayloadFeatureSpecializationPart2Context(RulePayloadFeatureSpecializationPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePayloadFeatureSpecializationPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMultiplicityPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicityPartContext,0)

        def ruleFeatureSpecialization(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureSpecializationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePayloadFeatureSpecializationPart2" ):
                listener.enterRulePayloadFeatureSpecializationPart2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePayloadFeatureSpecializationPart2" ):
                listener.exitRulePayloadFeatureSpecializationPart2(self)


    class RulePayloadFeatureSpecializationPart1Context(RulePayloadFeatureSpecializationPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePayloadFeatureSpecializationPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFeatureSpecialization(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureSpecializationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationContext,i)

        def ruleMultiplicityPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicityPartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePayloadFeatureSpecializationPart1" ):
                listener.enterRulePayloadFeatureSpecializationPart1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePayloadFeatureSpecializationPart1" ):
                listener.exitRulePayloadFeatureSpecializationPart1(self)



    def rulePayloadFeatureSpecializationPart(self):

        localctx = SysMLv2Parser.RulePayloadFeatureSpecializationPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_rulePayloadFeatureSpecializationPart)
        self._la = 0 # Token type
        try:
            self.state = 2247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 26, 28, 29, 139, 143, 144, 145]:
                localctx = SysMLv2Parser.RulePayloadFeatureSpecializationPart1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2228 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2227
                        self.ruleFeatureSpecialization()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2230 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24 or _la==25 or _la==132:
                    self.state = 2232
                    self.ruleMultiplicityPart()


                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 872431616) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 113) != 0):
                    self.state = 2235
                    self.ruleFeatureSpecialization()
                    self.state = 2240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [24, 25, 132]:
                localctx = SysMLv2Parser.RulePayloadFeatureSpecializationPart2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2241
                self.ruleMultiplicityPart()
                self.state = 2243 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2242
                    self.ruleFeatureSpecialization()
                    self.state = 2245 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 872431616) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 113) != 0)):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowEndMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFlowEnd(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowEndContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowEndMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowEndMember" ):
                listener.enterRuleFlowEndMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowEndMember" ):
                listener.exitRuleFlowEndMember(self)




    def ruleFlowEndMember(self):

        localctx = SysMLv2Parser.RuleFlowEndMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_ruleFlowEndMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            self.ruleFlowEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFlowFeatureMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowFeatureMemberContext,0)


        def ruleFlowEndSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowEndSubsettingContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowEnd" ):
                listener.enterRuleFlowEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowEnd" ):
                listener.exitRuleFlowEnd(self)




    def ruleFlowEnd(self):

        localctx = SysMLv2Parser.RuleFlowEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_ruleFlowEnd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 2251
                self.ruleFlowEndSubsetting()


            self.state = 2254
            self.ruleFlowFeatureMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowEndSubsettingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowEndSubsetting

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFlowEndSubsetting1Context(RuleFlowEndSubsettingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFlowEndSubsettingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)

        def OP_DOT(self):
            return self.getToken(SysMLv2Parser.OP_DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowEndSubsetting1" ):
                listener.enterRuleFlowEndSubsetting1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowEndSubsetting1" ):
                listener.exitRuleFlowEndSubsetting1(self)


    class RuleFlowEndSubsetting2Context(RuleFlowEndSubsettingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFlowEndSubsettingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFeatureChainPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureChainPrefixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowEndSubsetting2" ):
                listener.enterRuleFlowEndSubsetting2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowEndSubsetting2" ):
                listener.exitRuleFlowEndSubsetting2(self)



    def ruleFlowEndSubsetting(self):

        localctx = SysMLv2Parser.RuleFlowEndSubsettingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_ruleFlowEndSubsetting)
        try:
            self.state = 2260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleFlowEndSubsetting1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2256
                self.ruleQualifiedName()
                self.state = 2257
                self.match(SysMLv2Parser.OP_DOT)
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleFlowEndSubsetting2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2259
                self.ruleFeatureChainPrefix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureChainPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedFeatureChaining(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleOwnedFeatureChainingContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureChainingContext,i)


        def OP_DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_DOT)
            else:
                return self.getToken(SysMLv2Parser.OP_DOT, i)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureChainPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureChainPrefix" ):
                listener.enterRuleFeatureChainPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureChainPrefix" ):
                listener.exitRuleFeatureChainPrefix(self)




    def ruleFeatureChainPrefix(self):

        localctx = SysMLv2Parser.RuleFeatureChainPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_ruleFeatureChainPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2265 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2262
                    self.ruleOwnedFeatureChaining()
                    self.state = 2263
                    self.match(SysMLv2Parser.OP_DOT)

                else:
                    raise NoViableAltException(self)
                self.state = 2267 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

            self.state = 2269
            self.ruleOwnedFeatureChaining()
            self.state = 2270
            self.match(SysMLv2Parser.OP_DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowFeatureMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFlowFeature(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowFeatureContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowFeatureMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowFeatureMember" ):
                listener.enterRuleFlowFeatureMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowFeatureMember" ):
                listener.exitRuleFlowFeatureMember(self)




    def ruleFlowFeatureMember(self):

        localctx = SysMLv2Parser.RuleFlowFeatureMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_ruleFlowFeatureMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            self.ruleFlowFeature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowFeatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFlowRedefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFlowRedefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowFeature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowFeature" ):
                listener.enterRuleFlowFeature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowFeature" ):
                listener.exitRuleFlowFeature(self)




    def ruleFlowFeature(self):

        localctx = SysMLv2Parser.RuleFlowFeatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_ruleFlowFeature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2274
            self.ruleFlowRedefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFlowRedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFlowRedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFlowRedefinition" ):
                listener.enterRuleFlowRedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFlowRedefinition" ):
                listener.exitRuleFlowRedefinition(self)




    def ruleFlowRedefinition(self):

        localctx = SysMLv2Parser.RuleFlowRedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_ruleFlowRedefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2276
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INTERFACE(self):
            return self.getToken(SysMLv2Parser.K_INTERFACE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceKeyword" ):
                listener.enterRuleInterfaceKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceKeyword" ):
                listener.exitRuleInterfaceKeyword(self)




    def ruleInterfaceKeyword(self):

        localctx = SysMLv2Parser.RuleInterfaceKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_ruleInterfaceKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2278
            self.match(SysMLv2Parser.K_INTERFACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleInterfaceKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceDefKeyword" ):
                listener.enterRuleInterfaceDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceDefKeyword" ):
                listener.exitRuleInterfaceDefKeyword(self)




    def ruleInterfaceDefKeyword(self):

        localctx = SysMLv2Parser.RuleInterfaceDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_ruleInterfaceDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2280
            self.ruleInterfaceKeyword()
            self.state = 2281
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleInterfaceDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleInterfaceBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceDefinition" ):
                listener.enterRuleInterfaceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceDefinition" ):
                listener.exitRuleInterfaceDefinition(self)




    def ruleInterfaceDefinition(self):

        localctx = SysMLv2Parser.RuleInterfaceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_ruleInterfaceDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2283
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 2284
            self.ruleInterfaceDefKeyword()
            self.state = 2285
            self.ruleDefinitionDeclaration()
            self.state = 2286
            self.ruleInterfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleInterfaceBody2Context(RuleInterfaceBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleInterfaceBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleInterfaceBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceBodyItemContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceBody2" ):
                listener.enterRuleInterfaceBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceBody2" ):
                listener.exitRuleInterfaceBody2(self)


    class RuleInterfaceBody1Context(RuleInterfaceBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceBody1" ):
                listener.enterRuleInterfaceBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceBody1" ):
                listener.exitRuleInterfaceBody1(self)



    def ruleInterfaceBody(self):

        localctx = SysMLv2Parser.RuleInterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_ruleInterfaceBody)
        self._la = 0 # Token type
        try:
            self.state = 2297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleInterfaceBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2288
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleInterfaceBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2289
                self.match(SysMLv2Parser.LBRACE)
                self.state = 2293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453517618067410) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 4468427047818273) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 137438953475) != 0):
                    self.state = 2290
                    self.ruleInterfaceBodyItem()
                    self.state = 2295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2296
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceBodyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceBodyItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleInterfaceBodyItem5Context(RuleInterfaceBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAliasMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAliasMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceBodyItem5" ):
                listener.enterRuleInterfaceBodyItem5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceBodyItem5" ):
                listener.exitRuleInterfaceBodyItem5(self)


    class RuleInterfaceBodyItem4Context(RuleInterfaceBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleInterfaceOccurrenceUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceOccurrenceUsageMemberContext,0)

        def ruleEmptySuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptySuccessionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceBodyItem4" ):
                listener.enterRuleInterfaceBodyItem4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceBodyItem4" ):
                listener.exitRuleInterfaceBodyItem4(self)


    class RuleInterfaceBodyItem3Context(RuleInterfaceBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleInterfaceNonOccurrenceUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceNonOccurrenceUsageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceBodyItem3" ):
                listener.enterRuleInterfaceBodyItem3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceBodyItem3" ):
                listener.exitRuleInterfaceBodyItem3(self)


    class RuleInterfaceBodyItem2Context(RuleInterfaceBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleVariantUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVariantUsageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceBodyItem2" ):
                listener.enterRuleInterfaceBodyItem2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceBodyItem2" ):
                listener.exitRuleInterfaceBodyItem2(self)


    class RuleInterfaceBodyItem6Context(RuleInterfaceBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceBodyItem6" ):
                listener.enterRuleInterfaceBodyItem6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceBodyItem6" ):
                listener.exitRuleInterfaceBodyItem6(self)


    class RuleInterfaceBodyItem1Context(RuleInterfaceBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDefinitionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceBodyItem1" ):
                listener.enterRuleInterfaceBodyItem1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceBodyItem1" ):
                listener.exitRuleInterfaceBodyItem1(self)



    def ruleInterfaceBodyItem(self):

        localctx = SysMLv2Parser.RuleInterfaceBodyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_ruleInterfaceBodyItem)
        self._la = 0 # Token type
        try:
            self.state = 2308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleInterfaceBodyItem1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2299
                self.ruleDefinitionMember()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleInterfaceBodyItem2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2300
                self.ruleVariantUsageMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleInterfaceBodyItem3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2301
                self.ruleInterfaceNonOccurrenceUsageMember()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleInterfaceBodyItem4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 2302
                    self.ruleEmptySuccessionMember()


                self.state = 2305
                self.ruleInterfaceOccurrenceUsageMember()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleInterfaceBodyItem5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2306
                self.ruleAliasMember()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleInterfaceBodyItem6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2307
                self.ruleImport()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceNonOccurrenceUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleInterfaceNonOccurrenceUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceNonOccurrenceUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceNonOccurrenceUsageMember" ):
                listener.enterRuleInterfaceNonOccurrenceUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceNonOccurrenceUsageMember" ):
                listener.exitRuleInterfaceNonOccurrenceUsageMember(self)




    def ruleInterfaceNonOccurrenceUsageMember(self):

        localctx = SysMLv2Parser.RuleInterfaceNonOccurrenceUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_ruleInterfaceNonOccurrenceUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.ruleMemberPrefix()
            self.state = 2311
            self.ruleInterfaceNonOccurrenceUsageElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceNonOccurrenceUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceNonOccurrenceUsageElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleInterfaceNonOccurrenceUsageElement1Context(RuleInterfaceNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleReferenceUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferenceUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceNonOccurrenceUsageElement1" ):
                listener.enterRuleInterfaceNonOccurrenceUsageElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceNonOccurrenceUsageElement1" ):
                listener.exitRuleInterfaceNonOccurrenceUsageElement1(self)


    class RuleInterfaceNonOccurrenceUsageElement3Context(RuleInterfaceNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleEnumerationUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEnumerationUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceNonOccurrenceUsageElement3" ):
                listener.enterRuleInterfaceNonOccurrenceUsageElement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceNonOccurrenceUsageElement3" ):
                listener.exitRuleInterfaceNonOccurrenceUsageElement3(self)


    class RuleInterfaceNonOccurrenceUsageElement2Context(RuleInterfaceNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAttributeUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAttributeUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceNonOccurrenceUsageElement2" ):
                listener.enterRuleInterfaceNonOccurrenceUsageElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceNonOccurrenceUsageElement2" ):
                listener.exitRuleInterfaceNonOccurrenceUsageElement2(self)


    class RuleInterfaceNonOccurrenceUsageElement5Context(RuleInterfaceNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSuccessionAsUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSuccessionAsUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceNonOccurrenceUsageElement5" ):
                listener.enterRuleInterfaceNonOccurrenceUsageElement5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceNonOccurrenceUsageElement5" ):
                listener.exitRuleInterfaceNonOccurrenceUsageElement5(self)


    class RuleInterfaceNonOccurrenceUsageElement4Context(RuleInterfaceNonOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBindingConnectorAsUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBindingConnectorAsUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceNonOccurrenceUsageElement4" ):
                listener.enterRuleInterfaceNonOccurrenceUsageElement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceNonOccurrenceUsageElement4" ):
                listener.exitRuleInterfaceNonOccurrenceUsageElement4(self)



    def ruleInterfaceNonOccurrenceUsageElement(self):

        localctx = SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_ruleInterfaceNonOccurrenceUsageElement)
        try:
            self.state = 2318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2313
                self.ruleReferenceUsage()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2314
                self.ruleAttributeUsage()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2315
                self.ruleEnumerationUsage()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2316
                self.ruleBindingConnectorAsUsage()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleInterfaceNonOccurrenceUsageElement5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2317
                self.ruleSuccessionAsUsage()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceOccurrenceUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleInterfaceOccurrenceUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceOccurrenceUsageElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceOccurrenceUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceOccurrenceUsageMember" ):
                listener.enterRuleInterfaceOccurrenceUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceOccurrenceUsageMember" ):
                listener.exitRuleInterfaceOccurrenceUsageMember(self)




    def ruleInterfaceOccurrenceUsageMember(self):

        localctx = SysMLv2Parser.RuleInterfaceOccurrenceUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_ruleInterfaceOccurrenceUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.ruleMemberPrefix()
            self.state = 2321
            self.ruleInterfaceOccurrenceUsageElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceOccurrenceUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceOccurrenceUsageElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleInterfaceOccurrenceUsageElement3Context(RuleInterfaceOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBehaviorUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBehaviorUsageElementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceOccurrenceUsageElement3" ):
                listener.enterRuleInterfaceOccurrenceUsageElement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceOccurrenceUsageElement3" ):
                listener.exitRuleInterfaceOccurrenceUsageElement3(self)


    class RuleInterfaceOccurrenceUsageElement2Context(RuleInterfaceOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleStructureUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStructureUsageElementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceOccurrenceUsageElement2" ):
                listener.enterRuleInterfaceOccurrenceUsageElement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceOccurrenceUsageElement2" ):
                listener.exitRuleInterfaceOccurrenceUsageElement2(self)


    class RuleInterfaceOccurrenceUsageElement1Context(RuleInterfaceOccurrenceUsageElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceOccurrenceUsageElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDefaultInterfaceEnd(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefaultInterfaceEndContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceOccurrenceUsageElement1" ):
                listener.enterRuleInterfaceOccurrenceUsageElement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceOccurrenceUsageElement1" ):
                listener.exitRuleInterfaceOccurrenceUsageElement1(self)



    def ruleInterfaceOccurrenceUsageElement(self):

        localctx = SysMLv2Parser.RuleInterfaceOccurrenceUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_ruleInterfaceOccurrenceUsageElement)
        try:
            self.state = 2326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleInterfaceOccurrenceUsageElement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2323
                self.ruleDefaultInterfaceEnd()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleInterfaceOccurrenceUsageElement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2324
                self.ruleStructureUsageElement()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleInterfaceOccurrenceUsageElement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2325
                self.ruleBehaviorUsageElement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefaultInterfaceEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_END(self):
            return self.getToken(SysMLv2Parser.K_END, 0)

        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def ruleFeatureDirection(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureDirectionContext,0)


        def K_ABSTRACT(self):
            return self.getToken(SysMLv2Parser.K_ABSTRACT, 0)

        def K_VARIATION(self):
            return self.getToken(SysMLv2Parser.K_VARIATION, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefaultInterfaceEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefaultInterfaceEnd" ):
                listener.enterRuleDefaultInterfaceEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefaultInterfaceEnd" ):
                listener.exitRuleDefaultInterfaceEnd(self)




    def ruleDefaultInterfaceEnd(self):

        localctx = SysMLv2Parser.RuleDefaultInterfaceEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_ruleDefaultInterfaceEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 844424930131969) != 0):
                self.state = 2328
                self.ruleFeatureDirection()


            self.state = 2332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==30:
                self.state = 2331
                _la = self._input.LA(1)
                if not(_la==12 or _la==30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2334
            self.match(SysMLv2Parser.K_END)
            self.state = 2335
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleInterfaceKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceUsageKeyword" ):
                listener.enterRuleInterfaceUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceUsageKeyword" ):
                listener.exitRuleInterfaceUsageKeyword(self)




    def ruleInterfaceUsageKeyword(self):

        localctx = SysMLv2Parser.RuleInterfaceUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_ruleInterfaceUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.ruleInterfaceKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleInterfaceUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceUsageKeywordContext,0)


        def ruleInterfaceUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceUsageDeclarationContext,0)


        def ruleInterfaceBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceUsage" ):
                listener.enterRuleInterfaceUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceUsage" ):
                listener.exitRuleInterfaceUsage(self)




    def ruleInterfaceUsage(self):

        localctx = SysMLv2Parser.RuleInterfaceUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_ruleInterfaceUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2339
            self.ruleOccurrenceUsagePrefix()
            self.state = 2340
            self.ruleInterfaceUsageKeyword()
            self.state = 2341
            self.ruleInterfaceUsageDeclaration()
            self.state = 2342
            self.ruleInterfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceUsageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceUsageDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleInterfaceUsageDeclaration2Context(RuleInterfaceUsageDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceUsageDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleInterfacePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfacePartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceUsageDeclaration2" ):
                listener.enterRuleInterfaceUsageDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceUsageDeclaration2" ):
                listener.exitRuleInterfaceUsageDeclaration2(self)


    class RuleInterfaceUsageDeclaration1Context(RuleInterfaceUsageDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfaceUsageDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)

        def ruleConnectorKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorKeywordContext,0)

        def ruleInterfacePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfacePartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceUsageDeclaration1" ):
                listener.enterRuleInterfaceUsageDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceUsageDeclaration1" ):
                listener.exitRuleInterfaceUsageDeclaration1(self)



    def ruleInterfaceUsageDeclaration(self):

        localctx = SysMLv2Parser.RuleInterfaceUsageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_ruleInterfaceUsageDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleInterfaceUsageDeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2344
                    self.ruleUsageDeclaration()


                self.state = 2350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 2347
                    self.ruleConnectorKeyword()
                    self.state = 2348
                    self.ruleInterfacePart()


                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleInterfaceUsageDeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2352
                self.ruleInterfacePart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfacePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfacePart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleInterfacePart2Context(RuleInterfacePartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfacePartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleNaryInterfacePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNaryInterfacePartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfacePart2" ):
                listener.enterRuleInterfacePart2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfacePart2" ):
                listener.exitRuleInterfacePart2(self)


    class RuleInterfacePart1Context(RuleInterfacePartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleInterfacePartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBinaryInterfacePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBinaryInterfacePartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfacePart1" ):
                listener.enterRuleInterfacePart1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfacePart1" ):
                listener.exitRuleInterfacePart1(self)



    def ruleInterfacePart(self):

        localctx = SysMLv2Parser.RuleInterfacePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_ruleInterfacePart)
        try:
            self.state = 2357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                localctx = SysMLv2Parser.RuleInterfacePart1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2355
                self.ruleBinaryInterfacePart()
                pass
            elif token in [133]:
                localctx = SysMLv2Parser.RuleInterfacePart2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2356
                self.ruleNaryInterfacePart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBinaryInterfacePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleInterfaceEndMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleInterfaceEndMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceEndMemberContext,i)


        def K_TO(self):
            return self.getToken(SysMLv2Parser.K_TO, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBinaryInterfacePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBinaryInterfacePart" ):
                listener.enterRuleBinaryInterfacePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBinaryInterfacePart" ):
                listener.exitRuleBinaryInterfacePart(self)




    def ruleBinaryInterfacePart(self):

        localctx = SysMLv2Parser.RuleBinaryInterfacePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_ruleBinaryInterfacePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2359
            self.ruleInterfaceEndMember()
            self.state = 2360
            self.match(SysMLv2Parser.K_TO)
            self.state = 2361
            self.ruleInterfaceEndMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNaryInterfacePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SysMLv2Parser.LPAREN, 0)

        def ruleInterfaceEndMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleInterfaceEndMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceEndMemberContext,i)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def RPAREN(self):
            return self.getToken(SysMLv2Parser.RPAREN, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNaryInterfacePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNaryInterfacePart" ):
                listener.enterRuleNaryInterfacePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNaryInterfacePart" ):
                listener.exitRuleNaryInterfacePart(self)




    def ruleNaryInterfacePart(self):

        localctx = SysMLv2Parser.RuleNaryInterfacePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_ruleNaryInterfacePart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363
            self.match(SysMLv2Parser.LPAREN)
            self.state = 2364
            self.ruleInterfaceEndMember()
            self.state = 2365
            self.match(SysMLv2Parser.OP_COMMA)
            self.state = 2366
            self.ruleInterfaceEndMember()
            self.state = 2371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 2367
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 2368
                self.ruleInterfaceEndMember()
                self.state = 2373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2374
            self.match(SysMLv2Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceEndMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleInterfaceEnd(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInterfaceEndContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceEndMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceEndMember" ):
                listener.enterRuleInterfaceEndMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceEndMember" ):
                listener.exitRuleInterfaceEndMember(self)




    def ruleInterfaceEndMember(self):

        localctx = SysMLv2Parser.RuleInterfaceEndMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_ruleInterfaceEndMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2376
            self.ruleInterfaceEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInterfaceEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def ruleName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNameContext,0)


        def ruleReferencesKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferencesKeywordContext,0)


        def ruleOwnedMultiplicity(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedMultiplicityContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInterfaceEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInterfaceEnd" ):
                listener.enterRuleInterfaceEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInterfaceEnd" ):
                listener.exitRuleInterfaceEnd(self)




    def ruleInterfaceEnd(self):

        localctx = SysMLv2Parser.RuleInterfaceEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_ruleInterfaceEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 2378
                self.ruleName()
                self.state = 2379
                self.ruleReferencesKeyword()


            self.state = 2383
            self.ruleOwnedReferenceSubsetting()
            self.state = 2385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2384
                self.ruleOwnedMultiplicity()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAllocationKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ALLOCATION(self):
            return self.getToken(SysMLv2Parser.K_ALLOCATION, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAllocationKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAllocationKeyword" ):
                listener.enterRuleAllocationKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAllocationKeyword" ):
                listener.exitRuleAllocationKeyword(self)




    def ruleAllocationKeyword(self):

        localctx = SysMLv2Parser.RuleAllocationKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_ruleAllocationKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2387
            self.match(SysMLv2Parser.K_ALLOCATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAllocationDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAllocationKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocationKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAllocationDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAllocationDefKeyword" ):
                listener.enterRuleAllocationDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAllocationDefKeyword" ):
                listener.exitRuleAllocationDefKeyword(self)




    def ruleAllocationDefKeyword(self):

        localctx = SysMLv2Parser.RuleAllocationDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_ruleAllocationDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389
            self.ruleAllocationKeyword()
            self.state = 2390
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAllocationDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleAllocationDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocationDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAllocationDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAllocationDefinition" ):
                listener.enterRuleAllocationDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAllocationDefinition" ):
                listener.exitRuleAllocationDefinition(self)




    def ruleAllocationDefinition(self):

        localctx = SysMLv2Parser.RuleAllocationDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_ruleAllocationDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2392
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 2393
            self.ruleAllocationDefKeyword()
            self.state = 2394
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAllocationUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAllocationKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocationKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAllocationUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAllocationUsageKeyword" ):
                listener.enterRuleAllocationUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAllocationUsageKeyword" ):
                listener.exitRuleAllocationUsageKeyword(self)




    def ruleAllocationUsageKeyword(self):

        localctx = SysMLv2Parser.RuleAllocationUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_ruleAllocationUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2396
            self.ruleAllocationKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAllocateKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ALLOCATE(self):
            return self.getToken(SysMLv2Parser.K_ALLOCATE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAllocateKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAllocateKeyword" ):
                listener.enterRuleAllocateKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAllocateKeyword" ):
                listener.exitRuleAllocateKeyword(self)




    def ruleAllocateKeyword(self):

        localctx = SysMLv2Parser.RuleAllocateKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_ruleAllocateKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self.match(SysMLv2Parser.K_ALLOCATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAllocationUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleAllocationUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocationUsageDeclarationContext,0)


        def ruleUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAllocationUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAllocationUsage" ):
                listener.enterRuleAllocationUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAllocationUsage" ):
                listener.exitRuleAllocationUsage(self)




    def ruleAllocationUsage(self):

        localctx = SysMLv2Parser.RuleAllocationUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_ruleAllocationUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            self.ruleOccurrenceUsagePrefix()
            self.state = 2401
            self.ruleAllocationUsageDeclaration()
            self.state = 2402
            self.ruleUsageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAllocationUsageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAllocationUsageDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleAllocationUsageDeclaration1Context(RuleAllocationUsageDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleAllocationUsageDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAllocationUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocationUsageKeywordContext,0)

        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)

        def ruleAllocateKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocateKeywordContext,0)

        def ruleConnectorPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorPartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAllocationUsageDeclaration1" ):
                listener.enterRuleAllocationUsageDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAllocationUsageDeclaration1" ):
                listener.exitRuleAllocationUsageDeclaration1(self)


    class RuleAllocationUsageDeclaration2Context(RuleAllocationUsageDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleAllocationUsageDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAllocateKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAllocateKeywordContext,0)

        def ruleConnectorPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorPartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAllocationUsageDeclaration2" ):
                listener.enterRuleAllocationUsageDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAllocationUsageDeclaration2" ):
                listener.exitRuleAllocationUsageDeclaration2(self)



    def ruleAllocationUsageDeclaration(self):

        localctx = SysMLv2Parser.RuleAllocationUsageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_ruleAllocationUsageDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                localctx = SysMLv2Parser.RuleAllocationUsageDeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2404
                self.ruleAllocationUsageKeyword()
                self.state = 2406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2405
                    self.ruleUsageDeclaration()


                self.state = 2411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 2408
                    self.ruleAllocateKeyword()
                    self.state = 2409
                    self.ruleConnectorPart()


                pass
            elif token in [56]:
                localctx = SysMLv2Parser.RuleAllocationUsageDeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2413
                self.ruleAllocateKeyword()
                self.state = 2414
                self.ruleConnectorPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ACTION(self):
            return self.getToken(SysMLv2Parser.K_ACTION, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionKeyword" ):
                listener.enterRuleActionKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionKeyword" ):
                listener.exitRuleActionKeyword(self)




    def ruleActionKeyword(self):

        localctx = SysMLv2Parser.RuleActionKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_ruleActionKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self.match(SysMLv2Parser.K_ACTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleActionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionDefKeyword" ):
                listener.enterRuleActionDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionDefKeyword" ):
                listener.exitRuleActionDefKeyword(self)




    def ruleActionDefKeyword(self):

        localctx = SysMLv2Parser.RuleActionDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_ruleActionDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2420
            self.ruleActionKeyword()
            self.state = 2421
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleActionDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleActionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionDefinition" ):
                listener.enterRuleActionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionDefinition" ):
                listener.exitRuleActionDefinition(self)




    def ruleActionDefinition(self):

        localctx = SysMLv2Parser.RuleActionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_ruleActionDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2423
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 2424
            self.ruleActionDefKeyword()
            self.state = 2425
            self.ruleDefinitionDeclaration()
            self.state = 2426
            self.ruleActionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleActionBody1Context(RuleActionBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBody1" ):
                listener.enterRuleActionBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBody1" ):
                listener.exitRuleActionBody1(self)


    class RuleActionBody2Context(RuleActionBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleActionBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleActionBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyItemContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBody2" ):
                listener.enterRuleActionBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBody2" ):
                listener.exitRuleActionBody2(self)



    def ruleActionBody(self):

        localctx = SysMLv2Parser.RuleActionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_ruleActionBody)
        self._la = 0 # Token type
        try:
            self.state = 2437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleActionBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2428
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleActionBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2429
                self.match(SysMLv2Parser.LBRACE)
                self.state = 2433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1143914270845302738) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8651413374734032969) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 6047313967329) != 0):
                    self.state = 2430
                    self.ruleActionBodyItem()
                    self.state = 2435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2436
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionBodyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionBodyItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleActionBodyItem3Context(RuleActionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDefinitionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyItem3" ):
                listener.enterRuleActionBodyItem3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyItem3" ):
                listener.exitRuleActionBodyItem3(self)


    class RuleActionBodyItem4Context(RuleActionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleVariantUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVariantUsageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyItem4" ):
                listener.enterRuleActionBodyItem4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyItem4" ):
                listener.exitRuleActionBodyItem4(self)


    class RuleActionBodyItem5Context(RuleActionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleNonOccurrenceUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNonOccurrenceUsageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyItem5" ):
                listener.enterRuleActionBodyItem5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyItem5" ):
                listener.exitRuleActionBodyItem5(self)


    class RuleActionBodyItem6Context(RuleActionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleStructureUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStructureUsageMemberContext,0)

        def ruleEmptySuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptySuccessionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyItem6" ):
                listener.enterRuleActionBodyItem6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyItem6" ):
                listener.exitRuleActionBodyItem6(self)


    class RuleActionBodyItem1Context(RuleActionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyItem1" ):
                listener.enterRuleActionBodyItem1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyItem1" ):
                listener.exitRuleActionBodyItem1(self)


    class RuleActionBodyItem2Context(RuleActionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAliasMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAliasMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyItem2" ):
                listener.enterRuleActionBodyItem2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyItem2" ):
                listener.exitRuleActionBodyItem2(self)


    class RuleActionBodyItem7Context(RuleActionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleInitialNodeMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInitialNodeMemberContext,0)

        def ruleTargetSuccessionMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleTargetSuccessionMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleTargetSuccessionMemberContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyItem7" ):
                listener.enterRuleActionBodyItem7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyItem7" ):
                listener.exitRuleActionBodyItem7(self)


    class RuleActionBodyItem8Context(RuleActionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBehaviorUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBehaviorUsageMemberContext,0)

        def ruleActionNodeMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeMemberContext,0)

        def ruleEmptySuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptySuccessionMemberContext,0)

        def ruleTargetSuccessionMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleTargetSuccessionMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleTargetSuccessionMemberContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyItem8" ):
                listener.enterRuleActionBodyItem8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyItem8" ):
                listener.exitRuleActionBodyItem8(self)


    class RuleActionBodyItem9Context(RuleActionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleGuardedSuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleGuardedSuccessionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyItem9" ):
                listener.enterRuleActionBodyItem9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyItem9" ):
                listener.exitRuleActionBodyItem9(self)



    def ruleActionBodyItem(self):

        localctx = SysMLv2Parser.RuleActionBodyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_ruleActionBodyItem)
        self._la = 0 # Token type
        try:
            self.state = 2469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleActionBodyItem1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2439
                self.ruleImport()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleActionBodyItem2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2440
                self.ruleAliasMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleActionBodyItem3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2441
                self.ruleDefinitionMember()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleActionBodyItem4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2442
                self.ruleVariantUsageMember()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleActionBodyItem5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2443
                self.ruleNonOccurrenceUsageMember()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleActionBodyItem6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 2444
                    self.ruleEmptySuccessionMember()


                self.state = 2447
                self.ruleStructureUsageMember()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleActionBodyItem7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2448
                self.ruleInitialNodeMember()
                self.state = 2452
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2449
                        self.ruleTargetSuccessionMember() 
                    self.state = 2454
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

                pass

            elif la_ == 8:
                localctx = SysMLv2Parser.RuleActionBodyItem8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 2455
                    self.ruleEmptySuccessionMember()


                self.state = 2460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 2458
                    self.ruleBehaviorUsageMember()
                    pass

                elif la_ == 2:
                    self.state = 2459
                    self.ruleActionNodeMember()
                    pass


                self.state = 2465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2462
                        self.ruleTargetSuccessionMember() 
                    self.state = 2467
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

                pass

            elif la_ == 9:
                localctx = SysMLv2Parser.RuleActionBodyItem9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2468
                self.ruleGuardedSuccessionMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInitialNodeMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def K_FIRST(self):
            return self.getToken(SysMLv2Parser.K_FIRST, 0)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def ruleRelationshipBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRelationshipBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInitialNodeMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInitialNodeMember" ):
                listener.enterRuleInitialNodeMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInitialNodeMember" ):
                listener.exitRuleInitialNodeMember(self)




    def ruleInitialNodeMember(self):

        localctx = SysMLv2Parser.RuleInitialNodeMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_ruleInitialNodeMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            self.ruleMemberPrefix()
            self.state = 2472
            self.match(SysMLv2Parser.K_FIRST)
            self.state = 2473
            self.ruleQualifiedName()
            self.state = 2474
            self.ruleRelationshipBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionNodeMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleActionNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionNodeMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNodeMember" ):
                listener.enterRuleActionNodeMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNodeMember" ):
                listener.exitRuleActionNodeMember(self)




    def ruleActionNodeMember(self):

        localctx = SysMLv2Parser.RuleActionNodeMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_ruleActionNodeMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2476
            self.ruleMemberPrefix()
            self.state = 2477
            self.ruleActionNode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetSuccessionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleActionTargetSuccession(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionTargetSuccessionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetSuccessionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetSuccessionMember" ):
                listener.enterRuleTargetSuccessionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetSuccessionMember" ):
                listener.exitRuleTargetSuccessionMember(self)




    def ruleTargetSuccessionMember(self):

        localctx = SysMLv2Parser.RuleTargetSuccessionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_ruleTargetSuccessionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.ruleMemberPrefix()
            self.state = 2480
            self.ruleActionTargetSuccession()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleGuardedSuccessionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleGuardedSuccession(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleGuardedSuccessionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleGuardedSuccessionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleGuardedSuccessionMember" ):
                listener.enterRuleGuardedSuccessionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleGuardedSuccessionMember" ):
                listener.exitRuleGuardedSuccessionMember(self)




    def ruleGuardedSuccessionMember(self):

        localctx = SysMLv2Parser.RuleGuardedSuccessionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_ruleGuardedSuccessionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2482
            self.ruleGuardedSuccession()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleActionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionUsageKeyword" ):
                listener.enterRuleActionUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionUsageKeyword" ):
                listener.exitRuleActionUsageKeyword(self)




    def ruleActionUsageKeyword(self):

        localctx = SysMLv2Parser.RuleActionUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_ruleActionUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2484
            self.ruleActionKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleActionUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageKeywordContext,0)


        def ruleActionUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageDeclarationContext,0)


        def ruleActionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionUsage" ):
                listener.enterRuleActionUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionUsage" ):
                listener.exitRuleActionUsage(self)




    def ruleActionUsage(self):

        localctx = SysMLv2Parser.RuleActionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_ruleActionUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2486
            self.ruleOccurrenceUsagePrefix()
            self.state = 2487
            self.ruleActionUsageKeyword()
            self.state = 2488
            self.ruleActionUsageDeclaration()
            self.state = 2489
            self.ruleActionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePerformActionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def K_PERFORM(self):
            return self.getToken(SysMLv2Parser.K_PERFORM, 0)

        def rulePerformActionUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePerformActionUsageDeclarationContext,0)


        def ruleActionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePerformActionUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePerformActionUsage" ):
                listener.enterRulePerformActionUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePerformActionUsage" ):
                listener.exitRulePerformActionUsage(self)




    def rulePerformActionUsage(self):

        localctx = SysMLv2Parser.RulePerformActionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_rulePerformActionUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2491
            self.ruleOccurrenceUsagePrefix()
            self.state = 2492
            self.match(SysMLv2Parser.K_PERFORM)
            self.state = 2493
            self.rulePerformActionUsageDeclaration()
            self.state = 2494
            self.ruleActionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePerformActionUsageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def ruleActionUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageKeywordContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def ruleFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationPartContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePerformActionUsageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePerformActionUsageDeclaration" ):
                listener.enterRulePerformActionUsageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePerformActionUsageDeclaration" ):
                listener.exitRulePerformActionUsageDeclaration(self)




    def rulePerformActionUsageDeclaration(self):

        localctx = SysMLv2Parser.RulePerformActionUsageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_rulePerformActionUsageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                self.state = 2496
                self.ruleOwnedReferenceSubsetting()
                self.state = 2498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 14465) != 0):
                    self.state = 2497
                    self.ruleFeatureSpecializationPart()


                pass
            elif token in [57]:
                self.state = 2500
                self.ruleActionUsageKeyword()
                self.state = 2502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2501
                    self.ruleUsageDeclaration()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 2506
                self.ruleValuePart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionUsageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionUsageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionUsageDeclaration" ):
                listener.enterRuleActionUsageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionUsageDeclaration" ):
                listener.exitRuleActionUsageDeclaration(self)




    def ruleActionUsageDeclaration(self):

        localctx = SysMLv2Parser.RuleActionUsageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_ruleActionUsageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                self.state = 2509
                self.ruleUsageDeclaration()


            self.state = 2513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 2512
                self.ruleValuePart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionNode

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleActionNode1Context(RuleActionNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSendNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSendNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNode1" ):
                listener.enterRuleActionNode1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNode1" ):
                listener.exitRuleActionNode1(self)


    class RuleActionNode3Context(RuleActionNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAssignmentNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAssignmentNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNode3" ):
                listener.enterRuleActionNode3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNode3" ):
                listener.exitRuleActionNode3(self)


    class RuleActionNode2Context(RuleActionNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAcceptNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAcceptNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNode2" ):
                listener.enterRuleActionNode2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNode2" ):
                listener.exitRuleActionNode2(self)


    class RuleActionNode5Context(RuleActionNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleWhileLoopNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleWhileLoopNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNode5" ):
                listener.enterRuleActionNode5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNode5" ):
                listener.exitRuleActionNode5(self)


    class RuleActionNode4Context(RuleActionNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleIfNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIfNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNode4" ):
                listener.enterRuleActionNode4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNode4" ):
                listener.exitRuleActionNode4(self)


    class RuleActionNode7Context(RuleActionNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleControlNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleControlNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNode7" ):
                listener.enterRuleActionNode7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNode7" ):
                listener.exitRuleActionNode7(self)


    class RuleActionNode6Context(RuleActionNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleForLoopNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleForLoopNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNode6" ):
                listener.enterRuleActionNode6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNode6" ):
                listener.exitRuleActionNode6(self)



    def ruleActionNode(self):

        localctx = SysMLv2Parser.RuleActionNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_ruleActionNode)
        try:
            self.state = 2522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleActionNode1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2515
                self.ruleSendNode()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleActionNode2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2516
                self.ruleAcceptNode()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleActionNode3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2517
                self.ruleAssignmentNode()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleActionNode4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2518
                self.ruleIfNode()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleActionNode5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2519
                self.ruleWhileLoopNode()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleActionNode6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2520
                self.ruleForLoopNode()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleActionNode7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2521
                self.ruleControlNode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionNodeUsageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleActionUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageKeywordContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionNodeUsageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNodeUsageDeclaration" ):
                listener.enterRuleActionNodeUsageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNodeUsageDeclaration" ):
                listener.exitRuleActionNodeUsageDeclaration(self)




    def ruleActionNodeUsageDeclaration(self):

        localctx = SysMLv2Parser.RuleActionNodeUsageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_ruleActionNodeUsageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2524
            self.ruleActionUsageKeyword()
            self.state = 2526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                self.state = 2525
                self.ruleUsageDeclaration()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionNodePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleActionNodeUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionNodePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNodePrefix" ):
                listener.enterRuleActionNodePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNodePrefix" ):
                listener.exitRuleActionNodePrefix(self)




    def ruleActionNodePrefix(self):

        localctx = SysMLv2Parser.RuleActionNodePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_ruleActionNodePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2528
            self.ruleOccurrenceUsagePrefix()
            self.state = 2530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 2529
                self.ruleActionNodeUsageDeclaration()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAcceptNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleAcceptNodeDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAcceptNodeDeclarationContext,0)


        def ruleActionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAcceptNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAcceptNode" ):
                listener.enterRuleAcceptNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAcceptNode" ):
                listener.exitRuleAcceptNode(self)




    def ruleAcceptNode(self):

        localctx = SysMLv2Parser.RuleAcceptNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_ruleAcceptNode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2532
            self.ruleOccurrenceUsagePrefix()
            self.state = 2533
            self.ruleAcceptNodeDeclaration()
            self.state = 2534
            self.ruleActionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAcceptNodeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ACCEPT(self):
            return self.getToken(SysMLv2Parser.K_ACCEPT, 0)

        def ruleAcceptParameterPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAcceptParameterPartContext,0)


        def ruleActionNodeUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAcceptNodeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAcceptNodeDeclaration" ):
                listener.enterRuleAcceptNodeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAcceptNodeDeclaration" ):
                listener.exitRuleAcceptNodeDeclaration(self)




    def ruleAcceptNodeDeclaration(self):

        localctx = SysMLv2Parser.RuleAcceptNodeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_ruleAcceptNodeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 2536
                self.ruleActionNodeUsageDeclaration()


            self.state = 2539
            self.match(SysMLv2Parser.K_ACCEPT)
            self.state = 2540
            self.ruleAcceptParameterPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAcceptParameterPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePayloadParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePayloadParameterMemberContext,0)


        def K_VIA(self):
            return self.getToken(SysMLv2Parser.K_VIA, 0)

        def ruleNodeParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNodeParameterMemberContext,0)


        def ruleEmptyParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyParameterMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAcceptParameterPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAcceptParameterPart" ):
                listener.enterRuleAcceptParameterPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAcceptParameterPart" ):
                listener.exitRuleAcceptParameterPart(self)




    def ruleAcceptParameterPart(self):

        localctx = SysMLv2Parser.RuleAcceptParameterPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_ruleAcceptParameterPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            self.rulePayloadParameterMember()
            self.state = 2546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.state = 2543
                self.match(SysMLv2Parser.K_VIA)
                self.state = 2544
                self.ruleNodeParameterMember()
                pass
            elif token in [41, 66, 79, 129, 135]:
                self.state = 2545
                self.ruleEmptyParameterMember()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePayloadParameterMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rulePayloadParameter(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePayloadParameterContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePayloadParameterMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePayloadParameterMember" ):
                listener.enterRulePayloadParameterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePayloadParameterMember" ):
                listener.exitRulePayloadParameterMember(self)




    def rulePayloadParameterMember(self):

        localctx = SysMLv2Parser.RulePayloadParameterMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_rulePayloadParameterMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2548
            self.rulePayloadParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePayloadParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePayloadParameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RulePayloadParameter2Context(RulePayloadParameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePayloadParameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleTriggerValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTriggerValuePartContext,0)

        def ruleIdentification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIdentificationContext,0)

        def rulePayloadFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePayloadFeatureSpecializationPartContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePayloadParameter2" ):
                listener.enterRulePayloadParameter2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePayloadParameter2" ):
                listener.exitRulePayloadParameter2(self)


    class RulePayloadParameter1Context(RulePayloadParameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePayloadParameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePayloadFeature(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePayloadFeatureContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePayloadParameter1" ):
                listener.enterRulePayloadParameter1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePayloadParameter1" ):
                listener.exitRulePayloadParameter1(self)



    def rulePayloadParameter(self):

        localctx = SysMLv2Parser.RulePayloadParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_rulePayloadParameter)
        self._la = 0 # Token type
        try:
            self.state = 2558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RulePayloadParameter1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2550
                self.rulePayloadFeature()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RulePayloadParameter2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558133249) != 0):
                    self.state = 2551
                    self.ruleIdentification()


                self.state = 2555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 14465) != 0):
                    self.state = 2554
                    self.rulePayloadFeatureSpecializationPart()


                self.state = 2557
                self.ruleTriggerValuePart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTriggerValuePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTriggerFeatureValue(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTriggerFeatureValueContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTriggerValuePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTriggerValuePart" ):
                listener.enterRuleTriggerValuePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTriggerValuePart" ):
                listener.exitRuleTriggerValuePart(self)




    def ruleTriggerValuePart(self):

        localctx = SysMLv2Parser.RuleTriggerValuePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_ruleTriggerValuePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2560
            self.ruleTriggerFeatureValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTriggerFeatureValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTriggerExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTriggerExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTriggerFeatureValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTriggerFeatureValue" ):
                listener.enterRuleTriggerFeatureValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTriggerFeatureValue" ):
                listener.exitRuleTriggerFeatureValue(self)




    def ruleTriggerFeatureValue(self):

        localctx = SysMLv2Parser.RuleTriggerFeatureValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_ruleTriggerFeatureValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2562
            self.ruleTriggerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTriggerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTriggerExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleTriggerExpression1Context(RuleTriggerExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleTriggerExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleTimeTriggerKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTimeTriggerKindContext,0)

        def ruleArgumentMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTriggerExpression1" ):
                listener.enterRuleTriggerExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTriggerExpression1" ):
                listener.exitRuleTriggerExpression1(self)


    class RuleTriggerExpression2Context(RuleTriggerExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleTriggerExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleChangeTriggerKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleChangeTriggerKindContext,0)

        def ruleArgumentExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentExpressionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTriggerExpression2" ):
                listener.enterRuleTriggerExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTriggerExpression2" ):
                listener.exitRuleTriggerExpression2(self)



    def ruleTriggerExpression(self):

        localctx = SysMLv2Parser.RuleTriggerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_ruleTriggerExpression)
        try:
            self.state = 2570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61, 62]:
                localctx = SysMLv2Parser.RuleTriggerExpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2564
                self.ruleTimeTriggerKind()
                self.state = 2565
                self.ruleArgumentMember()
                pass
            elif token in [63]:
                localctx = SysMLv2Parser.RuleTriggerExpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2567
                self.ruleChangeTriggerKind()
                self.state = 2568
                self.ruleArgumentExpressionMember()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTimeTriggerKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTimeTriggerKind

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleTimeTriggerKind2Context(RuleTimeTriggerKindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleTimeTriggerKindContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_AFTER(self):
            return self.getToken(SysMLv2Parser.K_AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTimeTriggerKind2" ):
                listener.enterRuleTimeTriggerKind2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTimeTriggerKind2" ):
                listener.exitRuleTimeTriggerKind2(self)


    class RuleTimeTriggerKind1Context(RuleTimeTriggerKindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleTimeTriggerKindContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_AT(self):
            return self.getToken(SysMLv2Parser.K_AT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTimeTriggerKind1" ):
                listener.enterRuleTimeTriggerKind1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTimeTriggerKind1" ):
                listener.exitRuleTimeTriggerKind1(self)



    def ruleTimeTriggerKind(self):

        localctx = SysMLv2Parser.RuleTimeTriggerKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_ruleTimeTriggerKind)
        try:
            self.state = 2574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                localctx = SysMLv2Parser.RuleTimeTriggerKind1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2572
                self.match(SysMLv2Parser.K_AT)
                pass
            elif token in [62]:
                localctx = SysMLv2Parser.RuleTimeTriggerKind2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2573
                self.match(SysMLv2Parser.K_AFTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleChangeTriggerKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WHEN(self):
            return self.getToken(SysMLv2Parser.K_WHEN, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleChangeTriggerKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleChangeTriggerKind" ):
                listener.enterRuleChangeTriggerKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleChangeTriggerKind" ):
                listener.exitRuleChangeTriggerKind(self)




    def ruleChangeTriggerKind(self):

        localctx = SysMLv2Parser.RuleChangeTriggerKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_ruleChangeTriggerKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2576
            self.match(SysMLv2Parser.K_WHEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleArgumentExpressionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleArgumentExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleArgumentExpressionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleArgumentExpressionMember" ):
                listener.enterRuleArgumentExpressionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleArgumentExpressionMember" ):
                listener.exitRuleArgumentExpressionMember(self)




    def ruleArgumentExpressionMember(self):

        localctx = SysMLv2Parser.RuleArgumentExpressionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_ruleArgumentExpressionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            self.ruleArgumentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleArgumentExpressionValue(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentExpressionValueContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleArgumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleArgumentExpression" ):
                listener.enterRuleArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleArgumentExpression" ):
                listener.exitRuleArgumentExpression(self)




    def ruleArgumentExpression(self):

        localctx = SysMLv2Parser.RuleArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_ruleArgumentExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2580
            self.ruleArgumentExpressionValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleArgumentExpressionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedExpressionReference(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionReferenceContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleArgumentExpressionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleArgumentExpressionValue" ):
                listener.enterRuleArgumentExpressionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleArgumentExpressionValue" ):
                listener.exitRuleArgumentExpressionValue(self)




    def ruleArgumentExpressionValue(self):

        localctx = SysMLv2Parser.RuleArgumentExpressionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_ruleArgumentExpressionValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2582
            self.ruleOwnedExpressionReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSendNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleSendNodeDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSendNodeDeclarationContext,0)


        def ruleActionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSendNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSendNode" ):
                listener.enterRuleSendNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSendNode" ):
                listener.exitRuleSendNode(self)




    def ruleSendNode(self):

        localctx = SysMLv2Parser.RuleSendNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_ruleSendNode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self.ruleOccurrenceUsagePrefix()
            self.state = 2585
            self.ruleSendNodeDeclaration()
            self.state = 2586
            self.ruleActionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSendNodeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SEND(self):
            return self.getToken(SysMLv2Parser.K_SEND, 0)

        def ruleNodeParameterMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleNodeParameterMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleNodeParameterMemberContext,i)


        def K_VIA(self):
            return self.getToken(SysMLv2Parser.K_VIA, 0)

        def ruleEmptyParameterMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleEmptyParameterMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyParameterMemberContext,i)


        def K_TO(self):
            return self.getToken(SysMLv2Parser.K_TO, 0)

        def ruleActionNodeUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSendNodeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSendNodeDeclaration" ):
                listener.enterRuleSendNodeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSendNodeDeclaration" ):
                listener.exitRuleSendNodeDeclaration(self)




    def ruleSendNodeDeclaration(self):

        localctx = SysMLv2Parser.RuleSendNodeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_ruleSendNodeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 2588
                self.ruleActionNodeUsageDeclaration()


            self.state = 2591
            self.match(SysMLv2Parser.K_SEND)
            self.state = 2592
            self.ruleNodeParameterMember()
            self.state = 2596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.state = 2593
                self.match(SysMLv2Parser.K_VIA)
                self.state = 2594
                self.ruleNodeParameterMember()
                pass
            elif token in [3, 41, 129, 135]:
                self.state = 2595
                self.ruleEmptyParameterMember()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2601
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 2598
                self.match(SysMLv2Parser.K_TO)
                self.state = 2599
                self.ruleNodeParameterMember()
                pass
            elif token in [41, 129, 135]:
                self.state = 2600
                self.ruleEmptyParameterMember()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNodeParameterMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleNodeParameter(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNodeParameterContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNodeParameterMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNodeParameterMember" ):
                listener.enterRuleNodeParameterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNodeParameterMember" ):
                listener.exitRuleNodeParameterMember(self)




    def ruleNodeParameterMember(self):

        localctx = SysMLv2Parser.RuleNodeParameterMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_ruleNodeParameterMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2603
            self.ruleNodeParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNodeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFeatureBinding(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureBindingContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNodeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNodeParameter" ):
                listener.enterRuleNodeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNodeParameter" ):
                listener.exitRuleNodeParameter(self)




    def ruleNodeParameter(self):

        localctx = SysMLv2Parser.RuleNodeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_ruleNodeParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2605
            self.ruleFeatureBinding()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureBinding" ):
                listener.enterRuleFeatureBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureBinding" ):
                listener.exitRuleFeatureBinding(self)




    def ruleFeatureBinding(self):

        localctx = SysMLv2Parser.RuleFeatureBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_ruleFeatureBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2607
            self.ruleOwnedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAssignmentNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleAssignmentNodeDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAssignmentNodeDeclarationContext,0)


        def ruleActionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAssignmentNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAssignmentNode" ):
                listener.enterRuleAssignmentNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAssignmentNode" ):
                listener.exitRuleAssignmentNode(self)




    def ruleAssignmentNode(self):

        localctx = SysMLv2Parser.RuleAssignmentNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_ruleAssignmentNode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2609
            self.ruleOccurrenceUsagePrefix()
            self.state = 2610
            self.ruleAssignmentNodeDeclaration()
            self.state = 2611
            self.ruleActionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAssignmentNodeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ASSIGN(self):
            return self.getToken(SysMLv2Parser.K_ASSIGN, 0)

        def ruleAssignmentTargetMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAssignmentTargetMemberContext,0)


        def ruleFeatureChainMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureChainMemberContext,0)


        def OP_COLON_EQ(self):
            return self.getToken(SysMLv2Parser.OP_COLON_EQ, 0)

        def ruleNodeParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNodeParameterMemberContext,0)


        def ruleActionNodeUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAssignmentNodeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAssignmentNodeDeclaration" ):
                listener.enterRuleAssignmentNodeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAssignmentNodeDeclaration" ):
                listener.exitRuleAssignmentNodeDeclaration(self)




    def ruleAssignmentNodeDeclaration(self):

        localctx = SysMLv2Parser.RuleAssignmentNodeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_ruleAssignmentNodeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 2613
                self.ruleActionNodeUsageDeclaration()


            self.state = 2616
            self.match(SysMLv2Parser.K_ASSIGN)
            self.state = 2617
            self.ruleAssignmentTargetMember()
            self.state = 2618
            self.ruleFeatureChainMember()
            self.state = 2619
            self.match(SysMLv2Parser.OP_COLON_EQ)
            self.state = 2620
            self.ruleNodeParameterMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAssignmentTargetMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTargetParameter(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTargetParameterContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAssignmentTargetMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAssignmentTargetMember" ):
                listener.enterRuleAssignmentTargetMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAssignmentTargetMember" ):
                listener.exitRuleAssignmentTargetMember(self)




    def ruleAssignmentTargetMember(self):

        localctx = SysMLv2Parser.RuleAssignmentTargetMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_ruleAssignmentTargetMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2622
            self.ruleTargetParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTargetFeatureMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTargetFeatureMemberContext,0)


        def ruleTargetBinding(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTargetBindingContext,0)


        def OP_DOT(self):
            return self.getToken(SysMLv2Parser.OP_DOT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetParameter" ):
                listener.enterRuleTargetParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetParameter" ):
                listener.exitRuleTargetParameter(self)




    def ruleTargetParameter(self):

        localctx = SysMLv2Parser.RuleTargetParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_ruleTargetParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 2624
                self.ruleTargetBinding()
                self.state = 2625
                self.match(SysMLv2Parser.OP_DOT)


            self.state = 2629
            self.ruleTargetFeatureMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetFeatureMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTargetFeature(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTargetFeatureContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetFeatureMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetFeatureMember" ):
                listener.enterRuleTargetFeatureMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetFeatureMember" ):
                listener.exitRuleTargetFeatureMember(self)




    def ruleTargetFeatureMember(self):

        localctx = SysMLv2Parser.RuleTargetFeatureMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_ruleTargetFeatureMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2631
            self.ruleTargetFeature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetFeatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTargetAccessedFeatureMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTargetAccessedFeatureMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetFeature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetFeature" ):
                listener.enterRuleTargetFeature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetFeature" ):
                listener.exitRuleTargetFeature(self)




    def ruleTargetFeature(self):

        localctx = SysMLv2Parser.RuleTargetFeatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_ruleTargetFeature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2633
            self.ruleTargetAccessedFeatureMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetAccessedFeatureMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptyUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetAccessedFeatureMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetAccessedFeatureMember" ):
                listener.enterRuleTargetAccessedFeatureMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetAccessedFeatureMember" ):
                listener.exitRuleTargetAccessedFeatureMember(self)




    def ruleTargetAccessedFeatureMember(self):

        localctx = SysMLv2Parser.RuleTargetAccessedFeatureMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_ruleTargetAccessedFeatureMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2635
            self.ruleEmptyUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTargetExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTargetExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetBinding" ):
                listener.enterRuleTargetBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetBinding" ):
                listener.exitRuleTargetBinding(self)




    def ruleTargetBinding(self):

        localctx = SysMLv2Parser.RuleTargetBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_ruleTargetBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2637
            self.ruleTargetExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBaseExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBaseExpressionContext,0)


        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.LSQUARE)
            else:
                return self.getToken(SysMLv2Parser.LSQUARE, i)

        def ruleSequenceExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleSequenceExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleSequenceExpressionContext,i)


        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.RSQUARE)
            else:
                return self.getToken(SysMLv2Parser.RSQUARE, i)

        def OP_MINUS_RANGLE(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_MINUS_RANGLE)
            else:
                return self.getToken(SysMLv2Parser.OP_MINUS_RANGLE, i)

        def ruleReferenceTyping(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleReferenceTypingContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleReferenceTypingContext,i)


        def OP_DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_DOT)
            else:
                return self.getToken(SysMLv2Parser.OP_DOT, i)

        def ruleExpressionBodyMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleExpressionBodyMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleExpressionBodyMemberContext,i)


        def OP_DOT_QMARK(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_DOT_QMARK)
            else:
                return self.getToken(SysMLv2Parser.OP_DOT_QMARK, i)

        def ruleFeatureChainMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureChainMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureChainMemberContext,i)


        def ruleFunctionReferenceMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFunctionReferenceMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFunctionReferenceMemberContext,i)


        def ruleArgumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleArgumentListContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentListContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetExpression" ):
                listener.enterRuleTargetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetExpression" ):
                listener.exitRuleTargetExpression(self)




    def ruleTargetExpression(self):

        localctx = SysMLv2Parser.RuleTargetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_ruleTargetExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2639
            self.ruleBaseExpression()
            self.state = 2663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2642
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                    if la_ == 1:
                        self.state = 2640
                        self.match(SysMLv2Parser.OP_DOT)
                        self.state = 2641
                        self.ruleFeatureChainMember()


                    self.state = 2659
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [132]:
                        self.state = 2644
                        self.match(SysMLv2Parser.LSQUARE)
                        self.state = 2645
                        self.ruleSequenceExpression()
                        self.state = 2646
                        self.match(SysMLv2Parser.RSQUARE)
                        pass
                    elif token in [151]:
                        self.state = 2648
                        self.match(SysMLv2Parser.OP_MINUS_RANGLE)
                        self.state = 2649
                        self.ruleReferenceTyping()
                        self.state = 2653
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [129, 135]:
                            self.state = 2650
                            self.ruleExpressionBodyMember()
                            pass
                        elif token in [171, 172]:
                            self.state = 2651
                            self.ruleFunctionReferenceMember()
                            pass
                        elif token in [133]:
                            self.state = 2652
                            self.ruleArgumentList()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [150]:
                        self.state = 2655
                        self.match(SysMLv2Parser.OP_DOT)
                        self.state = 2656
                        self.ruleExpressionBodyMember()
                        pass
                    elif token in [152]:
                        self.state = 2657
                        self.match(SysMLv2Parser.OP_DOT_QMARK)
                        self.state = 2658
                        self.ruleExpressionBodyMember()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExpressionParameterMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExpressionParameterMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExpressionParameterMember" ):
                listener.enterRuleExpressionParameterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExpressionParameterMember" ):
                listener.exitRuleExpressionParameterMember(self)




    def ruleExpressionParameterMember(self):

        localctx = SysMLv2Parser.RuleExpressionParameterMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_ruleExpressionParameterMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2666
            self.ruleOwnedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleIfNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleActionNodePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodePrefixContext,0)


        def K_IF(self):
            return self.getToken(SysMLv2Parser.K_IF, 0)

        def ruleExpressionParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExpressionParameterMemberContext,0)


        def ruleActionBodyParameterMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleActionBodyParameterMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyParameterMemberContext,i)


        def K_ELSE(self):
            return self.getToken(SysMLv2Parser.K_ELSE, 0)

        def ruleIfNodeParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIfNodeParameterMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleIfNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleIfNode" ):
                listener.enterRuleIfNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleIfNode" ):
                listener.exitRuleIfNode(self)




    def ruleIfNode(self):

        localctx = SysMLv2Parser.RuleIfNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_ruleIfNode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2668
            self.ruleActionNodePrefix()
            self.state = 2669
            self.match(SysMLv2Parser.K_IF)
            self.state = 2670
            self.ruleExpressionParameterMember()
            self.state = 2671
            self.ruleActionBodyParameterMember()
            self.state = 2677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 2672
                self.match(SysMLv2Parser.K_ELSE)
                self.state = 2675
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 2673
                    self.ruleActionBodyParameterMember()
                    pass

                elif la_ == 2:
                    self.state = 2674
                    self.ruleIfNodeParameterMember()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionBodyParameterMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleActionBodyParameter(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyParameterContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionBodyParameterMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyParameterMember" ):
                listener.enterRuleActionBodyParameterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyParameterMember" ):
                listener.exitRuleActionBodyParameterMember(self)




    def ruleActionBodyParameterMember(self):

        localctx = SysMLv2Parser.RuleActionBodyParameterMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_ruleActionBodyParameterMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            self.ruleActionBodyParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionBodyParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)

        def ruleActionUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageKeywordContext,0)


        def ruleActionBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleActionBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyItemContext,i)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionBodyParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionBodyParameter" ):
                listener.enterRuleActionBodyParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionBodyParameter" ):
                listener.exitRuleActionBodyParameter(self)




    def ruleActionBodyParameter(self):

        localctx = SysMLv2Parser.RuleActionBodyParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_ruleActionBodyParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 2681
                self.ruleActionUsageKeyword()
                self.state = 2683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2682
                    self.ruleUsageDeclaration()




            self.state = 2687
            self.match(SysMLv2Parser.LBRACE)
            self.state = 2691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1143914270845302738) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8651413374734032969) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 6047313967329) != 0):
                self.state = 2688
                self.ruleActionBodyItem()
                self.state = 2693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2694
            self.match(SysMLv2Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleIfNodeParameterMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleIfNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleIfNodeContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleIfNodeParameterMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleIfNodeParameterMember" ):
                listener.enterRuleIfNodeParameterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleIfNodeParameterMember" ):
                listener.exitRuleIfNodeParameterMember(self)




    def ruleIfNodeParameterMember(self):

        localctx = SysMLv2Parser.RuleIfNodeParameterMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_ruleIfNodeParameterMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.ruleIfNode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleWhileLoopNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleActionNodePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodePrefixContext,0)


        def ruleActionBodyParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyParameterMemberContext,0)


        def K_WHILE(self):
            return self.getToken(SysMLv2Parser.K_WHILE, 0)

        def ruleExpressionParameterMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleExpressionParameterMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleExpressionParameterMemberContext,i)


        def K_LOOP(self):
            return self.getToken(SysMLv2Parser.K_LOOP, 0)

        def ruleEmptyParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyParameterMemberContext,0)


        def K_UNTIL(self):
            return self.getToken(SysMLv2Parser.K_UNTIL, 0)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleWhileLoopNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleWhileLoopNode" ):
                listener.enterRuleWhileLoopNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleWhileLoopNode" ):
                listener.exitRuleWhileLoopNode(self)




    def ruleWhileLoopNode(self):

        localctx = SysMLv2Parser.RuleWhileLoopNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_ruleWhileLoopNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2698
            self.ruleActionNodePrefix()
            self.state = 2703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.state = 2699
                self.match(SysMLv2Parser.K_WHILE)
                self.state = 2700
                self.ruleExpressionParameterMember()
                pass
            elif token in [69]:
                self.state = 2701
                self.match(SysMLv2Parser.K_LOOP)
                self.state = 2702
                self.ruleEmptyParameterMember()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2705
            self.ruleActionBodyParameterMember()
            self.state = 2710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 2706
                self.match(SysMLv2Parser.K_UNTIL)
                self.state = 2707
                self.ruleExpressionParameterMember()
                self.state = 2708
                self.match(SysMLv2Parser.OP_SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleForLoopNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleActionNodePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodePrefixContext,0)


        def K_FOR(self):
            return self.getToken(SysMLv2Parser.K_FOR, 0)

        def ruleForVariableDeclarationMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleForVariableDeclarationMemberContext,0)


        def K_IN(self):
            return self.getToken(SysMLv2Parser.K_IN, 0)

        def ruleNodeParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNodeParameterMemberContext,0)


        def ruleActionBodyParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyParameterMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleForLoopNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleForLoopNode" ):
                listener.enterRuleForLoopNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleForLoopNode" ):
                listener.exitRuleForLoopNode(self)




    def ruleForLoopNode(self):

        localctx = SysMLv2Parser.RuleForLoopNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_ruleForLoopNode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2712
            self.ruleActionNodePrefix()
            self.state = 2713
            self.match(SysMLv2Parser.K_FOR)
            self.state = 2714
            self.ruleForVariableDeclarationMember()
            self.state = 2715
            self.match(SysMLv2Parser.K_IN)
            self.state = 2716
            self.ruleNodeParameterMember()
            self.state = 2717
            self.ruleActionBodyParameterMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleForVariableDeclarationMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleForVariableDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleForVariableDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleForVariableDeclarationMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleForVariableDeclarationMember" ):
                listener.enterRuleForVariableDeclarationMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleForVariableDeclarationMember" ):
                listener.exitRuleForVariableDeclarationMember(self)




    def ruleForVariableDeclarationMember(self):

        localctx = SysMLv2Parser.RuleForVariableDeclarationMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_ruleForVariableDeclarationMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            self.ruleForVariableDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleForVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleForVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleForVariableDeclaration" ):
                listener.enterRuleForVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleForVariableDeclaration" ):
                listener.exitRuleForVariableDeclaration(self)




    def ruleForVariableDeclaration(self):

        localctx = SysMLv2Parser.RuleForVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_ruleForVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2721
            self.ruleUsageDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleControlNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleControlNode

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleControlNode2Context(RuleControlNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleControlNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDecisionNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDecisionNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleControlNode2" ):
                listener.enterRuleControlNode2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleControlNode2" ):
                listener.exitRuleControlNode2(self)


    class RuleControlNode1Context(RuleControlNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleControlNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMergeNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMergeNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleControlNode1" ):
                listener.enterRuleControlNode1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleControlNode1" ):
                listener.exitRuleControlNode1(self)


    class RuleControlNode4Context(RuleControlNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleControlNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleForkNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleForkNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleControlNode4" ):
                listener.enterRuleControlNode4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleControlNode4" ):
                listener.exitRuleControlNode4(self)


    class RuleControlNode3Context(RuleControlNodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleControlNodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleJoinNode(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleJoinNodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleControlNode3" ):
                listener.enterRuleControlNode3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleControlNode3" ):
                listener.exitRuleControlNode3(self)



    def ruleControlNode(self):

        localctx = SysMLv2Parser.RuleControlNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_ruleControlNode)
        try:
            self.state = 2727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleControlNode1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2723
                self.ruleMergeNode()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleControlNode2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2724
                self.ruleDecisionNode()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleControlNode3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2725
                self.ruleJoinNode()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleControlNode4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2726
                self.ruleForkNode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleControlNodePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRefPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRefPrefixContext,0)


        def K_INDIVIDUAL(self):
            return self.getToken(SysMLv2Parser.K_INDIVIDUAL, 0)

        def rulePortionKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePortionKindContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleControlNodePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleControlNodePrefix" ):
                listener.enterRuleControlNodePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleControlNodePrefix" ):
                listener.exitRuleControlNodePrefix(self)




    def ruleControlNodePrefix(self):

        localctx = SysMLv2Parser.RuleControlNodePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_ruleControlNodePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2729
            self.ruleRefPrefix()
            self.state = 2731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 2730
                self.match(SysMLv2Parser.K_INDIVIDUAL)


            self.state = 2734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121 or _la==122:
                self.state = 2733
                self.rulePortionKind()


            self.state = 2739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2736
                self.ruleUsageExtensionKeyword()
                self.state = 2741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMergeNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleControlNodePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleControlNodePrefixContext,0)


        def K_MERGE(self):
            return self.getToken(SysMLv2Parser.K_MERGE, 0)

        def ruleActionNodeBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeBodyContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMergeNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMergeNode" ):
                listener.enterRuleMergeNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMergeNode" ):
                listener.exitRuleMergeNode(self)




    def ruleMergeNode(self):

        localctx = SysMLv2Parser.RuleMergeNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_ruleMergeNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2742
            self.ruleControlNodePrefix()
            self.state = 2743
            self.match(SysMLv2Parser.K_MERGE)
            self.state = 2745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                self.state = 2744
                self.ruleUsageDeclaration()


            self.state = 2747
            self.ruleActionNodeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDecisionNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleControlNodePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleControlNodePrefixContext,0)


        def K_DECIDE(self):
            return self.getToken(SysMLv2Parser.K_DECIDE, 0)

        def ruleActionNodeBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeBodyContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDecisionNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDecisionNode" ):
                listener.enterRuleDecisionNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDecisionNode" ):
                listener.exitRuleDecisionNode(self)




    def ruleDecisionNode(self):

        localctx = SysMLv2Parser.RuleDecisionNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_ruleDecisionNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2749
            self.ruleControlNodePrefix()
            self.state = 2750
            self.match(SysMLv2Parser.K_DECIDE)
            self.state = 2752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                self.state = 2751
                self.ruleUsageDeclaration()


            self.state = 2754
            self.ruleActionNodeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleJoinNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleControlNodePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleControlNodePrefixContext,0)


        def K_JOIN(self):
            return self.getToken(SysMLv2Parser.K_JOIN, 0)

        def ruleActionNodeBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeBodyContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleJoinNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleJoinNode" ):
                listener.enterRuleJoinNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleJoinNode" ):
                listener.exitRuleJoinNode(self)




    def ruleJoinNode(self):

        localctx = SysMLv2Parser.RuleJoinNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_ruleJoinNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756
            self.ruleControlNodePrefix()
            self.state = 2757
            self.match(SysMLv2Parser.K_JOIN)
            self.state = 2759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                self.state = 2758
                self.ruleUsageDeclaration()


            self.state = 2761
            self.ruleActionNodeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleForkNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleControlNodePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleControlNodePrefixContext,0)


        def K_FORK(self):
            return self.getToken(SysMLv2Parser.K_FORK, 0)

        def ruleActionNodeBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionNodeBodyContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleForkNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleForkNode" ):
                listener.enterRuleForkNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleForkNode" ):
                listener.exitRuleForkNode(self)




    def ruleForkNode(self):

        localctx = SysMLv2Parser.RuleForkNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_ruleForkNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2763
            self.ruleControlNodePrefix()
            self.state = 2764
            self.match(SysMLv2Parser.K_FORK)
            self.state = 2766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                self.state = 2765
                self.ruleUsageDeclaration()


            self.state = 2768
            self.ruleActionNodeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionNodeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionNodeBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleActionNodeBody1Context(RuleActionNodeBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionNodeBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNodeBody1" ):
                listener.enterRuleActionNodeBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNodeBody1" ):
                listener.exitRuleActionNodeBody1(self)


    class RuleActionNodeBody2Context(RuleActionNodeBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleActionNodeBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleAnnotatingMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAnnotatingMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAnnotatingMemberContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionNodeBody2" ):
                listener.enterRuleActionNodeBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionNodeBody2" ):
                listener.exitRuleActionNodeBody2(self)



    def ruleActionNodeBody(self):

        localctx = SysMLv2Parser.RuleActionNodeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_ruleActionNodeBody)
        self._la = 0 # Token type
        try:
            self.state = 2779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleActionNodeBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2770
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleActionNodeBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2771
                self.match(SysMLv2Parser.LBRACE)
                self.state = 2775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2000) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 137438953475) != 0):
                    self.state = 2772
                    self.ruleAnnotatingMember()
                    self.state = 2777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2778
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptyParameterMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptyUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptyParameterMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptyParameterMember" ):
                listener.enterRuleEmptyParameterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptyParameterMember" ):
                listener.exitRuleEmptyParameterMember(self)




    def ruleEmptyParameterMember(self):

        localctx = SysMLv2Parser.RuleEmptyParameterMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_ruleEmptyParameterMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2781
            self.ruleEmptyUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptyUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptyUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptyUsage" ):
                listener.enterRuleEmptyUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptyUsage" ):
                listener.exitRuleEmptyUsage(self)




    def ruleEmptyUsage(self):

        localctx = SysMLv2Parser.RuleEmptyUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_ruleEmptyUsage)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActionTargetSuccessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageBodyContext,0)


        def ruleTargetSuccession(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTargetSuccessionContext,0)


        def ruleGuardedTargetSuccession(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleGuardedTargetSuccessionContext,0)


        def ruleDefaultTargetSuccession(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefaultTargetSuccessionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActionTargetSuccession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActionTargetSuccession" ):
                listener.enterRuleActionTargetSuccession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActionTargetSuccession" ):
                listener.exitRuleActionTargetSuccession(self)




    def ruleActionTargetSuccession(self):

        localctx = SysMLv2Parser.RuleActionTargetSuccessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_ruleActionTargetSuccession)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.state = 2785
                self.ruleTargetSuccession()
                pass
            elif token in [66]:
                self.state = 2786
                self.ruleGuardedTargetSuccession()
                pass
            elif token in [67]:
                self.state = 2787
                self.ruleDefaultTargetSuccession()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2790
            self.ruleUsageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetSuccessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_THEN(self):
            return self.getToken(SysMLv2Parser.K_THEN, 0)

        def ruleMultiplicitySourceEndMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicitySourceEndMemberContext,0)


        def ruleConnectorEndMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorEndMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetSuccession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetSuccession" ):
                listener.enterRuleTargetSuccession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetSuccession" ):
                listener.exitRuleTargetSuccession(self)




    def ruleTargetSuccession(self):

        localctx = SysMLv2Parser.RuleTargetSuccessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_ruleTargetSuccession)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2792
            self.match(SysMLv2Parser.K_THEN)
            self.state = 2793
            self.ruleMultiplicitySourceEndMember()
            self.state = 2794
            self.ruleConnectorEndMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleGuardedTargetSuccessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptyParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyParameterMemberContext,0)


        def ruleGuardExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleGuardExpressionMemberContext,0)


        def K_THEN(self):
            return self.getToken(SysMLv2Parser.K_THEN, 0)

        def ruleTransitionSuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionSuccessionMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleGuardedTargetSuccession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleGuardedTargetSuccession" ):
                listener.enterRuleGuardedTargetSuccession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleGuardedTargetSuccession" ):
                listener.exitRuleGuardedTargetSuccession(self)




    def ruleGuardedTargetSuccession(self):

        localctx = SysMLv2Parser.RuleGuardedTargetSuccessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_ruleGuardedTargetSuccession)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2796
            self.ruleEmptyParameterMember()
            self.state = 2797
            self.ruleGuardExpressionMember()
            self.state = 2798
            self.match(SysMLv2Parser.K_THEN)
            self.state = 2799
            self.ruleTransitionSuccessionMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefaultTargetSuccessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptyParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyParameterMemberContext,0)


        def K_ELSE(self):
            return self.getToken(SysMLv2Parser.K_ELSE, 0)

        def ruleTransitionSuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionSuccessionMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDefaultTargetSuccession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDefaultTargetSuccession" ):
                listener.enterRuleDefaultTargetSuccession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDefaultTargetSuccession" ):
                listener.exitRuleDefaultTargetSuccession(self)




    def ruleDefaultTargetSuccession(self):

        localctx = SysMLv2Parser.RuleDefaultTargetSuccessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_ruleDefaultTargetSuccession)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            self.ruleEmptyParameterMember()
            self.state = 2802
            self.match(SysMLv2Parser.K_ELSE)
            self.state = 2803
            self.ruleTransitionSuccessionMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleGuardedSuccessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_FIRST(self):
            return self.getToken(SysMLv2Parser.K_FIRST, 0)

        def ruleTransitionSourceMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionSourceMemberContext,0)


        def ruleEmptyParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyParameterMemberContext,0)


        def ruleGuardExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleGuardExpressionMemberContext,0)


        def K_THEN(self):
            return self.getToken(SysMLv2Parser.K_THEN, 0)

        def ruleTransitionSuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionSuccessionMemberContext,0)


        def ruleUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageBodyContext,0)


        def ruleSuccessionKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSuccessionKeywordContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleGuardedSuccession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleGuardedSuccession" ):
                listener.enterRuleGuardedSuccession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleGuardedSuccession" ):
                listener.exitRuleGuardedSuccession(self)




    def ruleGuardedSuccession(self):

        localctx = SysMLv2Parser.RuleGuardedSuccessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_ruleGuardedSuccession)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 2805
                self.ruleSuccessionKeyword()
                self.state = 2806
                self.ruleUsageDeclaration()


            self.state = 2810
            self.match(SysMLv2Parser.K_FIRST)
            self.state = 2811
            self.ruleTransitionSourceMember()
            self.state = 2812
            self.ruleEmptyParameterMember()
            self.state = 2813
            self.ruleGuardExpressionMember()
            self.state = 2814
            self.match(SysMLv2Parser.K_THEN)
            self.state = 2815
            self.ruleTransitionSuccessionMember()
            self.state = 2816
            self.ruleUsageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_STATE(self):
            return self.getToken(SysMLv2Parser.K_STATE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateKeyword" ):
                listener.enterRuleStateKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateKeyword" ):
                listener.exitRuleStateKeyword(self)




    def ruleStateKeyword(self):

        localctx = SysMLv2Parser.RuleStateKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_ruleStateKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2818
            self.match(SysMLv2Parser.K_STATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleStateKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateDefKeyword" ):
                listener.enterRuleStateDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateDefKeyword" ):
                listener.exitRuleStateDefKeyword(self)




    def ruleStateDefKeyword(self):

        localctx = SysMLv2Parser.RuleStateDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_ruleStateDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2820
            self.ruleStateKeyword()
            self.state = 2821
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleStateDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleStateDefBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateDefBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateDefinition" ):
                listener.enterRuleStateDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateDefinition" ):
                listener.exitRuleStateDefinition(self)




    def ruleStateDefinition(self):

        localctx = SysMLv2Parser.RuleStateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_ruleStateDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2823
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 2824
            self.ruleStateDefKeyword()
            self.state = 2825
            self.ruleDefinitionDeclaration()
            self.state = 2826
            self.ruleStateDefBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateDefBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateDefBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleStateDefBody2Context(RuleStateDefBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateDefBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def ruleStateBodyPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateBodyPartContext,0)

        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def K_PARALLEL(self):
            return self.getToken(SysMLv2Parser.K_PARALLEL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateDefBody2" ):
                listener.enterRuleStateDefBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateDefBody2" ):
                listener.exitRuleStateDefBody2(self)


    class RuleStateDefBody1Context(RuleStateDefBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateDefBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateDefBody1" ):
                listener.enterRuleStateDefBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateDefBody1" ):
                listener.exitRuleStateDefBody1(self)



    def ruleStateDefBody(self):

        localctx = SysMLv2Parser.RuleStateDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_ruleStateDefBody)
        self._la = 0 # Token type
        try:
            self.state = 2836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleStateDefBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2828
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [77, 129]:
                localctx = SysMLv2Parser.RuleStateDefBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 2829
                    self.match(SysMLv2Parser.K_PARALLEL)


                self.state = 2832
                self.match(SysMLv2Parser.LBRACE)
                self.state = 2833
                self.ruleStateBodyPart()
                self.state = 2834
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateBodyPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleStateBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleStateBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleStateBodyItemContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateBodyPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyPart" ):
                listener.enterRuleStateBodyPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyPart" ):
                listener.exitRuleStateBodyPart(self)




    def ruleStateBodyPart(self):

        localctx = SysMLv2Parser.RuleStateBodyPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_ruleStateBodyPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453518540830674) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2382369030299443105) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 188978561479) != 0):
                self.state = 2838
                self.ruleStateBodyItem()
                self.state = 2843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateBodyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateBodyItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleStateBodyItem11Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleExitActionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExitActionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem11" ):
                listener.enterRuleStateBodyItem11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem11" ):
                listener.exitRuleStateBodyItem11(self)


    class RuleStateBodyItem10Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDoActionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDoActionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem10" ):
                listener.enterRuleStateBodyItem10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem10" ):
                listener.exitRuleStateBodyItem10(self)


    class RuleStateBodyItem1Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleImport(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem1" ):
                listener.enterRuleStateBodyItem1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem1" ):
                listener.exitRuleStateBodyItem1(self)


    class RuleStateBodyItem2Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAliasMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAliasMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem2" ):
                listener.enterRuleStateBodyItem2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem2" ):
                listener.exitRuleStateBodyItem2(self)


    class RuleStateBodyItem3Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDefinitionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem3" ):
                listener.enterRuleStateBodyItem3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem3" ):
                listener.exitRuleStateBodyItem3(self)


    class RuleStateBodyItem4Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleVariantUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVariantUsageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem4" ):
                listener.enterRuleStateBodyItem4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem4" ):
                listener.exitRuleStateBodyItem4(self)


    class RuleStateBodyItem5Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleNonOccurrenceUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNonOccurrenceUsageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem5" ):
                listener.enterRuleStateBodyItem5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem5" ):
                listener.exitRuleStateBodyItem5(self)


    class RuleStateBodyItem6Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleStructureUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStructureUsageMemberContext,0)

        def ruleEmptySuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptySuccessionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem6" ):
                listener.enterRuleStateBodyItem6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem6" ):
                listener.exitRuleStateBodyItem6(self)


    class RuleStateBodyItem7Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBehaviorUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBehaviorUsageMemberContext,0)

        def ruleEmptySuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptySuccessionMemberContext,0)

        def ruleTargetTransitionUsageMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleTargetTransitionUsageMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleTargetTransitionUsageMemberContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem7" ):
                listener.enterRuleStateBodyItem7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem7" ):
                listener.exitRuleStateBodyItem7(self)


    class RuleStateBodyItem8Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleTransitionUsageMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionUsageMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem8" ):
                listener.enterRuleStateBodyItem8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem8" ):
                listener.exitRuleStateBodyItem8(self)


    class RuleStateBodyItem9Context(RuleStateBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleEntryActionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEntryActionMemberContext,0)

        def ruleEntryTransitionMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleEntryTransitionMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleEntryTransitionMemberContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateBodyItem9" ):
                listener.enterRuleStateBodyItem9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateBodyItem9" ):
                listener.exitRuleStateBodyItem9(self)



    def ruleStateBodyItem(self):

        localctx = SysMLv2Parser.RuleStateBodyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_ruleStateBodyItem)
        self._la = 0 # Token type
        try:
            self.state = 2873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleStateBodyItem1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2844
                self.ruleImport()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleStateBodyItem2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2845
                self.ruleAliasMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleStateBodyItem3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2846
                self.ruleDefinitionMember()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleStateBodyItem4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2847
                self.ruleVariantUsageMember()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleStateBodyItem5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2848
                self.ruleNonOccurrenceUsageMember()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleStateBodyItem6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 2849
                    self.ruleEmptySuccessionMember()


                self.state = 2852
                self.ruleStructureUsageMember()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleStateBodyItem7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 2853
                    self.ruleEmptySuccessionMember()


                self.state = 2856
                self.ruleBehaviorUsageMember()
                self.state = 2860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2857
                        self.ruleTargetTransitionUsageMember() 
                    self.state = 2862
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                pass

            elif la_ == 8:
                localctx = SysMLv2Parser.RuleStateBodyItem8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2863
                self.ruleTransitionUsageMember()
                pass

            elif la_ == 9:
                localctx = SysMLv2Parser.RuleStateBodyItem9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2864
                self.ruleEntryActionMember()
                self.state = 2868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2865
                        self.ruleEntryTransitionMember() 
                    self.state = 2870
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

                pass

            elif la_ == 10:
                localctx = SysMLv2Parser.RuleStateBodyItem10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2871
                self.ruleDoActionMember()
                pass

            elif la_ == 11:
                localctx = SysMLv2Parser.RuleStateBodyItem11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2872
                self.ruleExitActionMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEntryActionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleEntryActionKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEntryActionKindContext,0)


        def ruleStateActionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateActionUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEntryActionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEntryActionMember" ):
                listener.enterRuleEntryActionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEntryActionMember" ):
                listener.exitRuleEntryActionMember(self)




    def ruleEntryActionMember(self):

        localctx = SysMLv2Parser.RuleEntryActionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_ruleEntryActionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2875
            self.ruleMemberPrefix()
            self.state = 2876
            self.ruleEntryActionKind()
            self.state = 2877
            self.ruleStateActionUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEntryActionKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ENTRY(self):
            return self.getToken(SysMLv2Parser.K_ENTRY, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEntryActionKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEntryActionKind" ):
                listener.enterRuleEntryActionKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEntryActionKind" ):
                listener.exitRuleEntryActionKind(self)




    def ruleEntryActionKind(self):

        localctx = SysMLv2Parser.RuleEntryActionKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_ruleEntryActionKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2879
            self.match(SysMLv2Parser.K_ENTRY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDoActionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleDoActionKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDoActionKindContext,0)


        def ruleStateActionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateActionUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDoActionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDoActionMember" ):
                listener.enterRuleDoActionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDoActionMember" ):
                listener.exitRuleDoActionMember(self)




    def ruleDoActionMember(self):

        localctx = SysMLv2Parser.RuleDoActionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_ruleDoActionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2881
            self.ruleMemberPrefix()
            self.state = 2882
            self.ruleDoActionKind()
            self.state = 2883
            self.ruleStateActionUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDoActionKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DO(self):
            return self.getToken(SysMLv2Parser.K_DO, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleDoActionKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDoActionKind" ):
                listener.enterRuleDoActionKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDoActionKind" ):
                listener.exitRuleDoActionKind(self)




    def ruleDoActionKind(self):

        localctx = SysMLv2Parser.RuleDoActionKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_ruleDoActionKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2885
            self.match(SysMLv2Parser.K_DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExitActionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleExitActionKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExitActionKindContext,0)


        def ruleStateActionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateActionUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExitActionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExitActionMember" ):
                listener.enterRuleExitActionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExitActionMember" ):
                listener.exitRuleExitActionMember(self)




    def ruleExitActionMember(self):

        localctx = SysMLv2Parser.RuleExitActionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_ruleExitActionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2887
            self.ruleMemberPrefix()
            self.state = 2888
            self.ruleExitActionKind()
            self.state = 2889
            self.ruleStateActionUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExitActionKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_EXIT(self):
            return self.getToken(SysMLv2Parser.K_EXIT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExitActionKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExitActionKind" ):
                listener.enterRuleExitActionKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExitActionKind" ):
                listener.exitRuleExitActionKind(self)




    def ruleExitActionKind(self):

        localctx = SysMLv2Parser.RuleExitActionKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_ruleExitActionKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2891
            self.match(SysMLv2Parser.K_EXIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEntryTransitionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def ruleGuardedTargetSuccession(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleGuardedTargetSuccessionContext,0)


        def K_THEN(self):
            return self.getToken(SysMLv2Parser.K_THEN, 0)

        def ruleTransitionSuccession(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionSuccessionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEntryTransitionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEntryTransitionMember" ):
                listener.enterRuleEntryTransitionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEntryTransitionMember" ):
                listener.exitRuleEntryTransitionMember(self)




    def ruleEntryTransitionMember(self):

        localctx = SysMLv2Parser.RuleEntryTransitionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_ruleEntryTransitionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2893
            self.ruleMemberPrefix()
            self.state = 2897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.state = 2894
                self.ruleGuardedTargetSuccession()
                pass
            elif token in [41]:
                self.state = 2895
                self.match(SysMLv2Parser.K_THEN)
                self.state = 2896
                self.ruleTransitionSuccession()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2899
            self.match(SysMLv2Parser.OP_SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateActionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateActionUsage

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleStateActionUsage2Context(RuleStateActionUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateActionUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePerformedActionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePerformedActionUsageContext,0)

        def ruleActionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateActionUsage2" ):
                listener.enterRuleStateActionUsage2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateActionUsage2" ):
                listener.exitRuleStateActionUsage2(self)


    class RuleStateActionUsage1Context(RuleStateActionUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateActionUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleEmptyActionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyActionUsageContext,0)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateActionUsage1" ):
                listener.enterRuleStateActionUsage1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateActionUsage1" ):
                listener.exitRuleStateActionUsage1(self)



    def ruleStateActionUsage(self):

        localctx = SysMLv2Parser.RuleStateActionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_ruleStateActionUsage)
        try:
            self.state = 2907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleStateActionUsage1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2901
                self.ruleEmptyActionUsage()
                self.state = 2902
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [57, 59, 64, 65, 171, 172]:
                localctx = SysMLv2Parser.RuleStateActionUsage2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2904
                self.rulePerformedActionUsage()
                self.state = 2905
                self.ruleActionBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptyActionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptyActionUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptyActionUsage" ):
                listener.enterRuleEmptyActionUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptyActionUsage" ):
                listener.exitRuleEmptyActionUsage(self)




    def ruleEmptyActionUsage(self):

        localctx = SysMLv2Parser.RuleEmptyActionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_ruleEmptyActionUsage)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePerformedActionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePerformedActionUsage

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RulePerformedActionUsage1Context(RulePerformedActionUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePerformedActionUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePerformActionUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePerformActionUsageDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePerformedActionUsage1" ):
                listener.enterRulePerformedActionUsage1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePerformedActionUsage1" ):
                listener.exitRulePerformedActionUsage1(self)


    class RulePerformedActionUsage2Context(RulePerformedActionUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePerformedActionUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAcceptNodeDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAcceptNodeDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePerformedActionUsage2" ):
                listener.enterRulePerformedActionUsage2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePerformedActionUsage2" ):
                listener.exitRulePerformedActionUsage2(self)


    class RulePerformedActionUsage3Context(RulePerformedActionUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePerformedActionUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSendNodeDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSendNodeDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePerformedActionUsage3" ):
                listener.enterRulePerformedActionUsage3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePerformedActionUsage3" ):
                listener.exitRulePerformedActionUsage3(self)


    class RulePerformedActionUsage4Context(RulePerformedActionUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePerformedActionUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleAssignmentNodeDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAssignmentNodeDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePerformedActionUsage4" ):
                listener.enterRulePerformedActionUsage4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePerformedActionUsage4" ):
                listener.exitRulePerformedActionUsage4(self)



    def rulePerformedActionUsage(self):

        localctx = SysMLv2Parser.RulePerformedActionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_rulePerformedActionUsage)
        try:
            self.state = 2915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RulePerformedActionUsage1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2911
                self.rulePerformActionUsageDeclaration()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RulePerformedActionUsage2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2912
                self.ruleAcceptNodeDeclaration()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RulePerformedActionUsage3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2913
                self.ruleSendNodeDeclaration()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RulePerformedActionUsage4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2914
                self.ruleAssignmentNodeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTransitionUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleTransitionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTransitionUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTransitionUsageMember" ):
                listener.enterRuleTransitionUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTransitionUsageMember" ):
                listener.exitRuleTransitionUsageMember(self)




    def ruleTransitionUsageMember(self):

        localctx = SysMLv2Parser.RuleTransitionUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_ruleTransitionUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2917
            self.ruleMemberPrefix()
            self.state = 2918
            self.ruleTransitionUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetTransitionUsageMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleTargetTransitionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTargetTransitionUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetTransitionUsageMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetTransitionUsageMember" ):
                listener.enterRuleTargetTransitionUsageMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetTransitionUsageMember" ):
                listener.exitRuleTargetTransitionUsageMember(self)




    def ruleTargetTransitionUsageMember(self):

        localctx = SysMLv2Parser.RuleTargetTransitionUsageMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_ruleTargetTransitionUsageMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2920
            self.ruleMemberPrefix()
            self.state = 2921
            self.ruleTargetTransitionUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleStateKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateUsageKeyword" ):
                listener.enterRuleStateUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateUsageKeyword" ):
                listener.exitRuleStateUsageKeyword(self)




    def ruleStateUsageKeyword(self):

        localctx = SysMLv2Parser.RuleStateUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_ruleStateUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2923
            self.ruleStateKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleStateUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateUsageKeywordContext,0)


        def ruleActionUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageDeclarationContext,0)


        def ruleStateUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateUsageBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateUsage" ):
                listener.enterRuleStateUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateUsage" ):
                listener.exitRuleStateUsage(self)




    def ruleStateUsage(self):

        localctx = SysMLv2Parser.RuleStateUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_ruleStateUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2925
            self.ruleOccurrenceUsagePrefix()
            self.state = 2926
            self.ruleStateUsageKeyword()
            self.state = 2927
            self.ruleActionUsageDeclaration()
            self.state = 2928
            self.ruleStateUsageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStateUsageBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStateUsageBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleStateUsageBody2Context(RuleStateUsageBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateUsageBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def ruleStateBodyPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateBodyPartContext,0)

        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def K_PARALLEL(self):
            return self.getToken(SysMLv2Parser.K_PARALLEL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateUsageBody2" ):
                listener.enterRuleStateUsageBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateUsageBody2" ):
                listener.exitRuleStateUsageBody2(self)


    class RuleStateUsageBody1Context(RuleStateUsageBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleStateUsageBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStateUsageBody1" ):
                listener.enterRuleStateUsageBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStateUsageBody1" ):
                listener.exitRuleStateUsageBody1(self)



    def ruleStateUsageBody(self):

        localctx = SysMLv2Parser.RuleStateUsageBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_ruleStateUsageBody)
        self._la = 0 # Token type
        try:
            self.state = 2938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleStateUsageBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2930
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [77, 129]:
                localctx = SysMLv2Parser.RuleStateUsageBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 2931
                    self.match(SysMLv2Parser.K_PARALLEL)


                self.state = 2934
                self.match(SysMLv2Parser.LBRACE)
                self.state = 2935
                self.ruleStateBodyPart()
                self.state = 2936
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExhibitStateUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def K_EXHIBIT(self):
            return self.getToken(SysMLv2Parser.K_EXHIBIT, 0)

        def ruleStateUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateUsageBodyContext,0)


        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def ruleStateUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStateUsageKeywordContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def ruleFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationPartContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExhibitStateUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExhibitStateUsage" ):
                listener.enterRuleExhibitStateUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExhibitStateUsage" ):
                listener.exitRuleExhibitStateUsage(self)




    def ruleExhibitStateUsage(self):

        localctx = SysMLv2Parser.RuleExhibitStateUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_ruleExhibitStateUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2940
            self.ruleOccurrenceUsagePrefix()
            self.state = 2941
            self.match(SysMLv2Parser.K_EXHIBIT)
            self.state = 2950
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                self.state = 2942
                self.ruleOwnedReferenceSubsetting()
                self.state = 2944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 14465) != 0):
                    self.state = 2943
                    self.ruleFeatureSpecializationPart()


                pass
            elif token in [76]:
                self.state = 2946
                self.ruleStateUsageKeyword()
                self.state = 2948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2947
                    self.ruleUsageDeclaration()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 2952
                self.ruleValuePart()


            self.state = 2955
            self.ruleStateUsageBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTransitionUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TRANSITION(self):
            return self.getToken(SysMLv2Parser.K_TRANSITION, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTransitionUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTransitionUsageKeyword" ):
                listener.enterRuleTransitionUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTransitionUsageKeyword" ):
                listener.exitRuleTransitionUsageKeyword(self)




    def ruleTransitionUsageKeyword(self):

        localctx = SysMLv2Parser.RuleTransitionUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_ruleTransitionUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2957
            self.match(SysMLv2Parser.K_TRANSITION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTransitionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTransitionUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionUsageKeywordContext,0)


        def ruleTransitionSourceMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionSourceMemberContext,0)


        def ruleEmptyParameterMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleEmptyParameterMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyParameterMemberContext,i)


        def K_THEN(self):
            return self.getToken(SysMLv2Parser.K_THEN, 0)

        def ruleTransitionSuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionSuccessionMemberContext,0)


        def ruleActionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyContext,0)


        def K_FIRST(self):
            return self.getToken(SysMLv2Parser.K_FIRST, 0)

        def ruleTriggerActionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTriggerActionMemberContext,0)


        def ruleGuardExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleGuardExpressionMemberContext,0)


        def ruleEffectBehaviorMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEffectBehaviorMemberContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTransitionUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTransitionUsage" ):
                listener.enterRuleTransitionUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTransitionUsage" ):
                listener.exitRuleTransitionUsage(self)




    def ruleTransitionUsage(self):

        localctx = SysMLv2Parser.RuleTransitionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_ruleTransitionUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2959
            self.ruleTransitionUsageKeyword()
            self.state = 2964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 2961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 2960
                    self.ruleUsageDeclaration()


                self.state = 2963
                self.match(SysMLv2Parser.K_FIRST)


            self.state = 2966
            self.ruleTransitionSourceMember()
            self.state = 2967
            self.ruleEmptyParameterMember()
            self.state = 2971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 2968
                self.ruleEmptyParameterMember()
                self.state = 2969
                self.ruleTriggerActionMember()


            self.state = 2974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 2973
                self.ruleGuardExpressionMember()


            self.state = 2977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 2976
                self.ruleEffectBehaviorMember()


            self.state = 2979
            self.match(SysMLv2Parser.K_THEN)
            self.state = 2980
            self.ruleTransitionSuccessionMember()
            self.state = 2981
            self.ruleActionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTargetTransitionUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptyParameterMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleEmptyParameterMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyParameterMemberContext,i)


        def K_THEN(self):
            return self.getToken(SysMLv2Parser.K_THEN, 0)

        def ruleTransitionSuccessionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionSuccessionMemberContext,0)


        def ruleActionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyContext,0)


        def ruleTransitionUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionUsageKeywordContext,0)


        def ruleTriggerActionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTriggerActionMemberContext,0)


        def ruleGuardExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleGuardExpressionMemberContext,0)


        def ruleEffectBehaviorMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEffectBehaviorMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTargetTransitionUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTargetTransitionUsage" ):
                listener.enterRuleTargetTransitionUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTargetTransitionUsage" ):
                listener.exitRuleTargetTransitionUsage(self)




    def ruleTargetTransitionUsage(self):

        localctx = SysMLv2Parser.RuleTargetTransitionUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_ruleTargetTransitionUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2983
            self.ruleEmptyParameterMember()
            self.state = 3008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.state = 2984
                self.ruleTransitionUsageKeyword()
                self.state = 2988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 2985
                    self.ruleEmptyParameterMember()
                    self.state = 2986
                    self.ruleTriggerActionMember()


                self.state = 2991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 2990
                    self.ruleGuardExpressionMember()


                self.state = 2994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 2993
                    self.ruleEffectBehaviorMember()


                pass
            elif token in [59]:
                self.state = 2996
                self.ruleEmptyParameterMember()
                self.state = 2997
                self.ruleTriggerActionMember()
                self.state = 2999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 2998
                    self.ruleGuardExpressionMember()


                self.state = 3002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 3001
                    self.ruleEffectBehaviorMember()


                pass
            elif token in [66]:
                self.state = 3004
                self.ruleGuardExpressionMember()
                self.state = 3006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 3005
                    self.ruleEffectBehaviorMember()


                pass
            elif token in [41]:
                pass
            else:
                pass
            self.state = 3010
            self.match(SysMLv2Parser.K_THEN)
            self.state = 3011
            self.ruleTransitionSuccessionMember()
            self.state = 3012
            self.ruleActionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTransitionSourceMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTransitionSourceMember

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleTransitionSourceMember1Context(RuleTransitionSourceMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleTransitionSourceMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTransitionSourceMember1" ):
                listener.enterRuleTransitionSourceMember1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTransitionSourceMember1" ):
                listener.exitRuleTransitionSourceMember1(self)


    class RuleTransitionSourceMember2Context(RuleTransitionSourceMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleTransitionSourceMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedFeatureChain(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTransitionSourceMember2" ):
                listener.enterRuleTransitionSourceMember2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTransitionSourceMember2" ):
                listener.exitRuleTransitionSourceMember2(self)



    def ruleTransitionSourceMember(self):

        localctx = SysMLv2Parser.RuleTransitionSourceMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_ruleTransitionSourceMember)
        try:
            self.state = 3016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleTransitionSourceMember1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3014
                self.ruleQualifiedName()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleTransitionSourceMember2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3015
                self.ruleOwnedFeatureChain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTriggerActionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTriggerFeatureKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTriggerFeatureKindContext,0)


        def ruleTriggerAction(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTriggerActionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTriggerActionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTriggerActionMember" ):
                listener.enterRuleTriggerActionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTriggerActionMember" ):
                listener.exitRuleTriggerActionMember(self)




    def ruleTriggerActionMember(self):

        localctx = SysMLv2Parser.RuleTriggerActionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_ruleTriggerActionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3018
            self.ruleTriggerFeatureKind()
            self.state = 3019
            self.ruleTriggerAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTriggerActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAcceptParameterPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAcceptParameterPartContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTriggerAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTriggerAction" ):
                listener.enterRuleTriggerAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTriggerAction" ):
                listener.exitRuleTriggerAction(self)




    def ruleTriggerAction(self):

        localctx = SysMLv2Parser.RuleTriggerActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_ruleTriggerAction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3021
            self.ruleAcceptParameterPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleGuardExpressionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleGuardFeatureKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleGuardFeatureKindContext,0)


        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleGuardExpressionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleGuardExpressionMember" ):
                listener.enterRuleGuardExpressionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleGuardExpressionMember" ):
                listener.exitRuleGuardExpressionMember(self)




    def ruleGuardExpressionMember(self):

        localctx = SysMLv2Parser.RuleGuardExpressionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_ruleGuardExpressionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3023
            self.ruleGuardFeatureKind()
            self.state = 3024
            self.ruleOwnedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEffectBehaviorMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEffectFeatureKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEffectFeatureKindContext,0)


        def ruleEffectBehaviorUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEffectBehaviorUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEffectBehaviorMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEffectBehaviorMember" ):
                listener.enterRuleEffectBehaviorMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEffectBehaviorMember" ):
                listener.exitRuleEffectBehaviorMember(self)




    def ruleEffectBehaviorMember(self):

        localctx = SysMLv2Parser.RuleEffectBehaviorMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_ruleEffectBehaviorMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3026
            self.ruleEffectFeatureKind()
            self.state = 3027
            self.ruleEffectBehaviorUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEffectBehaviorUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEffectBehaviorUsage

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleEffectBehaviorUsage2Context(RuleEffectBehaviorUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleEffectBehaviorUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePerformedActionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePerformedActionUsageContext,0)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleActionBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleActionBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyItemContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEffectBehaviorUsage2" ):
                listener.enterRuleEffectBehaviorUsage2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEffectBehaviorUsage2" ):
                listener.exitRuleEffectBehaviorUsage2(self)


    class RuleEffectBehaviorUsage1Context(RuleEffectBehaviorUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleEffectBehaviorUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleEmptyActionUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyActionUsageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEffectBehaviorUsage1" ):
                listener.enterRuleEffectBehaviorUsage1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEffectBehaviorUsage1" ):
                listener.exitRuleEffectBehaviorUsage1(self)



    def ruleEffectBehaviorUsage(self):

        localctx = SysMLv2Parser.RuleEffectBehaviorUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_ruleEffectBehaviorUsage)
        self._la = 0 # Token type
        try:
            self.state = 3041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                localctx = SysMLv2Parser.RuleEffectBehaviorUsage1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3029
                self.ruleEmptyActionUsage()
                pass
            elif token in [57, 59, 64, 65, 171, 172]:
                localctx = SysMLv2Parser.RuleEffectBehaviorUsage2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3030
                self.rulePerformedActionUsage()
                self.state = 3039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==129:
                    self.state = 3031
                    self.match(SysMLv2Parser.LBRACE)
                    self.state = 3035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1143914270845302738) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8651413374734032969) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 6047313967329) != 0):
                        self.state = 3032
                        self.ruleActionBodyItem()
                        self.state = 3037
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3038
                    self.match(SysMLv2Parser.RBRACE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTransitionSuccessionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTransitionSuccession(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTransitionSuccessionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTransitionSuccessionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTransitionSuccessionMember" ):
                listener.enterRuleTransitionSuccessionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTransitionSuccessionMember" ):
                listener.exitRuleTransitionSuccessionMember(self)




    def ruleTransitionSuccessionMember(self):

        localctx = SysMLv2Parser.RuleTransitionSuccessionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_ruleTransitionSuccessionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3043
            self.ruleTransitionSuccession()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTransitionSuccessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptySourceEndMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptySourceEndMemberContext,0)


        def ruleConnectorEndMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConnectorEndMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTransitionSuccession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTransitionSuccession" ):
                listener.enterRuleTransitionSuccession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTransitionSuccession" ):
                listener.exitRuleTransitionSuccession(self)




    def ruleTransitionSuccession(self):

        localctx = SysMLv2Parser.RuleTransitionSuccessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_ruleTransitionSuccession)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3045
            self.ruleEmptySourceEndMember()
            self.state = 3046
            self.ruleConnectorEndMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCalculationKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CALC(self):
            return self.getToken(SysMLv2Parser.K_CALC, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCalculationKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationKeyword" ):
                listener.enterRuleCalculationKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationKeyword" ):
                listener.exitRuleCalculationKeyword(self)




    def ruleCalculationKeyword(self):

        localctx = SysMLv2Parser.RuleCalculationKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_ruleCalculationKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3048
            self.match(SysMLv2Parser.K_CALC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCalculationDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleCalculationKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCalculationDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationDefKeyword" ):
                listener.enterRuleCalculationDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationDefKeyword" ):
                listener.exitRuleCalculationDefKeyword(self)




    def ruleCalculationDefKeyword(self):

        localctx = SysMLv2Parser.RuleCalculationDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_ruleCalculationDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3050
            self.ruleCalculationKeyword()
            self.state = 3051
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCalculationDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleCalculationDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleCalculationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCalculationDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationDefinition" ):
                listener.enterRuleCalculationDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationDefinition" ):
                listener.exitRuleCalculationDefinition(self)




    def ruleCalculationDefinition(self):

        localctx = SysMLv2Parser.RuleCalculationDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_ruleCalculationDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3053
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3054
            self.ruleCalculationDefKeyword()
            self.state = 3055
            self.ruleDefinitionDeclaration()
            self.state = 3056
            self.ruleCalculationBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCalculationBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCalculationBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleCalculationBody2Context(RuleCalculationBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCalculationBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def ruleCalculationBodyPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyPartContext,0)

        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationBody2" ):
                listener.enterRuleCalculationBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationBody2" ):
                listener.exitRuleCalculationBody2(self)


    class RuleCalculationBody1Context(RuleCalculationBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCalculationBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationBody1" ):
                listener.enterRuleCalculationBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationBody1" ):
                listener.exitRuleCalculationBody1(self)



    def ruleCalculationBody(self):

        localctx = SysMLv2Parser.RuleCalculationBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_ruleCalculationBody)
        try:
            self.state = 3063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleCalculationBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3058
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleCalculationBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3059
                self.match(SysMLv2Parser.LBRACE)
                self.state = 3060
                self.ruleCalculationBodyPart()
                self.state = 3061
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCalculationBodyPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleCalculationBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleCalculationBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyItemContext,i)


        def ruleResultExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleResultExpressionMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCalculationBodyPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationBodyPart" ):
                listener.enterRuleCalculationBodyPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationBodyPart" ):
                listener.exitRuleCalculationBodyPart(self)




    def ruleCalculationBodyPart(self):

        localctx = SysMLv2Parser.RuleCalculationBodyPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_ruleCalculationBodyPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3068
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3065
                    self.ruleCalculationBodyItem() 
                self.state = 3070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

            self.state = 3072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -9214444002435137535) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 2136746426901) != 0):
                self.state = 3071
                self.ruleResultExpressionMember()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCalculationBodyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCalculationBodyItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleCalculationBodyItem1Context(RuleCalculationBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCalculationBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleActionBodyItem(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionBodyItemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationBodyItem1" ):
                listener.enterRuleCalculationBodyItem1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationBodyItem1" ):
                listener.exitRuleCalculationBodyItem1(self)


    class RuleCalculationBodyItem2Context(RuleCalculationBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCalculationBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleReturnParameterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReturnParameterMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationBodyItem2" ):
                listener.enterRuleCalculationBodyItem2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationBodyItem2" ):
                listener.exitRuleCalculationBodyItem2(self)



    def ruleCalculationBodyItem(self):

        localctx = SysMLv2Parser.RuleCalculationBodyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_ruleCalculationBodyItem)
        try:
            self.state = 3076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleCalculationBodyItem1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3074
                self.ruleActionBodyItem()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleCalculationBodyItem2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3075
                self.ruleReturnParameterMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleReturnParameterMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def K_RETURN(self):
            return self.getToken(SysMLv2Parser.K_RETURN, 0)

        def ruleUsageElement(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageElementContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleReturnParameterMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleReturnParameterMember" ):
                listener.enterRuleReturnParameterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleReturnParameterMember" ):
                listener.exitRuleReturnParameterMember(self)




    def ruleReturnParameterMember(self):

        localctx = SysMLv2Parser.RuleReturnParameterMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_ruleReturnParameterMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3078
            self.ruleMemberPrefix()
            self.state = 3079
            self.match(SysMLv2Parser.K_RETURN)
            self.state = 3080
            self.ruleUsageElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleResultExpressionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleResultExpressionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleResultExpressionMember" ):
                listener.enterRuleResultExpressionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleResultExpressionMember" ):
                listener.exitRuleResultExpressionMember(self)




    def ruleResultExpressionMember(self):

        localctx = SysMLv2Parser.RuleResultExpressionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_ruleResultExpressionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3082
            self.ruleMemberPrefix()
            self.state = 3083
            self.ruleOwnedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCalculationUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleCalculationKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCalculationUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationUsageKeyword" ):
                listener.enterRuleCalculationUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationUsageKeyword" ):
                listener.exitRuleCalculationUsageKeyword(self)




    def ruleCalculationUsageKeyword(self):

        localctx = SysMLv2Parser.RuleCalculationUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_ruleCalculationUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3085
            self.ruleCalculationKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCalculationUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleCalculationUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationUsageKeywordContext,0)


        def ruleActionUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageDeclarationContext,0)


        def ruleCalculationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCalculationUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCalculationUsage" ):
                listener.enterRuleCalculationUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCalculationUsage" ):
                listener.exitRuleCalculationUsage(self)




    def ruleCalculationUsage(self):

        localctx = SysMLv2Parser.RuleCalculationUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_ruleCalculationUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3087
            self.ruleOccurrenceUsagePrefix()
            self.state = 3088
            self.ruleCalculationUsageKeyword()
            self.state = 3089
            self.ruleActionUsageDeclaration()
            self.state = 3090
            self.ruleCalculationBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConstraintKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CONSTRAINT(self):
            return self.getToken(SysMLv2Parser.K_CONSTRAINT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConstraintKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConstraintKeyword" ):
                listener.enterRuleConstraintKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConstraintKeyword" ):
                listener.exitRuleConstraintKeyword(self)




    def ruleConstraintKeyword(self):

        localctx = SysMLv2Parser.RuleConstraintKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_ruleConstraintKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3092
            self.match(SysMLv2Parser.K_CONSTRAINT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConstraintDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConstraintKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConstraintDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConstraintDefKeyword" ):
                listener.enterRuleConstraintDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConstraintDefKeyword" ):
                listener.exitRuleConstraintDefKeyword(self)




    def ruleConstraintDefKeyword(self):

        localctx = SysMLv2Parser.RuleConstraintDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_ruleConstraintDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3094
            self.ruleConstraintKeyword()
            self.state = 3095
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConstraintDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleConstraintDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleCalculationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConstraintDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConstraintDefinition" ):
                listener.enterRuleConstraintDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConstraintDefinition" ):
                listener.exitRuleConstraintDefinition(self)




    def ruleConstraintDefinition(self):

        localctx = SysMLv2Parser.RuleConstraintDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_ruleConstraintDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3097
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3098
            self.ruleConstraintDefKeyword()
            self.state = 3099
            self.ruleDefinitionDeclaration()
            self.state = 3100
            self.ruleCalculationBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConstraintUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConstraintKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConstraintUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConstraintUsageKeyword" ):
                listener.enterRuleConstraintUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConstraintUsageKeyword" ):
                listener.exitRuleConstraintUsageKeyword(self)




    def ruleConstraintUsageKeyword(self):

        localctx = SysMLv2Parser.RuleConstraintUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_ruleConstraintUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3102
            self.ruleConstraintKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConstraintUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleConstraintUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageKeywordContext,0)


        def ruleConstraintUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageDeclarationContext,0)


        def ruleCalculationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConstraintUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConstraintUsage" ):
                listener.enterRuleConstraintUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConstraintUsage" ):
                listener.exitRuleConstraintUsage(self)




    def ruleConstraintUsage(self):

        localctx = SysMLv2Parser.RuleConstraintUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_ruleConstraintUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3104
            self.ruleOccurrenceUsagePrefix()
            self.state = 3105
            self.ruleConstraintUsageKeyword()
            self.state = 3106
            self.ruleConstraintUsageDeclaration()
            self.state = 3107
            self.ruleCalculationBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAssertConstraintUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def K_ASSERT(self):
            return self.getToken(SysMLv2Parser.K_ASSERT, 0)

        def ruleCalculationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyContext,0)


        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def ruleConstraintUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageKeywordContext,0)


        def ruleConstraintUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageDeclarationContext,0)


        def K_NOT(self):
            return self.getToken(SysMLv2Parser.K_NOT, 0)

        def ruleFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationPartContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAssertConstraintUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAssertConstraintUsage" ):
                listener.enterRuleAssertConstraintUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAssertConstraintUsage" ):
                listener.exitRuleAssertConstraintUsage(self)




    def ruleAssertConstraintUsage(self):

        localctx = SysMLv2Parser.RuleAssertConstraintUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_ruleAssertConstraintUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3109
            self.ruleOccurrenceUsagePrefix()
            self.state = 3110
            self.match(SysMLv2Parser.K_ASSERT)
            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 3111
                self.match(SysMLv2Parser.K_NOT)


            self.state = 3121
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                self.state = 3114
                self.ruleOwnedReferenceSubsetting()
                self.state = 3116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 14465) != 0):
                    self.state = 3115
                    self.ruleFeatureSpecializationPart()


                pass
            elif token in [85]:
                self.state = 3118
                self.ruleConstraintUsageKeyword()
                self.state = 3119
                self.ruleConstraintUsageDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3123
            self.ruleCalculationBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConstraintUsageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConstraintUsageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConstraintUsageDeclaration" ):
                listener.enterRuleConstraintUsageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConstraintUsageDeclaration" ):
                listener.exitRuleConstraintUsageDeclaration(self)




    def ruleConstraintUsageDeclaration(self):

        localctx = SysMLv2Parser.RuleConstraintUsageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_ruleConstraintUsageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                self.state = 3125
                self.ruleUsageDeclaration()


            self.state = 3129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 3128
                self.ruleValuePart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REQUIREMENT(self):
            return self.getToken(SysMLv2Parser.K_REQUIREMENT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementKeyword" ):
                listener.enterRuleRequirementKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementKeyword" ):
                listener.exitRuleRequirementKeyword(self)




    def ruleRequirementKeyword(self):

        localctx = SysMLv2Parser.RuleRequirementKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_ruleRequirementKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3131
            self.match(SysMLv2Parser.K_REQUIREMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRequirementKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementDefKeyword" ):
                listener.enterRuleRequirementDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementDefKeyword" ):
                listener.exitRuleRequirementDefKeyword(self)




    def ruleRequirementDefKeyword(self):

        localctx = SysMLv2Parser.RuleRequirementDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_ruleRequirementDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3133
            self.ruleRequirementKeyword()
            self.state = 3134
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleRequirementDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementDefinition" ):
                listener.enterRuleRequirementDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementDefinition" ):
                listener.exitRuleRequirementDefinition(self)




    def ruleRequirementDefinition(self):

        localctx = SysMLv2Parser.RuleRequirementDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_ruleRequirementDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3136
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3137
            self.ruleRequirementDefKeyword()
            self.state = 3138
            self.ruleDefinitionDeclaration()
            self.state = 3139
            self.ruleRequirementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleRequirementBody2Context(RuleRequirementBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleRequirementBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleRequirementBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyItemContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementBody2" ):
                listener.enterRuleRequirementBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementBody2" ):
                listener.exitRuleRequirementBody2(self)


    class RuleRequirementBody1Context(RuleRequirementBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementBody1" ):
                listener.enterRuleRequirementBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementBody1" ):
                listener.exitRuleRequirementBody1(self)



    def ruleRequirementBody(self):

        localctx = SysMLv2Parser.RuleRequirementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_ruleRequirementBody)
        self._la = 0 # Token type
        try:
            self.state = 3150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleRequirementBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3141
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleRequirementBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3142
                self.match(SysMLv2Parser.LBRACE)
                self.state = 3146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453518540830674) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2449923024711832609) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 188978561479) != 0):
                    self.state = 3143
                    self.ruleRequirementBodyItem()
                    self.state = 3148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3149
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementBodyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementBodyItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleRequirementBodyItem4Context(RuleRequirementBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFramedConcernMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFramedConcernMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementBodyItem4" ):
                listener.enterRuleRequirementBodyItem4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementBodyItem4" ):
                listener.exitRuleRequirementBodyItem4(self)


    class RuleRequirementBodyItem5Context(RuleRequirementBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleRequirementVerificationMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementVerificationMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementBodyItem5" ):
                listener.enterRuleRequirementBodyItem5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementBodyItem5" ):
                listener.exitRuleRequirementBodyItem5(self)


    class RuleRequirementBodyItem6Context(RuleRequirementBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleActorMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActorMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementBodyItem6" ):
                listener.enterRuleRequirementBodyItem6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementBodyItem6" ):
                listener.exitRuleRequirementBodyItem6(self)


    class RuleRequirementBodyItem7Context(RuleRequirementBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleStakeholderMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStakeholderMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementBodyItem7" ):
                listener.enterRuleRequirementBodyItem7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementBodyItem7" ):
                listener.exitRuleRequirementBodyItem7(self)


    class RuleRequirementBodyItem1Context(RuleRequirementBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDefinitionBodyItem(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyItemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementBodyItem1" ):
                listener.enterRuleRequirementBodyItem1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementBodyItem1" ):
                listener.exitRuleRequirementBodyItem1(self)


    class RuleRequirementBodyItem2Context(RuleRequirementBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSubjectMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSubjectMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementBodyItem2" ):
                listener.enterRuleRequirementBodyItem2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementBodyItem2" ):
                listener.exitRuleRequirementBodyItem2(self)


    class RuleRequirementBodyItem3Context(RuleRequirementBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleRequirementConstraintMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementConstraintMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementBodyItem3" ):
                listener.enterRuleRequirementBodyItem3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementBodyItem3" ):
                listener.exitRuleRequirementBodyItem3(self)



    def ruleRequirementBodyItem(self):

        localctx = SysMLv2Parser.RuleRequirementBodyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_ruleRequirementBodyItem)
        try:
            self.state = 3159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleRequirementBodyItem1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3152
                self.ruleDefinitionBodyItem()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleRequirementBodyItem2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3153
                self.ruleSubjectMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleRequirementBodyItem3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3154
                self.ruleRequirementConstraintMember()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleRequirementBodyItem4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3155
                self.ruleFramedConcernMember()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleRequirementBodyItem5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3156
                self.ruleRequirementVerificationMember()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleRequirementBodyItem6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3157
                self.ruleActorMember()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleRequirementBodyItem7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3158
                self.ruleStakeholderMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSubjectMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleSubjectUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSubjectUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSubjectMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSubjectMember" ):
                listener.enterRuleSubjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSubjectMember" ):
                listener.exitRuleSubjectMember(self)




    def ruleSubjectMember(self):

        localctx = SysMLv2Parser.RuleSubjectMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_ruleSubjectMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.ruleMemberPrefix()
            self.state = 3162
            self.ruleSubjectUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSubjectUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SUBJECT(self):
            return self.getToken(SysMLv2Parser.K_SUBJECT, 0)

        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSubjectUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSubjectUsage" ):
                listener.enterRuleSubjectUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSubjectUsage" ):
                listener.exitRuleSubjectUsage(self)




    def ruleSubjectUsage(self):

        localctx = SysMLv2Parser.RuleSubjectUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_ruleSubjectUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3164
            self.match(SysMLv2Parser.K_SUBJECT)
            self.state = 3168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 3165
                self.ruleUsageExtensionKeyword()
                self.state = 3170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3171
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementConstraintMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleRequirementConstraintKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementConstraintKindContext,0)


        def ruleRequirementConstraintUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementConstraintUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementConstraintMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementConstraintMember" ):
                listener.enterRuleRequirementConstraintMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementConstraintMember" ):
                listener.exitRuleRequirementConstraintMember(self)




    def ruleRequirementConstraintMember(self):

        localctx = SysMLv2Parser.RuleRequirementConstraintMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_ruleRequirementConstraintMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3173
            self.ruleMemberPrefix()
            self.state = 3174
            self.ruleRequirementConstraintKind()
            self.state = 3175
            self.ruleRequirementConstraintUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementConstraintUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementConstraintUsage

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleRequirementConstraintUsage1Context(RuleRequirementConstraintUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementConstraintUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)

        def ruleCalculationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyContext,0)

        def ruleFeatureSpecialization(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureSpecializationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementConstraintUsage1" ):
                listener.enterRuleRequirementConstraintUsage1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementConstraintUsage1" ):
                listener.exitRuleRequirementConstraintUsage1(self)


    class RuleRequirementConstraintUsage2Context(RuleRequirementConstraintUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementConstraintUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConstraintUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageDeclarationContext,0)

        def ruleCalculationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyContext,0)

        def ruleConstraintUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageKeywordContext,0)

        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementConstraintUsage2" ):
                listener.enterRuleRequirementConstraintUsage2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementConstraintUsage2" ):
                listener.exitRuleRequirementConstraintUsage2(self)



    def ruleRequirementConstraintUsage(self):

        localctx = SysMLv2Parser.RuleRequirementConstraintUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_ruleRequirementConstraintUsage)
        self._la = 0 # Token type
        try:
            self.state = 3203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                localctx = SysMLv2Parser.RuleRequirementConstraintUsage1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3177
                self.ruleOwnedReferenceSubsetting()
                self.state = 3181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 872431616) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 113) != 0):
                    self.state = 3178
                    self.ruleFeatureSpecialization()
                    self.state = 3183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3184
                self.ruleCalculationBody()
                pass
            elif token in [85, 138]:
                localctx = SysMLv2Parser.RuleRequirementConstraintUsage2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 3189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==138:
                        self.state = 3186
                        self.ruleUsageExtensionKeyword()
                        self.state = 3191
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3192
                    self.ruleConstraintUsageKeyword()
                    pass

                elif la_ == 2:
                    self.state = 3194 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3193
                        self.ruleUsageExtensionKeyword()
                        self.state = 3196 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==138):
                            break

                    pass


                self.state = 3200
                self.ruleConstraintUsageDeclaration()
                self.state = 3201
                self.ruleCalculationBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFramedConcernMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleFramedConcernKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFramedConcernKindContext,0)


        def ruleFramedConcernUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFramedConcernUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFramedConcernMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFramedConcernMember" ):
                listener.enterRuleFramedConcernMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFramedConcernMember" ):
                listener.exitRuleFramedConcernMember(self)




    def ruleFramedConcernMember(self):

        localctx = SysMLv2Parser.RuleFramedConcernMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_ruleFramedConcernMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3205
            self.ruleMemberPrefix()
            self.state = 3206
            self.ruleFramedConcernKind()
            self.state = 3207
            self.ruleFramedConcernUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFramedConcernUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFramedConcernUsage

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFramedConcernUsage1Context(RuleFramedConcernUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFramedConcernUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)

        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)

        def ruleFeatureSpecialization(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureSpecializationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFramedConcernUsage1" ):
                listener.enterRuleFramedConcernUsage1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFramedConcernUsage1" ):
                listener.exitRuleFramedConcernUsage1(self)


    class RuleFramedConcernUsage2Context(RuleFramedConcernUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFramedConcernUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConstraintUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageDeclarationContext,0)

        def ruleCalculationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyContext,0)

        def ruleConcernUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConcernUsageKeywordContext,0)

        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFramedConcernUsage2" ):
                listener.enterRuleFramedConcernUsage2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFramedConcernUsage2" ):
                listener.exitRuleFramedConcernUsage2(self)



    def ruleFramedConcernUsage(self):

        localctx = SysMLv2Parser.RuleFramedConcernUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_ruleFramedConcernUsage)
        self._la = 0 # Token type
        try:
            self.state = 3235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                localctx = SysMLv2Parser.RuleFramedConcernUsage1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3209
                self.ruleOwnedReferenceSubsetting()
                self.state = 3213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 872431616) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 113) != 0):
                    self.state = 3210
                    self.ruleFeatureSpecialization()
                    self.state = 3215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3216
                self.ruleRequirementBody()
                pass
            elif token in [93, 138]:
                localctx = SysMLv2Parser.RuleFramedConcernUsage2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
                if la_ == 1:
                    self.state = 3221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==138:
                        self.state = 3218
                        self.ruleUsageExtensionKeyword()
                        self.state = 3223
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3224
                    self.ruleConcernUsageKeyword()
                    pass

                elif la_ == 2:
                    self.state = 3226 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3225
                        self.ruleUsageExtensionKeyword()
                        self.state = 3228 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==138):
                            break

                    pass


                self.state = 3232
                self.ruleConstraintUsageDeclaration()
                self.state = 3233
                self.ruleCalculationBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActorMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleActorUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActorUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActorMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActorMember" ):
                listener.enterRuleActorMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActorMember" ):
                listener.exitRuleActorMember(self)




    def ruleActorMember(self):

        localctx = SysMLv2Parser.RuleActorMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_ruleActorMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3237
            self.ruleMemberPrefix()
            self.state = 3238
            self.ruleActorUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleActorUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ACTOR(self):
            return self.getToken(SysMLv2Parser.K_ACTOR, 0)

        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleActorUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleActorUsage" ):
                listener.enterRuleActorUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleActorUsage" ):
                listener.exitRuleActorUsage(self)




    def ruleActorUsage(self):

        localctx = SysMLv2Parser.RuleActorUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_ruleActorUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3240
            self.match(SysMLv2Parser.K_ACTOR)
            self.state = 3244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 3241
                self.ruleUsageExtensionKeyword()
                self.state = 3246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3247
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStakeholderMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleStakeholderUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleStakeholderUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStakeholderMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStakeholderMember" ):
                listener.enterRuleStakeholderMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStakeholderMember" ):
                listener.exitRuleStakeholderMember(self)




    def ruleStakeholderMember(self):

        localctx = SysMLv2Parser.RuleStakeholderMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_ruleStakeholderMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3249
            self.ruleMemberPrefix()
            self.state = 3250
            self.ruleStakeholderUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleStakeholderUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_STAKEHOLDER(self):
            return self.getToken(SysMLv2Parser.K_STAKEHOLDER, 0)

        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleStakeholderUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleStakeholderUsage" ):
                listener.enterRuleStakeholderUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleStakeholderUsage" ):
                listener.exitRuleStakeholderUsage(self)




    def ruleStakeholderUsage(self):

        localctx = SysMLv2Parser.RuleStakeholderUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_ruleStakeholderUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3252
            self.match(SysMLv2Parser.K_STAKEHOLDER)
            self.state = 3256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 3253
                self.ruleUsageExtensionKeyword()
                self.state = 3258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3259
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRequirementKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementUsageKeyword" ):
                listener.enterRuleRequirementUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementUsageKeyword" ):
                listener.exitRuleRequirementUsageKeyword(self)




    def ruleRequirementUsageKeyword(self):

        localctx = SysMLv2Parser.RuleRequirementUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_ruleRequirementUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3261
            self.ruleRequirementKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleRequirementUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementUsageKeywordContext,0)


        def ruleConstraintUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageDeclarationContext,0)


        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementUsage" ):
                listener.enterRuleRequirementUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementUsage" ):
                listener.exitRuleRequirementUsage(self)




    def ruleRequirementUsage(self):

        localctx = SysMLv2Parser.RuleRequirementUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_ruleRequirementUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3263
            self.ruleOccurrenceUsagePrefix()
            self.state = 3264
            self.ruleRequirementUsageKeyword()
            self.state = 3265
            self.ruleConstraintUsageDeclaration()
            self.state = 3266
            self.ruleRequirementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSatisfyRequirementUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def K_SATISFY(self):
            return self.getToken(SysMLv2Parser.K_SATISFY, 0)

        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)


        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def ruleRequirementUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementUsageKeywordContext,0)


        def K_ASSERT(self):
            return self.getToken(SysMLv2Parser.K_ASSERT, 0)

        def K_NOT(self):
            return self.getToken(SysMLv2Parser.K_NOT, 0)

        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def K_BY(self):
            return self.getToken(SysMLv2Parser.K_BY, 0)

        def ruleSatisfactionSubjectMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSatisfactionSubjectMemberContext,0)


        def ruleFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationPartContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSatisfyRequirementUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSatisfyRequirementUsage" ):
                listener.enterRuleSatisfyRequirementUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSatisfyRequirementUsage" ):
                listener.exitRuleSatisfyRequirementUsage(self)




    def ruleSatisfyRequirementUsage(self):

        localctx = SysMLv2Parser.RuleSatisfyRequirementUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_ruleSatisfyRequirementUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3268
            self.ruleOccurrenceUsagePrefix()
            self.state = 3270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 3269
                self.match(SysMLv2Parser.K_ASSERT)


            self.state = 3273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 3272
                self.match(SysMLv2Parser.K_NOT)


            self.state = 3275
            self.match(SysMLv2Parser.K_SATISFY)
            self.state = 3284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                self.state = 3276
                self.ruleOwnedReferenceSubsetting()
                self.state = 3278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 14465) != 0):
                    self.state = 3277
                    self.ruleFeatureSpecializationPart()


                pass
            elif token in [88]:
                self.state = 3280
                self.ruleRequirementUsageKeyword()
                self.state = 3282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 3281
                    self.ruleUsageDeclaration()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 3287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 3286
                self.ruleValuePart()


            self.state = 3291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 3289
                self.match(SysMLv2Parser.K_BY)
                self.state = 3290
                self.ruleSatisfactionSubjectMember()


            self.state = 3293
            self.ruleRequirementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSatisfactionSubjectMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleSatisfactionParameter(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSatisfactionParameterContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSatisfactionSubjectMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSatisfactionSubjectMember" ):
                listener.enterRuleSatisfactionSubjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSatisfactionSubjectMember" ):
                listener.exitRuleSatisfactionSubjectMember(self)




    def ruleSatisfactionSubjectMember(self):

        localctx = SysMLv2Parser.RuleSatisfactionSubjectMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_ruleSatisfactionSubjectMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3295
            self.ruleSatisfactionParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSatisfactionParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleSatisfactionFeatureValue(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSatisfactionFeatureValueContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSatisfactionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSatisfactionParameter" ):
                listener.enterRuleSatisfactionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSatisfactionParameter" ):
                listener.exitRuleSatisfactionParameter(self)




    def ruleSatisfactionParameter(self):

        localctx = SysMLv2Parser.RuleSatisfactionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_ruleSatisfactionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3297
            self.ruleSatisfactionFeatureValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSatisfactionFeatureValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleSatisfactionReferenceExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSatisfactionReferenceExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSatisfactionFeatureValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSatisfactionFeatureValue" ):
                listener.enterRuleSatisfactionFeatureValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSatisfactionFeatureValue" ):
                listener.exitRuleSatisfactionFeatureValue(self)




    def ruleSatisfactionFeatureValue(self):

        localctx = SysMLv2Parser.RuleSatisfactionFeatureValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_ruleSatisfactionFeatureValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3299
            self.ruleSatisfactionReferenceExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSatisfactionReferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFeatureChainMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureChainMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSatisfactionReferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSatisfactionReferenceExpression" ):
                listener.enterRuleSatisfactionReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSatisfactionReferenceExpression" ):
                listener.exitRuleSatisfactionReferenceExpression(self)




    def ruleSatisfactionReferenceExpression(self):

        localctx = SysMLv2Parser.RuleSatisfactionReferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_ruleSatisfactionReferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3301
            self.ruleFeatureChainMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConcernKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CONCERN(self):
            return self.getToken(SysMLv2Parser.K_CONCERN, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConcernKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConcernKeyword" ):
                listener.enterRuleConcernKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConcernKeyword" ):
                listener.exitRuleConcernKeyword(self)




    def ruleConcernKeyword(self):

        localctx = SysMLv2Parser.RuleConcernKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_ruleConcernKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3303
            self.match(SysMLv2Parser.K_CONCERN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConcernDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConcernKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConcernKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConcernDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConcernDefKeyword" ):
                listener.enterRuleConcernDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConcernDefKeyword" ):
                listener.exitRuleConcernDefKeyword(self)




    def ruleConcernDefKeyword(self):

        localctx = SysMLv2Parser.RuleConcernDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_ruleConcernDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3305
            self.ruleConcernKeyword()
            self.state = 3306
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConcernDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleConcernDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConcernDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConcernDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConcernDefinition" ):
                listener.enterRuleConcernDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConcernDefinition" ):
                listener.exitRuleConcernDefinition(self)




    def ruleConcernDefinition(self):

        localctx = SysMLv2Parser.RuleConcernDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_ruleConcernDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3308
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3309
            self.ruleConcernDefKeyword()
            self.state = 3310
            self.ruleDefinitionDeclaration()
            self.state = 3311
            self.ruleRequirementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConcernUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConcernKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConcernKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConcernUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConcernUsageKeyword" ):
                listener.enterRuleConcernUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConcernUsageKeyword" ):
                listener.exitRuleConcernUsageKeyword(self)




    def ruleConcernUsageKeyword(self):

        localctx = SysMLv2Parser.RuleConcernUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_ruleConcernUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3313
            self.ruleConcernKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConcernUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleConcernUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConcernUsageKeywordContext,0)


        def ruleConstraintUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageDeclarationContext,0)


        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConcernUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConcernUsage" ):
                listener.enterRuleConcernUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConcernUsage" ):
                listener.exitRuleConcernUsage(self)




    def ruleConcernUsage(self):

        localctx = SysMLv2Parser.RuleConcernUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_ruleConcernUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3315
            self.ruleOccurrenceUsagePrefix()
            self.state = 3316
            self.ruleConcernUsageKeyword()
            self.state = 3317
            self.ruleConstraintUsageDeclaration()
            self.state = 3318
            self.ruleRequirementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCaseKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CASE(self):
            return self.getToken(SysMLv2Parser.K_CASE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCaseKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseKeyword" ):
                listener.enterRuleCaseKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseKeyword" ):
                listener.exitRuleCaseKeyword(self)




    def ruleCaseKeyword(self):

        localctx = SysMLv2Parser.RuleCaseKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_ruleCaseKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3320
            self.match(SysMLv2Parser.K_CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCaseDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleCaseKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCaseDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseDefKeyword" ):
                listener.enterRuleCaseDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseDefKeyword" ):
                listener.exitRuleCaseDefKeyword(self)




    def ruleCaseDefKeyword(self):

        localctx = SysMLv2Parser.RuleCaseDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_ruleCaseDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3322
            self.ruleCaseKeyword()
            self.state = 3323
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCaseDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleCaseDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleCaseBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCaseDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseDefinition" ):
                listener.enterRuleCaseDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseDefinition" ):
                listener.exitRuleCaseDefinition(self)




    def ruleCaseDefinition(self):

        localctx = SysMLv2Parser.RuleCaseDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_ruleCaseDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3326
            self.ruleCaseDefKeyword()
            self.state = 3327
            self.ruleDefinitionDeclaration()
            self.state = 3328
            self.ruleCaseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCaseBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCaseBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleCaseBody2Context(RuleCaseBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCaseBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleCaseBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleCaseBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyItemContext,i)

        def ruleResultExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleResultExpressionMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseBody2" ):
                listener.enterRuleCaseBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseBody2" ):
                listener.exitRuleCaseBody2(self)


    class RuleCaseBody1Context(RuleCaseBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCaseBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseBody1" ):
                listener.enterRuleCaseBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseBody1" ):
                listener.exitRuleCaseBody1(self)



    def ruleCaseBody(self):

        localctx = SysMLv2Parser.RuleCaseBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_ruleCaseBody)
        self._la = 0 # Token type
        try:
            self.state = 3342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleCaseBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3330
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleCaseBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3331
                self.match(SysMLv2Parser.LBRACE)
                self.state = 3335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3332
                        self.ruleCaseBodyItem() 
                    self.state = 3337
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                self.state = 3339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22 or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -9214444002435137535) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 2136746426901) != 0):
                    self.state = 3338
                    self.ruleResultExpressionMember()


                self.state = 3341
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCaseBodyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCaseBodyItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleCaseBodyItem1Context(RuleCaseBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCaseBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleCalculationBodyItem(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyItemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseBodyItem1" ):
                listener.enterRuleCaseBodyItem1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseBodyItem1" ):
                listener.exitRuleCaseBodyItem1(self)


    class RuleCaseBodyItem2Context(RuleCaseBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCaseBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSubjectMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSubjectMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseBodyItem2" ):
                listener.enterRuleCaseBodyItem2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseBodyItem2" ):
                listener.exitRuleCaseBodyItem2(self)


    class RuleCaseBodyItem3Context(RuleCaseBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCaseBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleActorMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActorMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseBodyItem3" ):
                listener.enterRuleCaseBodyItem3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseBodyItem3" ):
                listener.exitRuleCaseBodyItem3(self)


    class RuleCaseBodyItem4Context(RuleCaseBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleCaseBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleObjectiveMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleObjectiveMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseBodyItem4" ):
                listener.enterRuleCaseBodyItem4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseBodyItem4" ):
                listener.exitRuleCaseBodyItem4(self)



    def ruleCaseBodyItem(self):

        localctx = SysMLv2Parser.RuleCaseBodyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_ruleCaseBodyItem)
        try:
            self.state = 3348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleCaseBodyItem1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3344
                self.ruleCalculationBodyItem()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleCaseBodyItem2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3345
                self.ruleSubjectMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleCaseBodyItem3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3346
                self.ruleActorMember()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleCaseBodyItem4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3347
                self.ruleObjectiveMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleObjectiveMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def K_OBJECTIVE(self):
            return self.getToken(SysMLv2Parser.K_OBJECTIVE, 0)

        def ruleObjectiveRequirementUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleObjectiveRequirementUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleObjectiveMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleObjectiveMember" ):
                listener.enterRuleObjectiveMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleObjectiveMember" ):
                listener.exitRuleObjectiveMember(self)




    def ruleObjectiveMember(self):

        localctx = SysMLv2Parser.RuleObjectiveMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_ruleObjectiveMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3350
            self.ruleMemberPrefix()
            self.state = 3351
            self.match(SysMLv2Parser.K_OBJECTIVE)
            self.state = 3352
            self.ruleObjectiveRequirementUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleObjectiveRequirementUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConstraintUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageDeclarationContext,0)


        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)


        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleObjectiveRequirementUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleObjectiveRequirementUsage" ):
                listener.enterRuleObjectiveRequirementUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleObjectiveRequirementUsage" ):
                listener.exitRuleObjectiveRequirementUsage(self)




    def ruleObjectiveRequirementUsage(self):

        localctx = SysMLv2Parser.RuleObjectiveRequirementUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_ruleObjectiveRequirementUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 3354
                self.ruleUsageExtensionKeyword()
                self.state = 3359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3360
            self.ruleConstraintUsageDeclaration()
            self.state = 3361
            self.ruleRequirementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCaseUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleCaseKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCaseUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseUsageKeyword" ):
                listener.enterRuleCaseUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseUsageKeyword" ):
                listener.exitRuleCaseUsageKeyword(self)




    def ruleCaseUsageKeyword(self):

        localctx = SysMLv2Parser.RuleCaseUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_ruleCaseUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3363
            self.ruleCaseKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCaseUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleCaseUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseUsageKeywordContext,0)


        def ruleActionUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageDeclarationContext,0)


        def ruleCaseBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCaseUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCaseUsage" ):
                listener.enterRuleCaseUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCaseUsage" ):
                listener.exitRuleCaseUsage(self)




    def ruleCaseUsage(self):

        localctx = SysMLv2Parser.RuleCaseUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_ruleCaseUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3365
            self.ruleOccurrenceUsagePrefix()
            self.state = 3366
            self.ruleCaseUsageKeyword()
            self.state = 3367
            self.ruleActionUsageDeclaration()
            self.state = 3368
            self.ruleCaseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAnalysisCaseKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ANALYSIS(self):
            return self.getToken(SysMLv2Parser.K_ANALYSIS, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAnalysisCaseKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnalysisCaseKeyword" ):
                listener.enterRuleAnalysisCaseKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnalysisCaseKeyword" ):
                listener.exitRuleAnalysisCaseKeyword(self)




    def ruleAnalysisCaseKeyword(self):

        localctx = SysMLv2Parser.RuleAnalysisCaseKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_ruleAnalysisCaseKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3370
            self.match(SysMLv2Parser.K_ANALYSIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAnalysisCaseDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAnalysisCaseKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAnalysisCaseKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAnalysisCaseDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnalysisCaseDefKeyword" ):
                listener.enterRuleAnalysisCaseDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnalysisCaseDefKeyword" ):
                listener.exitRuleAnalysisCaseDefKeyword(self)




    def ruleAnalysisCaseDefKeyword(self):

        localctx = SysMLv2Parser.RuleAnalysisCaseDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_ruleAnalysisCaseDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3372
            self.ruleAnalysisCaseKeyword()
            self.state = 3373
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAnalysisCaseUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAnalysisCaseKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAnalysisCaseKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAnalysisCaseUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnalysisCaseUsageKeyword" ):
                listener.enterRuleAnalysisCaseUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnalysisCaseUsageKeyword" ):
                listener.exitRuleAnalysisCaseUsageKeyword(self)




    def ruleAnalysisCaseUsageKeyword(self):

        localctx = SysMLv2Parser.RuleAnalysisCaseUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_ruleAnalysisCaseUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3375
            self.ruleAnalysisCaseKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAnalysisCaseDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleAnalysisCaseDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAnalysisCaseDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleCaseBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAnalysisCaseDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnalysisCaseDefinition" ):
                listener.enterRuleAnalysisCaseDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnalysisCaseDefinition" ):
                listener.exitRuleAnalysisCaseDefinition(self)




    def ruleAnalysisCaseDefinition(self):

        localctx = SysMLv2Parser.RuleAnalysisCaseDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_ruleAnalysisCaseDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3377
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3378
            self.ruleAnalysisCaseDefKeyword()
            self.state = 3379
            self.ruleDefinitionDeclaration()
            self.state = 3380
            self.ruleCaseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAnalysisCaseUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleAnalysisCaseUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleAnalysisCaseUsageKeywordContext,0)


        def ruleActionUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageDeclarationContext,0)


        def ruleCaseBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAnalysisCaseUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAnalysisCaseUsage" ):
                listener.enterRuleAnalysisCaseUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAnalysisCaseUsage" ):
                listener.exitRuleAnalysisCaseUsage(self)




    def ruleAnalysisCaseUsage(self):

        localctx = SysMLv2Parser.RuleAnalysisCaseUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_ruleAnalysisCaseUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            self.ruleOccurrenceUsagePrefix()
            self.state = 3383
            self.ruleAnalysisCaseUsageKeyword()
            self.state = 3384
            self.ruleActionUsageDeclaration()
            self.state = 3385
            self.ruleCaseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleVerificationCaseKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VERIFICATION(self):
            return self.getToken(SysMLv2Parser.K_VERIFICATION, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleVerificationCaseKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVerificationCaseKeyword" ):
                listener.enterRuleVerificationCaseKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVerificationCaseKeyword" ):
                listener.exitRuleVerificationCaseKeyword(self)




    def ruleVerificationCaseKeyword(self):

        localctx = SysMLv2Parser.RuleVerificationCaseKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_ruleVerificationCaseKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3387
            self.match(SysMLv2Parser.K_VERIFICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleVerificationCaseDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleVerificationCaseKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVerificationCaseKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleVerificationCaseDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVerificationCaseDefKeyword" ):
                listener.enterRuleVerificationCaseDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVerificationCaseDefKeyword" ):
                listener.exitRuleVerificationCaseDefKeyword(self)




    def ruleVerificationCaseDefKeyword(self):

        localctx = SysMLv2Parser.RuleVerificationCaseDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_ruleVerificationCaseDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3389
            self.ruleVerificationCaseKeyword()
            self.state = 3390
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleVerificationCaseUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleVerificationCaseKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVerificationCaseKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleVerificationCaseUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVerificationCaseUsageKeyword" ):
                listener.enterRuleVerificationCaseUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVerificationCaseUsageKeyword" ):
                listener.exitRuleVerificationCaseUsageKeyword(self)




    def ruleVerificationCaseUsageKeyword(self):

        localctx = SysMLv2Parser.RuleVerificationCaseUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_ruleVerificationCaseUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3392
            self.ruleVerificationCaseKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleVerificationCaseDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleVerificationCaseDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVerificationCaseDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleCaseBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleVerificationCaseDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVerificationCaseDefinition" ):
                listener.enterRuleVerificationCaseDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVerificationCaseDefinition" ):
                listener.exitRuleVerificationCaseDefinition(self)




    def ruleVerificationCaseDefinition(self):

        localctx = SysMLv2Parser.RuleVerificationCaseDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_ruleVerificationCaseDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3394
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3395
            self.ruleVerificationCaseDefKeyword()
            self.state = 3396
            self.ruleDefinitionDeclaration()
            self.state = 3397
            self.ruleCaseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleVerificationCaseUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleVerificationCaseUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVerificationCaseUsageKeywordContext,0)


        def ruleActionUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageDeclarationContext,0)


        def ruleCaseBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleVerificationCaseUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVerificationCaseUsage" ):
                listener.enterRuleVerificationCaseUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVerificationCaseUsage" ):
                listener.exitRuleVerificationCaseUsage(self)




    def ruleVerificationCaseUsage(self):

        localctx = SysMLv2Parser.RuleVerificationCaseUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_ruleVerificationCaseUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3399
            self.ruleOccurrenceUsagePrefix()
            self.state = 3400
            self.ruleVerificationCaseUsageKeyword()
            self.state = 3401
            self.ruleActionUsageDeclaration()
            self.state = 3402
            self.ruleCaseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementVerificationMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def ruleRequirementVerificationKind(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementVerificationKindContext,0)


        def ruleRequirementVerificationUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementVerificationUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementVerificationMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementVerificationMember" ):
                listener.enterRuleRequirementVerificationMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementVerificationMember" ):
                listener.exitRuleRequirementVerificationMember(self)




    def ruleRequirementVerificationMember(self):

        localctx = SysMLv2Parser.RuleRequirementVerificationMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_ruleRequirementVerificationMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3404
            self.ruleMemberPrefix()
            self.state = 3405
            self.ruleRequirementVerificationKind()
            self.state = 3406
            self.ruleRequirementVerificationUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementVerificationUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementVerificationUsage

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleRequirementVerificationUsage2Context(RuleRequirementVerificationUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementVerificationUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConstraintUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageDeclarationContext,0)

        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)

        def ruleRequirementUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementUsageKeywordContext,0)

        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementVerificationUsage2" ):
                listener.enterRuleRequirementVerificationUsage2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementVerificationUsage2" ):
                listener.exitRuleRequirementVerificationUsage2(self)


    class RuleRequirementVerificationUsage1Context(RuleRequirementVerificationUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementVerificationUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)

        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)

        def ruleFeatureSpecialization(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureSpecializationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementVerificationUsage1" ):
                listener.enterRuleRequirementVerificationUsage1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementVerificationUsage1" ):
                listener.exitRuleRequirementVerificationUsage1(self)



    def ruleRequirementVerificationUsage(self):

        localctx = SysMLv2Parser.RuleRequirementVerificationUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_ruleRequirementVerificationUsage)
        self._la = 0 # Token type
        try:
            self.state = 3434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                localctx = SysMLv2Parser.RuleRequirementVerificationUsage1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3408
                self.ruleOwnedReferenceSubsetting()
                self.state = 3412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 872431616) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 113) != 0):
                    self.state = 3409
                    self.ruleFeatureSpecialization()
                    self.state = 3414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3415
                self.ruleRequirementBody()
                pass
            elif token in [88, 138]:
                localctx = SysMLv2Parser.RuleRequirementVerificationUsage2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 3420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==138:
                        self.state = 3417
                        self.ruleUsageExtensionKeyword()
                        self.state = 3422
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3423
                    self.ruleRequirementUsageKeyword()
                    pass

                elif la_ == 2:
                    self.state = 3425 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3424
                        self.ruleUsageExtensionKeyword()
                        self.state = 3427 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==138):
                            break

                    pass


                self.state = 3431
                self.ruleConstraintUsageDeclaration()
                self.state = 3432
                self.ruleRequirementBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUseCaseKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_USE(self):
            return self.getToken(SysMLv2Parser.K_USE, 0)

        def K_CASE(self):
            return self.getToken(SysMLv2Parser.K_CASE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUseCaseKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUseCaseKeyword" ):
                listener.enterRuleUseCaseKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUseCaseKeyword" ):
                listener.exitRuleUseCaseKeyword(self)




    def ruleUseCaseKeyword(self):

        localctx = SysMLv2Parser.RuleUseCaseKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_ruleUseCaseKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3436
            self.match(SysMLv2Parser.K_USE)
            self.state = 3437
            self.match(SysMLv2Parser.K_CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUseCaseDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUseCaseKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUseCaseKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUseCaseDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUseCaseDefKeyword" ):
                listener.enterRuleUseCaseDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUseCaseDefKeyword" ):
                listener.exitRuleUseCaseDefKeyword(self)




    def ruleUseCaseDefKeyword(self):

        localctx = SysMLv2Parser.RuleUseCaseDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_ruleUseCaseDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3439
            self.ruleUseCaseKeyword()
            self.state = 3440
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUseCaseUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUseCaseKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUseCaseKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUseCaseUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUseCaseUsageKeyword" ):
                listener.enterRuleUseCaseUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUseCaseUsageKeyword" ):
                listener.exitRuleUseCaseUsageKeyword(self)




    def ruleUseCaseUsageKeyword(self):

        localctx = SysMLv2Parser.RuleUseCaseUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_ruleUseCaseUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3442
            self.ruleUseCaseKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUseCaseDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleUseCaseDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUseCaseDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleCaseBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUseCaseDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUseCaseDefinition" ):
                listener.enterRuleUseCaseDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUseCaseDefinition" ):
                listener.exitRuleUseCaseDefinition(self)




    def ruleUseCaseDefinition(self):

        localctx = SysMLv2Parser.RuleUseCaseDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_ruleUseCaseDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3444
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3445
            self.ruleUseCaseDefKeyword()
            self.state = 3446
            self.ruleDefinitionDeclaration()
            self.state = 3447
            self.ruleCaseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUseCaseUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleUseCaseUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUseCaseUsageKeywordContext,0)


        def ruleActionUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleActionUsageDeclarationContext,0)


        def ruleCaseBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUseCaseUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUseCaseUsage" ):
                listener.enterRuleUseCaseUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUseCaseUsage" ):
                listener.exitRuleUseCaseUsage(self)




    def ruleUseCaseUsage(self):

        localctx = SysMLv2Parser.RuleUseCaseUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_ruleUseCaseUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3449
            self.ruleOccurrenceUsagePrefix()
            self.state = 3450
            self.ruleUseCaseUsageKeyword()
            self.state = 3451
            self.ruleActionUsageDeclaration()
            self.state = 3452
            self.ruleCaseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleIncludeUseCaseUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def K_INCLUDE(self):
            return self.getToken(SysMLv2Parser.K_INCLUDE, 0)

        def ruleCaseBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCaseBodyContext,0)


        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)


        def ruleUseCaseUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUseCaseUsageKeywordContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def ruleFeatureSpecializationPart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationPartContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleIncludeUseCaseUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleIncludeUseCaseUsage" ):
                listener.enterRuleIncludeUseCaseUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleIncludeUseCaseUsage" ):
                listener.exitRuleIncludeUseCaseUsage(self)




    def ruleIncludeUseCaseUsage(self):

        localctx = SysMLv2Parser.RuleIncludeUseCaseUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_ruleIncludeUseCaseUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3454
            self.ruleOccurrenceUsagePrefix()
            self.state = 3455
            self.match(SysMLv2Parser.K_INCLUDE)
            self.state = 3464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                self.state = 3456
                self.ruleOwnedReferenceSubsetting()
                self.state = 3458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 14465) != 0):
                    self.state = 3457
                    self.ruleFeatureSpecializationPart()


                pass
            elif token in [98]:
                self.state = 3460
                self.ruleUseCaseUsageKeyword()
                self.state = 3462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                    self.state = 3461
                    self.ruleUsageDeclaration()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 3467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 3466
                self.ruleValuePart()


            self.state = 3469
            self.ruleCaseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VIEW(self):
            return self.getToken(SysMLv2Parser.K_VIEW, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewKeyword" ):
                listener.enterRuleViewKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewKeyword" ):
                listener.exitRuleViewKeyword(self)




    def ruleViewKeyword(self):

        localctx = SysMLv2Parser.RuleViewKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_ruleViewKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3471
            self.match(SysMLv2Parser.K_VIEW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleViewKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewDefKeyword" ):
                listener.enterRuleViewDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewDefKeyword" ):
                listener.exitRuleViewDefKeyword(self)




    def ruleViewDefKeyword(self):

        localctx = SysMLv2Parser.RuleViewDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_ruleViewDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3473
            self.ruleViewKeyword()
            self.state = 3474
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleViewDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleViewDefinitionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewDefinitionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewDefinition" ):
                listener.enterRuleViewDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewDefinition" ):
                listener.exitRuleViewDefinition(self)




    def ruleViewDefinition(self):

        localctx = SysMLv2Parser.RuleViewDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_ruleViewDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3476
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3477
            self.ruleViewDefKeyword()
            self.state = 3478
            self.ruleDefinitionDeclaration()
            self.state = 3479
            self.ruleViewDefinitionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewDefinitionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewDefinitionBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleViewDefinitionBody2Context(RuleViewDefinitionBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewDefinitionBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleViewDefinitionBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleViewDefinitionBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleViewDefinitionBodyItemContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewDefinitionBody2" ):
                listener.enterRuleViewDefinitionBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewDefinitionBody2" ):
                listener.exitRuleViewDefinitionBody2(self)


    class RuleViewDefinitionBody1Context(RuleViewDefinitionBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewDefinitionBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewDefinitionBody1" ):
                listener.enterRuleViewDefinitionBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewDefinitionBody1" ):
                listener.exitRuleViewDefinitionBody1(self)



    def ruleViewDefinitionBody(self):

        localctx = SysMLv2Parser.RuleViewDefinitionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_ruleViewDefinitionBody)
        self._la = 0 # Token type
        try:
            self.state = 3490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleViewDefinitionBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3481
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleViewDefinitionBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3482
                self.match(SysMLv2Parser.LBRACE)
                self.state = 3486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453518541092818) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2382369031373181985) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 188978561479) != 0):
                    self.state = 3483
                    self.ruleViewDefinitionBodyItem()
                    self.state = 3488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3489
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewDefinitionBodyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewDefinitionBodyItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleViewDefinitionBodyItem3Context(RuleViewDefinitionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewDefinitionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleViewRenderingMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewRenderingMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewDefinitionBodyItem3" ):
                listener.enterRuleViewDefinitionBodyItem3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewDefinitionBodyItem3" ):
                listener.exitRuleViewDefinitionBodyItem3(self)


    class RuleViewDefinitionBodyItem1Context(RuleViewDefinitionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewDefinitionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDefinitionBodyItem(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyItemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewDefinitionBodyItem1" ):
                listener.enterRuleViewDefinitionBodyItem1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewDefinitionBodyItem1" ):
                listener.exitRuleViewDefinitionBodyItem1(self)


    class RuleViewDefinitionBodyItem2Context(RuleViewDefinitionBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewDefinitionBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleElementFilterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleElementFilterMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewDefinitionBodyItem2" ):
                listener.enterRuleViewDefinitionBodyItem2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewDefinitionBodyItem2" ):
                listener.exitRuleViewDefinitionBodyItem2(self)



    def ruleViewDefinitionBodyItem(self):

        localctx = SysMLv2Parser.RuleViewDefinitionBodyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_ruleViewDefinitionBodyItem)
        try:
            self.state = 3495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleViewDefinitionBodyItem1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3492
                self.ruleDefinitionBodyItem()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleViewDefinitionBodyItem2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3493
                self.ruleElementFilterMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleViewDefinitionBodyItem3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3494
                self.ruleViewRenderingMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewRenderingMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMemberPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMemberPrefixContext,0)


        def K_RENDER(self):
            return self.getToken(SysMLv2Parser.K_RENDER, 0)

        def ruleViewRenderingUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewRenderingUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewRenderingMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewRenderingMember" ):
                listener.enterRuleViewRenderingMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewRenderingMember" ):
                listener.exitRuleViewRenderingMember(self)




    def ruleViewRenderingMember(self):

        localctx = SysMLv2Parser.RuleViewRenderingMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_ruleViewRenderingMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3497
            self.ruleMemberPrefix()
            self.state = 3498
            self.match(SysMLv2Parser.K_RENDER)
            self.state = 3499
            self.ruleViewRenderingUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewRenderingUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewRenderingUsage

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleViewRenderingUsage2Context(RuleViewRenderingUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewRenderingUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)

        def K_RENDERING(self):
            return self.getToken(SysMLv2Parser.K_RENDERING, 0)
        def ruleUsageExtensionKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleUsageExtensionKeywordContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleUsageExtensionKeywordContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewRenderingUsage2" ):
                listener.enterRuleViewRenderingUsage2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewRenderingUsage2" ):
                listener.exitRuleViewRenderingUsage2(self)


    class RuleViewRenderingUsage1Context(RuleViewRenderingUsageContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewRenderingUsageContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedReferenceSubsetting(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedReferenceSubsettingContext,0)

        def ruleUsageBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageBodyContext,0)

        def ruleFeatureSpecialization(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureSpecializationContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureSpecializationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewRenderingUsage1" ):
                listener.enterRuleViewRenderingUsage1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewRenderingUsage1" ):
                listener.exitRuleViewRenderingUsage1(self)



    def ruleViewRenderingUsage(self):

        localctx = SysMLv2Parser.RuleViewRenderingUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_ruleViewRenderingUsage)
        self._la = 0 # Token type
        try:
            self.state = 3525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171, 172]:
                localctx = SysMLv2Parser.RuleViewRenderingUsage1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3501
                self.ruleOwnedReferenceSubsetting()
                self.state = 3505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 872431616) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 113) != 0):
                    self.state = 3502
                    self.ruleFeatureSpecialization()
                    self.state = 3507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3508
                self.ruleUsageBody()
                pass
            elif token in [102, 138]:
                localctx = SysMLv2Parser.RuleViewRenderingUsage2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                if la_ == 1:
                    self.state = 3513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==138:
                        self.state = 3510
                        self.ruleUsageExtensionKeyword()
                        self.state = 3515
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3516
                    self.match(SysMLv2Parser.K_RENDERING)
                    pass

                elif la_ == 2:
                    self.state = 3518 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3517
                        self.ruleUsageExtensionKeyword()
                        self.state = 3520 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==138):
                            break

                    pass


                self.state = 3524
                self.ruleUsage()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleViewKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewUsageKeyword" ):
                listener.enterRuleViewUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewUsageKeyword" ):
                listener.exitRuleViewUsageKeyword(self)




    def ruleViewUsageKeyword(self):

        localctx = SysMLv2Parser.RuleViewUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_ruleViewUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3527
            self.ruleViewKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleViewUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewUsageKeywordContext,0)


        def ruleViewBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewBodyContext,0)


        def ruleUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageDeclarationContext,0)


        def ruleValuePart(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleValuePartContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewUsage" ):
                listener.enterRuleViewUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewUsage" ):
                listener.exitRuleViewUsage(self)




    def ruleViewUsage(self):

        localctx = SysMLv2Parser.RuleViewUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_ruleViewUsage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3529
            self.ruleOccurrenceUsagePrefix()
            self.state = 3530
            self.ruleViewUsageKeyword()
            self.state = 3532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 922763264) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 52776558596129) != 0):
                self.state = 3531
                self.ruleUsageDeclaration()


            self.state = 3535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==147 or _la==148:
                self.state = 3534
                self.ruleValuePart()


            self.state = 3537
            self.ruleViewBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleViewBody2Context(RuleViewBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(SysMLv2Parser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(SysMLv2Parser.RBRACE, 0)
        def ruleViewBodyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleViewBodyItemContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleViewBodyItemContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewBody2" ):
                listener.enterRuleViewBody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewBody2" ):
                listener.exitRuleViewBody2(self)


    class RuleViewBody1Context(RuleViewBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SEMI(self):
            return self.getToken(SysMLv2Parser.OP_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewBody1" ):
                listener.enterRuleViewBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewBody1" ):
                listener.exitRuleViewBody1(self)



    def ruleViewBody(self):

        localctx = SysMLv2Parser.RuleViewBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_ruleViewBody)
        self._la = 0 # Token type
        try:
            self.state = 3548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = SysMLv2Parser.RuleViewBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3539
                self.match(SysMLv2Parser.OP_SEMI)
                pass
            elif token in [129]:
                localctx = SysMLv2Parser.RuleViewBody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3540
                self.match(SysMLv2Parser.LBRACE)
                self.state = 3544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453518541092818) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2382369035668149281) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 188978561479) != 0):
                    self.state = 3541
                    self.ruleViewBodyItem()
                    self.state = 3546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3547
                self.match(SysMLv2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewBodyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewBodyItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleViewBodyItem1Context(RuleViewBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleDefinitionBodyItem(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionBodyItemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewBodyItem1" ):
                listener.enterRuleViewBodyItem1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewBodyItem1" ):
                listener.exitRuleViewBodyItem1(self)


    class RuleViewBodyItem4Context(RuleViewBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleViewRenderingMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewRenderingMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewBodyItem4" ):
                listener.enterRuleViewBodyItem4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewBodyItem4" ):
                listener.exitRuleViewBodyItem4(self)


    class RuleViewBodyItem3Context(RuleViewBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleExpose(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExposeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewBodyItem3" ):
                listener.enterRuleViewBodyItem3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewBodyItem3" ):
                listener.exitRuleViewBodyItem3(self)


    class RuleViewBodyItem2Context(RuleViewBodyItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleViewBodyItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleElementFilterMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleElementFilterMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewBodyItem2" ):
                listener.enterRuleViewBodyItem2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewBodyItem2" ):
                listener.exitRuleViewBodyItem2(self)



    def ruleViewBodyItem(self):

        localctx = SysMLv2Parser.RuleViewBodyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_ruleViewBodyItem)
        try:
            self.state = 3554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleViewBodyItem1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3550
                self.ruleDefinitionBodyItem()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleViewBodyItem2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3551
                self.ruleElementFilterMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleViewBodyItem3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3552
                self.ruleExpose()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleViewBodyItem4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3553
                self.ruleViewRenderingMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExposePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_EXPOSE(self):
            return self.getToken(SysMLv2Parser.K_EXPOSE, 0)

        def ruleVisibilityIndicator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleVisibilityIndicatorContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExposePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExposePrefix" ):
                listener.enterRuleExposePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExposePrefix" ):
                listener.exitRuleExposePrefix(self)




    def ruleExposePrefix(self):

        localctx = SysMLv2Parser.RuleExposePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_ruleExposePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 7) != 0):
                self.state = 3556
                self.ruleVisibilityIndicator()


            self.state = 3559
            self.match(SysMLv2Parser.K_EXPOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRelationshipBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRelationshipBodyContext,0)


        def ruleMembershipExpose(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMembershipExposeContext,0)


        def ruleNamespaceExpose(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNamespaceExposeContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExpose" ):
                listener.enterRuleExpose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExpose" ):
                listener.exitRuleExpose(self)




    def ruleExpose(self):

        localctx = SysMLv2Parser.RuleExposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_ruleExpose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 3561
                self.ruleMembershipExpose()
                pass

            elif la_ == 2:
                self.state = 3562
                self.ruleNamespaceExpose()
                pass


            self.state = 3565
            self.ruleRelationshipBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMembershipExposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleExposePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExposePrefixContext,0)


        def ruleImportedMembership(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportedMembershipContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMembershipExpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMembershipExpose" ):
                listener.enterRuleMembershipExpose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMembershipExpose" ):
                listener.exitRuleMembershipExpose(self)




    def ruleMembershipExpose(self):

        localctx = SysMLv2Parser.RuleMembershipExposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_ruleMembershipExpose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3567
            self.ruleExposePrefix()
            self.state = 3568
            self.ruleImportedMembership()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNamespaceExposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleExposePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExposePrefixContext,0)


        def ruleImportedNamespace(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImportedNamespaceContext,0)


        def ruleFilterPackage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFilterPackageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNamespaceExpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNamespaceExpose" ):
                listener.enterRuleNamespaceExpose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNamespaceExpose" ):
                listener.exitRuleNamespaceExpose(self)




    def ruleNamespaceExpose(self):

        localctx = SysMLv2Parser.RuleNamespaceExposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_ruleNamespaceExpose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3570
            self.ruleExposePrefix()
            self.state = 3573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 3571
                self.ruleImportedNamespace()
                pass

            elif la_ == 2:
                self.state = 3572
                self.ruleFilterPackage()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewpointKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VIEWPOINT(self):
            return self.getToken(SysMLv2Parser.K_VIEWPOINT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewpointKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewpointKeyword" ):
                listener.enterRuleViewpointKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewpointKeyword" ):
                listener.exitRuleViewpointKeyword(self)




    def ruleViewpointKeyword(self):

        localctx = SysMLv2Parser.RuleViewpointKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_ruleViewpointKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3575
            self.match(SysMLv2Parser.K_VIEWPOINT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewpointDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleViewpointKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewpointKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewpointDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewpointDefKeyword" ):
                listener.enterRuleViewpointDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewpointDefKeyword" ):
                listener.exitRuleViewpointDefKeyword(self)




    def ruleViewpointDefKeyword(self):

        localctx = SysMLv2Parser.RuleViewpointDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_ruleViewpointDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3577
            self.ruleViewpointKeyword()
            self.state = 3578
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewpointUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleViewpointKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewpointKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewpointUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewpointUsageKeyword" ):
                listener.enterRuleViewpointUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewpointUsageKeyword" ):
                listener.exitRuleViewpointUsageKeyword(self)




    def ruleViewpointUsageKeyword(self):

        localctx = SysMLv2Parser.RuleViewpointUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_ruleViewpointUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3580
            self.ruleViewpointKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewpointDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleViewpointDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewpointDefKeywordContext,0)


        def ruleDefinitionDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionDeclarationContext,0)


        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewpointDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewpointDefinition" ):
                listener.enterRuleViewpointDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewpointDefinition" ):
                listener.exitRuleViewpointDefinition(self)




    def ruleViewpointDefinition(self):

        localctx = SysMLv2Parser.RuleViewpointDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_ruleViewpointDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3582
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3583
            self.ruleViewpointDefKeyword()
            self.state = 3584
            self.ruleDefinitionDeclaration()
            self.state = 3585
            self.ruleRequirementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleViewpointUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleViewpointUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleViewpointUsageKeywordContext,0)


        def ruleConstraintUsageDeclaration(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConstraintUsageDeclarationContext,0)


        def ruleRequirementBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRequirementBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleViewpointUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleViewpointUsage" ):
                listener.enterRuleViewpointUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleViewpointUsage" ):
                listener.exitRuleViewpointUsage(self)




    def ruleViewpointUsage(self):

        localctx = SysMLv2Parser.RuleViewpointUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_ruleViewpointUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3587
            self.ruleOccurrenceUsagePrefix()
            self.state = 3588
            self.ruleViewpointUsageKeyword()
            self.state = 3589
            self.ruleConstraintUsageDeclaration()
            self.state = 3590
            self.ruleRequirementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRenderingKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_RENDERING(self):
            return self.getToken(SysMLv2Parser.K_RENDERING, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRenderingKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRenderingKeyword" ):
                listener.enterRuleRenderingKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRenderingKeyword" ):
                listener.exitRuleRenderingKeyword(self)




    def ruleRenderingKeyword(self):

        localctx = SysMLv2Parser.RuleRenderingKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_ruleRenderingKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3592
            self.match(SysMLv2Parser.K_RENDERING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRenderingDefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRenderingKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRenderingKeywordContext,0)


        def K_DEF(self):
            return self.getToken(SysMLv2Parser.K_DEF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRenderingDefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRenderingDefKeyword" ):
                listener.enterRuleRenderingDefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRenderingDefKeyword" ):
                listener.exitRuleRenderingDefKeyword(self)




    def ruleRenderingDefKeyword(self):

        localctx = SysMLv2Parser.RuleRenderingDefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_ruleRenderingDefKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3594
            self.ruleRenderingKeyword()
            self.state = 3595
            self.match(SysMLv2Parser.K_DEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRenderingDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceDefinitionPrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceDefinitionPrefixContext,0)


        def ruleRenderingDefKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRenderingDefKeywordContext,0)


        def ruleDefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleDefinitionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRenderingDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRenderingDefinition" ):
                listener.enterRuleRenderingDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRenderingDefinition" ):
                listener.exitRuleRenderingDefinition(self)




    def ruleRenderingDefinition(self):

        localctx = SysMLv2Parser.RuleRenderingDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_ruleRenderingDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3597
            self.ruleOccurrenceDefinitionPrefix()
            self.state = 3598
            self.ruleRenderingDefKeyword()
            self.state = 3599
            self.ruleDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRenderingUsageKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRenderingKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRenderingKeywordContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRenderingUsageKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRenderingUsageKeyword" ):
                listener.enterRuleRenderingUsageKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRenderingUsageKeyword" ):
                listener.exitRuleRenderingUsageKeyword(self)




    def ruleRenderingUsageKeyword(self):

        localctx = SysMLv2Parser.RuleRenderingUsageKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_ruleRenderingUsageKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3601
            self.ruleRenderingKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRenderingUsageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOccurrenceUsagePrefix(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOccurrenceUsagePrefixContext,0)


        def ruleRenderingUsageKeyword(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRenderingUsageKeywordContext,0)


        def ruleUsage(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUsageContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRenderingUsage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRenderingUsage" ):
                listener.enterRuleRenderingUsage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRenderingUsage" ):
                listener.exitRuleRenderingUsage(self)




    def ruleRenderingUsage(self):

        localctx = SysMLv2Parser.RuleRenderingUsageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_ruleRenderingUsage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3603
            self.ruleOccurrenceUsagePrefix()
            self.state = 3604
            self.ruleRenderingUsageKeyword()
            self.state = 3605
            self.ruleUsage()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleCalculationBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCalculationBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExpressionBody" ):
                listener.enterRuleExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExpressionBody" ):
                listener.exitRuleExpressionBody(self)




    def ruleExpressionBody(self):

        localctx = SysMLv2Parser.RuleExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_ruleExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3607
            self.ruleCalculationBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedExpressionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedExpressionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedExpressionMember" ):
                listener.enterRuleOwnedExpressionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedExpressionMember" ):
                listener.exitRuleOwnedExpressionMember(self)




    def ruleOwnedExpressionMember(self):

        localctx = SysMLv2Parser.RuleOwnedExpressionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_ruleOwnedExpressionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3609
            self.ruleOwnedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleConditionalExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConditionalExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedExpression" ):
                listener.enterRuleOwnedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedExpression" ):
                listener.exitRuleOwnedExpression(self)




    def ruleOwnedExpression(self):

        localctx = SysMLv2Parser.RuleOwnedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_ruleOwnedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3611
            self.ruleConditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedExpressionReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedExpressionReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedExpressionReference" ):
                listener.enterRuleOwnedExpressionReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedExpressionReference" ):
                listener.exitRuleOwnedExpressionReference(self)




    def ruleOwnedExpressionReference(self):

        localctx = SysMLv2Parser.RuleOwnedExpressionReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_ruleOwnedExpressionReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3613
            self.ruleOwnedExpressionMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConditionalExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleConditionalExpression1Context(RuleConditionalExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleConditionalExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleNullCoalescingExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNullCoalescingExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConditionalExpression1" ):
                listener.enterRuleConditionalExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConditionalExpression1" ):
                listener.exitRuleConditionalExpression1(self)


    class RuleConditionalExpression2Context(RuleConditionalExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleConditionalExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleConditionalOperator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleConditionalOperatorContext,0)

        def ruleNullCoalescingExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNullCoalescingExpressionContext,0)

        def OP_QMARK(self):
            return self.getToken(SysMLv2Parser.OP_QMARK, 0)
        def ruleOwnedExpressionReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleOwnedExpressionReferenceContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionReferenceContext,i)

        def K_ELSE(self):
            return self.getToken(SysMLv2Parser.K_ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConditionalExpression2" ):
                listener.enterRuleConditionalExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConditionalExpression2" ):
                listener.exitRuleConditionalExpression2(self)



    def ruleConditionalExpression(self):

        localctx = SysMLv2Parser.RuleConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_ruleConditionalExpression)
        try:
            self.state = 3623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 87, 109, 110, 111, 113, 114, 115, 129, 133, 135, 137, 142, 149, 150, 164, 165, 169, 170, 171, 172, 173]:
                localctx = SysMLv2Parser.RuleConditionalExpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3615
                self.ruleNullCoalescingExpression()
                pass
            elif token in [66]:
                localctx = SysMLv2Parser.RuleConditionalExpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3616
                self.ruleConditionalOperator()
                self.state = 3617
                self.ruleNullCoalescingExpression()
                self.state = 3618
                self.match(SysMLv2Parser.OP_QMARK)
                self.state = 3619
                self.ruleOwnedExpressionReference()
                self.state = 3620
                self.match(SysMLv2Parser.K_ELSE)
                self.state = 3621
                self.ruleOwnedExpressionReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConditionalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IF(self):
            return self.getToken(SysMLv2Parser.K_IF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConditionalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConditionalOperator" ):
                listener.enterRuleConditionalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConditionalOperator" ):
                listener.exitRuleConditionalOperator(self)




    def ruleConditionalOperator(self):

        localctx = SysMLv2Parser.RuleConditionalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_ruleConditionalOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3625
            self.match(SysMLv2Parser.K_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNullCoalescingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleImpliesExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImpliesExpressionContext,0)


        def ruleNullCoalescingOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleNullCoalescingOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleNullCoalescingOperatorContext,i)


        def ruleImpliesExpressionReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleImpliesExpressionReferenceContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleImpliesExpressionReferenceContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNullCoalescingExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNullCoalescingExpression" ):
                listener.enterRuleNullCoalescingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNullCoalescingExpression" ):
                listener.exitRuleNullCoalescingExpression(self)




    def ruleNullCoalescingExpression(self):

        localctx = SysMLv2Parser.RuleNullCoalescingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_ruleNullCoalescingExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3627
            self.ruleImpliesExpression()
            self.state = 3633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==154:
                self.state = 3628
                self.ruleNullCoalescingOperator()
                self.state = 3629
                self.ruleImpliesExpressionReference()
                self.state = 3635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNullCoalescingOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_QMARK_QMARK(self):
            return self.getToken(SysMLv2Parser.OP_QMARK_QMARK, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNullCoalescingOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNullCoalescingOperator" ):
                listener.enterRuleNullCoalescingOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNullCoalescingOperator" ):
                listener.exitRuleNullCoalescingOperator(self)




    def ruleNullCoalescingOperator(self):

        localctx = SysMLv2Parser.RuleNullCoalescingOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_ruleNullCoalescingOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3636
            self.match(SysMLv2Parser.OP_QMARK_QMARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleImpliesExpressionReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleImpliesExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImpliesExpressionMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleImpliesExpressionReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleImpliesExpressionReference" ):
                listener.enterRuleImpliesExpressionReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleImpliesExpressionReference" ):
                listener.exitRuleImpliesExpressionReference(self)




    def ruleImpliesExpressionReference(self):

        localctx = SysMLv2Parser.RuleImpliesExpressionReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_ruleImpliesExpressionReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3638
            self.ruleImpliesExpressionMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleImpliesExpressionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleImpliesExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleImpliesExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleImpliesExpressionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleImpliesExpressionMember" ):
                listener.enterRuleImpliesExpressionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleImpliesExpressionMember" ):
                listener.exitRuleImpliesExpressionMember(self)




    def ruleImpliesExpressionMember(self):

        localctx = SysMLv2Parser.RuleImpliesExpressionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_ruleImpliesExpressionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3640
            self.ruleImpliesExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleImpliesExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOrExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOrExpressionContext,0)


        def ruleImpliesOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleImpliesOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleImpliesOperatorContext,i)


        def ruleOrExpressionReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleOrExpressionReferenceContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleOrExpressionReferenceContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleImpliesExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleImpliesExpression" ):
                listener.enterRuleImpliesExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleImpliesExpression" ):
                listener.exitRuleImpliesExpression(self)




    def ruleImpliesExpression(self):

        localctx = SysMLv2Parser.RuleImpliesExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_ruleImpliesExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3642
            self.ruleOrExpression()
            self.state = 3648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==105:
                self.state = 3643
                self.ruleImpliesOperator()
                self.state = 3644
                self.ruleOrExpressionReference()
                self.state = 3650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleImpliesOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IMPLIES(self):
            return self.getToken(SysMLv2Parser.K_IMPLIES, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleImpliesOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleImpliesOperator" ):
                listener.enterRuleImpliesOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleImpliesOperator" ):
                listener.exitRuleImpliesOperator(self)




    def ruleImpliesOperator(self):

        localctx = SysMLv2Parser.RuleImpliesOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_ruleImpliesOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3651
            self.match(SysMLv2Parser.K_IMPLIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOrExpressionReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOrExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOrExpressionMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOrExpressionReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOrExpressionReference" ):
                listener.enterRuleOrExpressionReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOrExpressionReference" ):
                listener.exitRuleOrExpressionReference(self)




    def ruleOrExpressionReference(self):

        localctx = SysMLv2Parser.RuleOrExpressionReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_ruleOrExpressionReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3653
            self.ruleOrExpressionMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOrExpressionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOrExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOrExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOrExpressionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOrExpressionMember" ):
                listener.enterRuleOrExpressionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOrExpressionMember" ):
                listener.exitRuleOrExpressionMember(self)




    def ruleOrExpressionMember(self):

        localctx = SysMLv2Parser.RuleOrExpressionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_ruleOrExpressionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3655
            self.ruleOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleXorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleXorExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleXorExpressionContext,i)


        def ruleOrOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleOrOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleOrOperatorContext,i)


        def ruleConditionalOrOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleConditionalOrOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleConditionalOrOperatorContext,i)


        def ruleXorExpressionReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleXorExpressionReferenceContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleXorExpressionReferenceContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOrExpression" ):
                listener.enterRuleOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOrExpression" ):
                listener.exitRuleOrExpression(self)




    def ruleOrExpression(self):

        localctx = SysMLv2Parser.RuleOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_ruleOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3657
            self.ruleXorExpression()
            self.state = 3668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==106 or _la==155:
                self.state = 3664
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [155]:
                    self.state = 3658
                    self.ruleOrOperator()
                    self.state = 3659
                    self.ruleXorExpression()
                    pass
                elif token in [106]:
                    self.state = 3661
                    self.ruleConditionalOrOperator()
                    self.state = 3662
                    self.ruleXorExpressionReference()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOrOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_BAR(self):
            return self.getToken(SysMLv2Parser.OP_BAR, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOrOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOrOperator" ):
                listener.enterRuleOrOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOrOperator" ):
                listener.exitRuleOrOperator(self)




    def ruleOrOperator(self):

        localctx = SysMLv2Parser.RuleOrOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_ruleOrOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3671
            self.match(SysMLv2Parser.OP_BAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConditionalOrOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OR(self):
            return self.getToken(SysMLv2Parser.K_OR, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConditionalOrOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConditionalOrOperator" ):
                listener.enterRuleConditionalOrOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConditionalOrOperator" ):
                listener.exitRuleConditionalOrOperator(self)




    def ruleConditionalOrOperator(self):

        localctx = SysMLv2Parser.RuleConditionalOrOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_ruleConditionalOrOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3673
            self.match(SysMLv2Parser.K_OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleXorExpressionReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleXorExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleXorExpressionMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleXorExpressionReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleXorExpressionReference" ):
                listener.enterRuleXorExpressionReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleXorExpressionReference" ):
                listener.exitRuleXorExpressionReference(self)




    def ruleXorExpressionReference(self):

        localctx = SysMLv2Parser.RuleXorExpressionReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_ruleXorExpressionReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3675
            self.ruleXorExpressionMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleXorExpressionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleXorExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleXorExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleXorExpressionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleXorExpressionMember" ):
                listener.enterRuleXorExpressionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleXorExpressionMember" ):
                listener.exitRuleXorExpressionMember(self)




    def ruleXorExpressionMember(self):

        localctx = SysMLv2Parser.RuleXorExpressionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_ruleXorExpressionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3677
            self.ruleXorExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleXorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAndExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAndExpressionContext,i)


        def ruleXorOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleXorOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleXorOperatorContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleXorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleXorExpression" ):
                listener.enterRuleXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleXorExpression" ):
                listener.exitRuleXorExpression(self)




    def ruleXorExpression(self):

        localctx = SysMLv2Parser.RuleXorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_ruleXorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3679
            self.ruleAndExpression()
            self.state = 3685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==107:
                self.state = 3680
                self.ruleXorOperator()
                self.state = 3681
                self.ruleAndExpression()
                self.state = 3687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleXorOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_XOR(self):
            return self.getToken(SysMLv2Parser.K_XOR, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleXorOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleXorOperator" ):
                listener.enterRuleXorOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleXorOperator" ):
                listener.exitRuleXorOperator(self)




    def ruleXorOperator(self):

        localctx = SysMLv2Parser.RuleXorOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_ruleXorOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3688
            self.match(SysMLv2Parser.K_XOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEqualityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleEqualityExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleEqualityExpressionContext,i)


        def ruleAndOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAndOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAndOperatorContext,i)


        def ruleConditionalAndOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleConditionalAndOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleConditionalAndOperatorContext,i)


        def ruleEqualityExpressionReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleEqualityExpressionReferenceContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleEqualityExpressionReferenceContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAndExpression" ):
                listener.enterRuleAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAndExpression" ):
                listener.exitRuleAndExpression(self)




    def ruleAndExpression(self):

        localctx = SysMLv2Parser.RuleAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_ruleAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3690
            self.ruleEqualityExpression()
            self.state = 3701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==108 or _la==156:
                self.state = 3697
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [156]:
                    self.state = 3691
                    self.ruleAndOperator()
                    self.state = 3692
                    self.ruleEqualityExpression()
                    pass
                elif token in [108]:
                    self.state = 3694
                    self.ruleConditionalAndOperator()
                    self.state = 3695
                    self.ruleEqualityExpressionReference()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAndOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_AND(self):
            return self.getToken(SysMLv2Parser.OP_AND, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAndOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAndOperator" ):
                listener.enterRuleAndOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAndOperator" ):
                listener.exitRuleAndOperator(self)




    def ruleAndOperator(self):

        localctx = SysMLv2Parser.RuleAndOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_ruleAndOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3704
            self.match(SysMLv2Parser.OP_AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleConditionalAndOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_AND(self):
            return self.getToken(SysMLv2Parser.K_AND, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleConditionalAndOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleConditionalAndOperator" ):
                listener.enterRuleConditionalAndOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleConditionalAndOperator" ):
                listener.exitRuleConditionalAndOperator(self)




    def ruleConditionalAndOperator(self):

        localctx = SysMLv2Parser.RuleConditionalAndOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_ruleConditionalAndOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3706
            self.match(SysMLv2Parser.K_AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEqualityExpressionReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEqualityExpressionMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEqualityExpressionMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEqualityExpressionReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEqualityExpressionReference" ):
                listener.enterRuleEqualityExpressionReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEqualityExpressionReference" ):
                listener.exitRuleEqualityExpressionReference(self)




    def ruleEqualityExpressionReference(self):

        localctx = SysMLv2Parser.RuleEqualityExpressionReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_ruleEqualityExpressionReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3708
            self.ruleEqualityExpressionMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEqualityExpressionMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEqualityExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEqualityExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEqualityExpressionMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEqualityExpressionMember" ):
                listener.enterRuleEqualityExpressionMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEqualityExpressionMember" ):
                listener.exitRuleEqualityExpressionMember(self)




    def ruleEqualityExpressionMember(self):

        localctx = SysMLv2Parser.RuleEqualityExpressionMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_ruleEqualityExpressionMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3710
            self.ruleEqualityExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleClassificationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleClassificationExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleClassificationExpressionContext,i)


        def ruleEqualityOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleEqualityOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleEqualityOperatorContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEqualityExpression" ):
                listener.enterRuleEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEqualityExpression" ):
                listener.exitRuleEqualityExpression(self)




    def ruleEqualityExpression(self):

        localctx = SysMLv2Parser.RuleEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_ruleEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3712
            self.ruleClassificationExpression()
            self.state = 3718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 15) != 0):
                self.state = 3713
                self.ruleEqualityOperator()
                self.state = 3714
                self.ruleClassificationExpression()
                self.state = 3720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEqualityOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEqualityOperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleEqualityOperator2Context(RuleEqualityOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleEqualityOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_BANG_EQ(self):
            return self.getToken(SysMLv2Parser.OP_BANG_EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEqualityOperator2" ):
                listener.enterRuleEqualityOperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEqualityOperator2" ):
                listener.exitRuleEqualityOperator2(self)


    class RuleEqualityOperator3Context(RuleEqualityOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleEqualityOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_EQ_EQ_EQ(self):
            return self.getToken(SysMLv2Parser.OP_EQ_EQ_EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEqualityOperator3" ):
                listener.enterRuleEqualityOperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEqualityOperator3" ):
                listener.exitRuleEqualityOperator3(self)


    class RuleEqualityOperator4Context(RuleEqualityOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleEqualityOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_BANG_EQ_EQ(self):
            return self.getToken(SysMLv2Parser.OP_BANG_EQ_EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEqualityOperator4" ):
                listener.enterRuleEqualityOperator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEqualityOperator4" ):
                listener.exitRuleEqualityOperator4(self)


    class RuleEqualityOperator1Context(RuleEqualityOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleEqualityOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_EQ_EQ(self):
            return self.getToken(SysMLv2Parser.OP_EQ_EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEqualityOperator1" ):
                listener.enterRuleEqualityOperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEqualityOperator1" ):
                listener.exitRuleEqualityOperator1(self)



    def ruleEqualityOperator(self):

        localctx = SysMLv2Parser.RuleEqualityOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_ruleEqualityOperator)
        try:
            self.state = 3725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [157]:
                localctx = SysMLv2Parser.RuleEqualityOperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3721
                self.match(SysMLv2Parser.OP_EQ_EQ)
                pass
            elif token in [158]:
                localctx = SysMLv2Parser.RuleEqualityOperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3722
                self.match(SysMLv2Parser.OP_BANG_EQ)
                pass
            elif token in [159]:
                localctx = SysMLv2Parser.RuleEqualityOperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3723
                self.match(SysMLv2Parser.OP_EQ_EQ_EQ)
                pass
            elif token in [160]:
                localctx = SysMLv2Parser.RuleEqualityOperator4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3724
                self.match(SysMLv2Parser.OP_BANG_EQ_EQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleClassificationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleClassificationExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleClassificationExpression1Context(RuleClassificationExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleClassificationExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleRelationalExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRelationalExpressionContext,0)

        def ruleClassificationTestOperator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleClassificationTestOperatorContext,0)

        def ruleTypeReferenceMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypeReferenceMemberContext,0)

        def ruleCastOperator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCastOperatorContext,0)

        def ruleTypeResultMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypeResultMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClassificationExpression1" ):
                listener.enterRuleClassificationExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClassificationExpression1" ):
                listener.exitRuleClassificationExpression1(self)


    class RuleClassificationExpression4Context(RuleClassificationExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleClassificationExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSelfReferenceExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSelfReferenceExpressionContext,0)

        def ruleCastOperator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleCastOperatorContext,0)

        def ruleTypeResultMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypeResultMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClassificationExpression4" ):
                listener.enterRuleClassificationExpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClassificationExpression4" ):
                listener.exitRuleClassificationExpression4(self)


    class RuleClassificationExpression5Context(RuleClassificationExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleClassificationExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMetadataReference(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataReferenceContext,0)

        def ruleMetaCastOperator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetaCastOperatorContext,0)

        def ruleTypeResultMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypeResultMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClassificationExpression5" ):
                listener.enterRuleClassificationExpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClassificationExpression5" ):
                listener.exitRuleClassificationExpression5(self)


    class RuleClassificationExpression2Context(RuleClassificationExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleClassificationExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleSelfReferenceExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSelfReferenceExpressionContext,0)

        def ruleClassificationTestOperator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleClassificationTestOperatorContext,0)

        def ruleTypeReferenceMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypeReferenceMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClassificationExpression2" ):
                listener.enterRuleClassificationExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClassificationExpression2" ):
                listener.exitRuleClassificationExpression2(self)


    class RuleClassificationExpression3Context(RuleClassificationExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleClassificationExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMetadataReference(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataReferenceContext,0)

        def ruleMetaClassificationTestOperator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetaClassificationTestOperatorContext,0)

        def ruleTypeReferenceMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypeReferenceMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClassificationExpression3" ):
                listener.enterRuleClassificationExpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClassificationExpression3" ):
                listener.exitRuleClassificationExpression3(self)



    def ruleClassificationExpression(self):

        localctx = SysMLv2Parser.RuleClassificationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_ruleClassificationExpression)
        try:
            self.state = 3752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleClassificationExpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3727
                self.ruleRelationalExpression()
                self.state = 3734
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [109, 110, 137]:
                    self.state = 3728
                    self.ruleClassificationTestOperator()
                    self.state = 3729
                    self.ruleTypeReferenceMember()
                    pass
                elif token in [111]:
                    self.state = 3731
                    self.ruleCastOperator()
                    self.state = 3732
                    self.ruleTypeResultMember()
                    pass
                elif token in [2, 3, 27, 41, 50, 53, 57, 60, 66, 67, 77, 79, 105, 106, 107, 108, 129, 130, 131, 134, 135, 136, 153, 154, 155, 156, 157, 158, 159, 160]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleClassificationExpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3736
                self.ruleSelfReferenceExpression()
                self.state = 3737
                self.ruleClassificationTestOperator()
                self.state = 3738
                self.ruleTypeReferenceMember()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleClassificationExpression3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3740
                self.ruleMetadataReference()
                self.state = 3741
                self.ruleMetaClassificationTestOperator()
                self.state = 3742
                self.ruleTypeReferenceMember()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleClassificationExpression4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3744
                self.ruleSelfReferenceExpression()
                self.state = 3745
                self.ruleCastOperator()
                self.state = 3746
                self.ruleTypeResultMember()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleClassificationExpression5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3748
                self.ruleMetadataReference()
                self.state = 3749
                self.ruleMetaCastOperator()
                self.state = 3750
                self.ruleTypeResultMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleClassificationTestOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleClassificationTestOperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleClassificationTestOperator2Context(RuleClassificationTestOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleClassificationTestOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ISTYPE(self):
            return self.getToken(SysMLv2Parser.K_ISTYPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClassificationTestOperator2" ):
                listener.enterRuleClassificationTestOperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClassificationTestOperator2" ):
                listener.exitRuleClassificationTestOperator2(self)


    class RuleClassificationTestOperator3Context(RuleClassificationTestOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleClassificationTestOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_AT(self):
            return self.getToken(SysMLv2Parser.OP_AT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClassificationTestOperator3" ):
                listener.enterRuleClassificationTestOperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClassificationTestOperator3" ):
                listener.exitRuleClassificationTestOperator3(self)


    class RuleClassificationTestOperator1Context(RuleClassificationTestOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleClassificationTestOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HASTYPE(self):
            return self.getToken(SysMLv2Parser.K_HASTYPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClassificationTestOperator1" ):
                listener.enterRuleClassificationTestOperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClassificationTestOperator1" ):
                listener.exitRuleClassificationTestOperator1(self)



    def ruleClassificationTestOperator(self):

        localctx = SysMLv2Parser.RuleClassificationTestOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_ruleClassificationTestOperator)
        try:
            self.state = 3757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109]:
                localctx = SysMLv2Parser.RuleClassificationTestOperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3754
                self.match(SysMLv2Parser.K_HASTYPE)
                pass
            elif token in [110]:
                localctx = SysMLv2Parser.RuleClassificationTestOperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3755
                self.match(SysMLv2Parser.K_ISTYPE)
                pass
            elif token in [137]:
                localctx = SysMLv2Parser.RuleClassificationTestOperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3756
                self.match(SysMLv2Parser.OP_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetaClassificationTestOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_AT_AT(self):
            return self.getToken(SysMLv2Parser.OP_AT_AT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetaClassificationTestOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetaClassificationTestOperator" ):
                listener.enterRuleMetaClassificationTestOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetaClassificationTestOperator" ):
                listener.exitRuleMetaClassificationTestOperator(self)




    def ruleMetaClassificationTestOperator(self):

        localctx = SysMLv2Parser.RuleMetaClassificationTestOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_ruleMetaClassificationTestOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3759
            self.match(SysMLv2Parser.OP_AT_AT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleCastOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_AS(self):
            return self.getToken(SysMLv2Parser.K_AS, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleCastOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleCastOperator" ):
                listener.enterRuleCastOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleCastOperator" ):
                listener.exitRuleCastOperator(self)




    def ruleCastOperator(self):

        localctx = SysMLv2Parser.RuleCastOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_ruleCastOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            self.match(SysMLv2Parser.K_AS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetaCastOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_META(self):
            return self.getToken(SysMLv2Parser.K_META, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetaCastOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetaCastOperator" ):
                listener.enterRuleMetaCastOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetaCastOperator" ):
                listener.exitRuleMetaCastOperator(self)




    def ruleMetaCastOperator(self):

        localctx = SysMLv2Parser.RuleMetaCastOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_ruleMetaCastOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3763
            self.match(SysMLv2Parser.K_META)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataReference" ):
                listener.enterRuleMetadataReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataReference" ):
                listener.exitRuleMetadataReference(self)




    def ruleMetadataReference(self):

        localctx = SysMLv2Parser.RuleMetadataReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_ruleMetadataReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTypeReferenceMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTypeReference(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypeReferenceContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTypeReferenceMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTypeReferenceMember" ):
                listener.enterRuleTypeReferenceMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTypeReferenceMember" ):
                listener.exitRuleTypeReferenceMember(self)




    def ruleTypeReferenceMember(self):

        localctx = SysMLv2Parser.RuleTypeReferenceMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_ruleTypeReferenceMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3767
            self.ruleTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTypeResultMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleTypeReference(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypeReferenceContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTypeResultMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTypeResultMember" ):
                listener.enterRuleTypeResultMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTypeResultMember" ):
                listener.exitRuleTypeResultMember(self)




    def ruleTypeResultMember(self):

        localctx = SysMLv2Parser.RuleTypeResultMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_ruleTypeResultMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3769
            self.ruleTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleReferenceTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferenceTypingContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTypeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTypeReference" ):
                listener.enterRuleTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTypeReference" ):
                listener.exitRuleTypeReference(self)




    def ruleTypeReference(self):

        localctx = SysMLv2Parser.RuleTypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_ruleTypeReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3771
            self.ruleReferenceTyping()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleReferenceTypingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleReferenceTyping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleReferenceTyping" ):
                listener.enterRuleReferenceTyping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleReferenceTyping" ):
                listener.exitRuleReferenceTyping(self)




    def ruleReferenceTyping(self):

        localctx = SysMLv2Parser.RuleReferenceTypingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_ruleReferenceTyping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3773
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSelfReferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleSelfReferenceMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSelfReferenceMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSelfReferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSelfReferenceExpression" ):
                listener.enterRuleSelfReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSelfReferenceExpression" ):
                listener.exitRuleSelfReferenceExpression(self)




    def ruleSelfReferenceExpression(self):

        localctx = SysMLv2Parser.RuleSelfReferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_ruleSelfReferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3775
            self.ruleSelfReferenceMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSelfReferenceMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleEmptyFeature(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleEmptyFeatureContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSelfReferenceMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSelfReferenceMember" ):
                listener.enterRuleSelfReferenceMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSelfReferenceMember" ):
                listener.exitRuleSelfReferenceMember(self)




    def ruleSelfReferenceMember(self):

        localctx = SysMLv2Parser.RuleSelfReferenceMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_ruleSelfReferenceMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3777
            self.ruleEmptyFeature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEmptyFeatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEmptyFeature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEmptyFeature" ):
                listener.enterRuleEmptyFeature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEmptyFeature" ):
                listener.exitRuleEmptyFeature(self)




    def ruleEmptyFeature(self):

        localctx = SysMLv2Parser.RuleEmptyFeatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_ruleEmptyFeature)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleRangeExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleRangeExpressionContext,i)


        def ruleRelationalOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleRelationalOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleRelationalOperatorContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRelationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRelationalExpression" ):
                listener.enterRuleRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRelationalExpression" ):
                listener.exitRuleRelationalExpression(self)




    def ruleRelationalExpression(self):

        localctx = SysMLv2Parser.RuleRelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_ruleRelationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3781
            self.ruleRangeExpression()
            self.state = 3787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 103079215107) != 0):
                self.state = 3782
                self.ruleRelationalOperator()
                self.state = 3783
                self.ruleRangeExpression()
                self.state = 3789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRelationalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRelationalOperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleRelationalOperator4Context(RuleRelationalOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRelationalOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_RANGLE_EQ(self):
            return self.getToken(SysMLv2Parser.OP_RANGLE_EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRelationalOperator4" ):
                listener.enterRuleRelationalOperator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRelationalOperator4" ):
                listener.exitRuleRelationalOperator4(self)


    class RuleRelationalOperator3Context(RuleRelationalOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRelationalOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_LANGLE_EQ(self):
            return self.getToken(SysMLv2Parser.OP_LANGLE_EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRelationalOperator3" ):
                listener.enterRuleRelationalOperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRelationalOperator3" ):
                listener.exitRuleRelationalOperator3(self)


    class RuleRelationalOperator2Context(RuleRelationalOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRelationalOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGLE(self):
            return self.getToken(SysMLv2Parser.RANGLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRelationalOperator2" ):
                listener.enterRuleRelationalOperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRelationalOperator2" ):
                listener.exitRuleRelationalOperator2(self)


    class RuleRelationalOperator1Context(RuleRelationalOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRelationalOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LANGLE(self):
            return self.getToken(SysMLv2Parser.LANGLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRelationalOperator1" ):
                listener.enterRuleRelationalOperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRelationalOperator1" ):
                listener.exitRuleRelationalOperator1(self)



    def ruleRelationalOperator(self):

        localctx = SysMLv2Parser.RuleRelationalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_ruleRelationalOperator)
        try:
            self.state = 3794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                localctx = SysMLv2Parser.RuleRelationalOperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3790
                self.match(SysMLv2Parser.LANGLE)
                pass
            elif token in [128]:
                localctx = SysMLv2Parser.RuleRelationalOperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3791
                self.match(SysMLv2Parser.RANGLE)
                pass
            elif token in [162]:
                localctx = SysMLv2Parser.RuleRelationalOperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3792
                self.match(SysMLv2Parser.OP_LANGLE_EQ)
                pass
            elif token in [163]:
                localctx = SysMLv2Parser.RuleRelationalOperator4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3793
                self.match(SysMLv2Parser.OP_RANGLE_EQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleAdditiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAdditiveExpressionContext,i)


        def OP_DOT_DOT(self):
            return self.getToken(SysMLv2Parser.OP_DOT_DOT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRangeExpression" ):
                listener.enterRuleRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRangeExpression" ):
                listener.exitRuleRangeExpression(self)




    def ruleRangeExpression(self):

        localctx = SysMLv2Parser.RuleRangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_ruleRangeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3796
            self.ruleAdditiveExpression()
            self.state = 3799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 3797
                self.match(SysMLv2Parser.OP_DOT_DOT)
                self.state = 3798
                self.ruleAdditiveExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleMultiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleMultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicativeExpressionContext,i)


        def ruleAdditiveOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleAdditiveOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleAdditiveOperatorContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAdditiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAdditiveExpression" ):
                listener.enterRuleAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAdditiveExpression" ):
                listener.exitRuleAdditiveExpression(self)




    def ruleAdditiveExpression(self):

        localctx = SysMLv2Parser.RuleAdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_ruleAdditiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3801
            self.ruleMultiplicativeExpression()
            self.state = 3807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==164 or _la==165:
                self.state = 3802
                self.ruleAdditiveOperator()
                self.state = 3803
                self.ruleMultiplicativeExpression()
                self.state = 3809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleAdditiveOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleAdditiveOperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleAdditiveOperator1Context(RuleAdditiveOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleAdditiveOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_PLUS(self):
            return self.getToken(SysMLv2Parser.OP_PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAdditiveOperator1" ):
                listener.enterRuleAdditiveOperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAdditiveOperator1" ):
                listener.exitRuleAdditiveOperator1(self)


    class RuleAdditiveOperator2Context(RuleAdditiveOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleAdditiveOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_MINUS(self):
            return self.getToken(SysMLv2Parser.OP_MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleAdditiveOperator2" ):
                listener.enterRuleAdditiveOperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleAdditiveOperator2" ):
                listener.exitRuleAdditiveOperator2(self)



    def ruleAdditiveOperator(self):

        localctx = SysMLv2Parser.RuleAdditiveOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_ruleAdditiveOperator)
        try:
            self.state = 3812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [164]:
                localctx = SysMLv2Parser.RuleAdditiveOperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3810
                self.match(SysMLv2Parser.OP_PLUS)
                pass
            elif token in [165]:
                localctx = SysMLv2Parser.RuleAdditiveOperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3811
                self.match(SysMLv2Parser.OP_MINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleExponentiationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleExponentiationExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleExponentiationExpressionContext,i)


        def ruleMultiplicativeOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleMultiplicativeOperatorContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleMultiplicativeOperatorContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMultiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicativeExpression" ):
                listener.enterRuleMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicativeExpression" ):
                listener.exitRuleMultiplicativeExpression(self)




    def ruleMultiplicativeExpression(self):

        localctx = SysMLv2Parser.RuleMultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_ruleMultiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3814
            self.ruleExponentiationExpression()
            self.state = 3820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 50331649) != 0):
                self.state = 3815
                self.ruleMultiplicativeOperator()
                self.state = 3816
                self.ruleExponentiationExpression()
                self.state = 3822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMultiplicativeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMultiplicativeOperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleMultiplicativeOperator1Context(RuleMultiplicativeOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMultiplicativeOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_STAR(self):
            return self.getToken(SysMLv2Parser.OP_STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicativeOperator1" ):
                listener.enterRuleMultiplicativeOperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicativeOperator1" ):
                listener.exitRuleMultiplicativeOperator1(self)


    class RuleMultiplicativeOperator3Context(RuleMultiplicativeOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMultiplicativeOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_PERCENT(self):
            return self.getToken(SysMLv2Parser.OP_PERCENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicativeOperator3" ):
                listener.enterRuleMultiplicativeOperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicativeOperator3" ):
                listener.exitRuleMultiplicativeOperator3(self)


    class RuleMultiplicativeOperator2Context(RuleMultiplicativeOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleMultiplicativeOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_SLASH(self):
            return self.getToken(SysMLv2Parser.OP_SLASH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMultiplicativeOperator2" ):
                listener.enterRuleMultiplicativeOperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMultiplicativeOperator2" ):
                listener.exitRuleMultiplicativeOperator2(self)



    def ruleMultiplicativeOperator(self):

        localctx = SysMLv2Parser.RuleMultiplicativeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_ruleMultiplicativeOperator)
        try:
            self.state = 3826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                localctx = SysMLv2Parser.RuleMultiplicativeOperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3823
                self.match(SysMLv2Parser.OP_STAR)
                pass
            elif token in [166]:
                localctx = SysMLv2Parser.RuleMultiplicativeOperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3824
                self.match(SysMLv2Parser.OP_SLASH)
                pass
            elif token in [167]:
                localctx = SysMLv2Parser.RuleMultiplicativeOperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3825
                self.match(SysMLv2Parser.OP_PERCENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExponentiationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleUnaryExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUnaryExpressionContext,0)


        def ruleExponentiationOperator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExponentiationOperatorContext,0)


        def ruleExponentiationExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExponentiationExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExponentiationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExponentiationExpression" ):
                listener.enterRuleExponentiationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExponentiationExpression" ):
                listener.exitRuleExponentiationExpression(self)




    def ruleExponentiationExpression(self):

        localctx = SysMLv2Parser.RuleExponentiationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_ruleExponentiationExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3828
            self.ruleUnaryExpression()
            self.state = 3832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141 or _la==168:
                self.state = 3829
                self.ruleExponentiationOperator()
                self.state = 3830
                self.ruleExponentiationExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExponentiationOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExponentiationOperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleExponentiationOperator1Context(RuleExponentiationOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleExponentiationOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_STAR_STAR(self):
            return self.getToken(SysMLv2Parser.OP_STAR_STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExponentiationOperator1" ):
                listener.enterRuleExponentiationOperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExponentiationOperator1" ):
                listener.exitRuleExponentiationOperator1(self)


    class RuleExponentiationOperator2Context(RuleExponentiationOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleExponentiationOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_HAT(self):
            return self.getToken(SysMLv2Parser.OP_HAT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExponentiationOperator2" ):
                listener.enterRuleExponentiationOperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExponentiationOperator2" ):
                listener.exitRuleExponentiationOperator2(self)



    def ruleExponentiationOperator(self):

        localctx = SysMLv2Parser.RuleExponentiationOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_ruleExponentiationOperator)
        try:
            self.state = 3836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                localctx = SysMLv2Parser.RuleExponentiationOperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3834
                self.match(SysMLv2Parser.OP_STAR_STAR)
                pass
            elif token in [168]:
                localctx = SysMLv2Parser.RuleExponentiationOperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3835
                self.match(SysMLv2Parser.OP_HAT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUnaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleUnaryExpression1Context(RuleUnaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleUnaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleUnaryOperator(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleUnaryOperatorContext,0)

        def ruleExtentExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExtentExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUnaryExpression1" ):
                listener.enterRuleUnaryExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUnaryExpression1" ):
                listener.exitRuleUnaryExpression1(self)


    class RuleUnaryExpression2Context(RuleUnaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleUnaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleExtentExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExtentExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUnaryExpression2" ):
                listener.enterRuleUnaryExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUnaryExpression2" ):
                listener.exitRuleUnaryExpression2(self)



    def ruleUnaryExpression(self):

        localctx = SysMLv2Parser.RuleUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_ruleUnaryExpression)
        try:
            self.state = 3842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87, 149, 164, 165]:
                localctx = SysMLv2Parser.RuleUnaryExpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3838
                self.ruleUnaryOperator()
                self.state = 3839
                self.ruleExtentExpression()
                pass
            elif token in [22, 113, 114, 115, 129, 133, 135, 142, 150, 169, 170, 171, 172, 173]:
                localctx = SysMLv2Parser.RuleUnaryExpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3841
                self.ruleExtentExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleUnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleUnaryOperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleUnaryOperator4Context(RuleUnaryOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleUnaryOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_NOT(self):
            return self.getToken(SysMLv2Parser.K_NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUnaryOperator4" ):
                listener.enterRuleUnaryOperator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUnaryOperator4" ):
                listener.exitRuleUnaryOperator4(self)


    class RuleUnaryOperator3Context(RuleUnaryOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleUnaryOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_TILDE(self):
            return self.getToken(SysMLv2Parser.OP_TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUnaryOperator3" ):
                listener.enterRuleUnaryOperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUnaryOperator3" ):
                listener.exitRuleUnaryOperator3(self)


    class RuleUnaryOperator2Context(RuleUnaryOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleUnaryOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_MINUS(self):
            return self.getToken(SysMLv2Parser.OP_MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUnaryOperator2" ):
                listener.enterRuleUnaryOperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUnaryOperator2" ):
                listener.exitRuleUnaryOperator2(self)


    class RuleUnaryOperator1Context(RuleUnaryOperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleUnaryOperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_PLUS(self):
            return self.getToken(SysMLv2Parser.OP_PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleUnaryOperator1" ):
                listener.enterRuleUnaryOperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleUnaryOperator1" ):
                listener.exitRuleUnaryOperator1(self)



    def ruleUnaryOperator(self):

        localctx = SysMLv2Parser.RuleUnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_ruleUnaryOperator)
        try:
            self.state = 3848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [164]:
                localctx = SysMLv2Parser.RuleUnaryOperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3844
                self.match(SysMLv2Parser.OP_PLUS)
                pass
            elif token in [165]:
                localctx = SysMLv2Parser.RuleUnaryOperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3845
                self.match(SysMLv2Parser.OP_MINUS)
                pass
            elif token in [149]:
                localctx = SysMLv2Parser.RuleUnaryOperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3846
                self.match(SysMLv2Parser.OP_TILDE)
                pass
            elif token in [87]:
                localctx = SysMLv2Parser.RuleUnaryOperator4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3847
                self.match(SysMLv2Parser.K_NOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExtentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExtentExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleExtentExpression2Context(RuleExtentExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleExtentExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rulePrimaryExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExtentExpression2" ):
                listener.enterRuleExtentExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExtentExpression2" ):
                listener.exitRuleExtentExpression2(self)


    class RuleExtentExpression1Context(RuleExtentExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleExtentExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ALL(self):
            return self.getToken(SysMLv2Parser.K_ALL, 0)
        def ruleTypeResultMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleTypeResultMemberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExtentExpression1" ):
                listener.enterRuleExtentExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExtentExpression1" ):
                listener.exitRuleExtentExpression1(self)



    def ruleExtentExpression(self):

        localctx = SysMLv2Parser.RuleExtentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_ruleExtentExpression)
        try:
            self.state = 3853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                localctx = SysMLv2Parser.RuleExtentExpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3850
                self.match(SysMLv2Parser.K_ALL)
                self.state = 3851
                self.ruleTypeResultMember()
                pass
            elif token in [113, 114, 115, 129, 133, 135, 142, 150, 169, 170, 171, 172, 173]:
                localctx = SysMLv2Parser.RuleExtentExpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3852
                self.rulePrimaryExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBaseExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBaseExpressionContext,0)


        def OP_DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_DOT)
            else:
                return self.getToken(SysMLv2Parser.OP_DOT, i)

        def ruleFeatureChainMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFeatureChainMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureChainMemberContext,i)


        def OP_HASH(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_HASH)
            else:
                return self.getToken(SysMLv2Parser.OP_HASH, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.LPAREN)
            else:
                return self.getToken(SysMLv2Parser.LPAREN, i)

        def ruleSequenceExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleSequenceExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleSequenceExpressionContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.RPAREN)
            else:
                return self.getToken(SysMLv2Parser.RPAREN, i)

        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.LSQUARE)
            else:
                return self.getToken(SysMLv2Parser.LSQUARE, i)

        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.RSQUARE)
            else:
                return self.getToken(SysMLv2Parser.RSQUARE, i)

        def OP_MINUS_RANGLE(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_MINUS_RANGLE)
            else:
                return self.getToken(SysMLv2Parser.OP_MINUS_RANGLE, i)

        def ruleReferenceTyping(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleReferenceTypingContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleReferenceTypingContext,i)


        def ruleBodyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleBodyExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleBodyExpressionContext,i)


        def OP_DOT_QMARK(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_DOT_QMARK)
            else:
                return self.getToken(SysMLv2Parser.OP_DOT_QMARK, i)

        def ruleFunctionReferenceExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleFunctionReferenceExpressionContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleFunctionReferenceExpressionContext,i)


        def ruleArgumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleArgumentListContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentListContext,i)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePrimaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePrimaryExpression" ):
                listener.enterRulePrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePrimaryExpression" ):
                listener.exitRulePrimaryExpression(self)




    def rulePrimaryExpression(self):

        localctx = SysMLv2Parser.RulePrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_rulePrimaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3855
            self.ruleBaseExpression()
            self.state = 3858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 3856
                self.match(SysMLv2Parser.OP_DOT)
                self.state = 3857
                self.ruleFeatureChainMember()


            self.state = 3888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 1835073) != 0):
                self.state = 3880
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [138]:
                    self.state = 3860
                    self.match(SysMLv2Parser.OP_HASH)
                    self.state = 3861
                    self.match(SysMLv2Parser.LPAREN)
                    self.state = 3862
                    self.ruleSequenceExpression()
                    self.state = 3863
                    self.match(SysMLv2Parser.RPAREN)
                    pass
                elif token in [132]:
                    self.state = 3865
                    self.match(SysMLv2Parser.LSQUARE)
                    self.state = 3866
                    self.ruleSequenceExpression()
                    self.state = 3867
                    self.match(SysMLv2Parser.RSQUARE)
                    pass
                elif token in [151]:
                    self.state = 3869
                    self.match(SysMLv2Parser.OP_MINUS_RANGLE)
                    self.state = 3870
                    self.ruleReferenceTyping()
                    self.state = 3874
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [129, 135]:
                        self.state = 3871
                        self.ruleBodyExpression()
                        pass
                    elif token in [171, 172]:
                        self.state = 3872
                        self.ruleFunctionReferenceExpression()
                        pass
                    elif token in [133]:
                        self.state = 3873
                        self.ruleArgumentList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [150]:
                    self.state = 3876
                    self.match(SysMLv2Parser.OP_DOT)
                    self.state = 3877
                    self.ruleBodyExpression()
                    pass
                elif token in [152]:
                    self.state = 3878
                    self.match(SysMLv2Parser.OP_DOT_QMARK)
                    self.state = 3879
                    self.ruleBodyExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 3882
                    self.match(SysMLv2Parser.OP_DOT)
                    self.state = 3883
                    self.ruleFeatureChainMember()


                self.state = 3890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFunctionReferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFunctionReferenceMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFunctionReferenceMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFunctionReferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFunctionReferenceExpression" ):
                listener.enterRuleFunctionReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFunctionReferenceExpression" ):
                listener.exitRuleFunctionReferenceExpression(self)




    def ruleFunctionReferenceExpression(self):

        localctx = SysMLv2Parser.RuleFunctionReferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_ruleFunctionReferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3891
            self.ruleFunctionReferenceMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFunctionReferenceMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFunctionReference(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFunctionReferenceContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFunctionReferenceMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFunctionReferenceMember" ):
                listener.enterRuleFunctionReferenceMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFunctionReferenceMember" ):
                listener.exitRuleFunctionReferenceMember(self)




    def ruleFunctionReferenceMember(self):

        localctx = SysMLv2Parser.RuleFunctionReferenceMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_ruleFunctionReferenceMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3893
            self.ruleFunctionReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFunctionReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleReferenceTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleReferenceTypingContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFunctionReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFunctionReference" ):
                listener.enterRuleFunctionReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFunctionReference" ):
                listener.exitRuleFunctionReference(self)




    def ruleFunctionReference(self):

        localctx = SysMLv2Parser.RuleFunctionReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_ruleFunctionReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3895
            self.ruleReferenceTyping()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureChainMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureChainMember

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFeatureChainMember1Context(RuleFeatureChainMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureChainMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureChainMember1" ):
                listener.enterRuleFeatureChainMember1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureChainMember1" ):
                listener.exitRuleFeatureChainMember1(self)


    class RuleFeatureChainMember2Context(RuleFeatureChainMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureChainMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedFeatureChain(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureChainMember2" ):
                listener.enterRuleFeatureChainMember2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureChainMember2" ):
                listener.exitRuleFeatureChainMember2(self)



    def ruleFeatureChainMember(self):

        localctx = SysMLv2Parser.RuleFeatureChainMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_ruleFeatureChainMember)
        try:
            self.state = 3899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleFeatureChainMember1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3897
                self.ruleQualifiedName()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleFeatureChainMember2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3898
                self.ruleOwnedFeatureChain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBaseExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleBaseExpression4Context(RuleBaseExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBaseExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleMetadataAccessExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleMetadataAccessExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBaseExpression4" ):
                listener.enterRuleBaseExpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBaseExpression4" ):
                listener.exitRuleBaseExpression4(self)


    class RuleBaseExpression3Context(RuleBaseExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBaseExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleFeatureReferenceExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureReferenceExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBaseExpression3" ):
                listener.enterRuleBaseExpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBaseExpression3" ):
                listener.exitRuleBaseExpression3(self)


    class RuleBaseExpression2Context(RuleBaseExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBaseExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleLiteralExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLiteralExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBaseExpression2" ):
                listener.enterRuleBaseExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBaseExpression2" ):
                listener.exitRuleBaseExpression2(self)


    class RuleBaseExpression1Context(RuleBaseExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBaseExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleNullExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNullExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBaseExpression1" ):
                listener.enterRuleBaseExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBaseExpression1" ):
                listener.exitRuleBaseExpression1(self)


    class RuleBaseExpression7Context(RuleBaseExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBaseExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(SysMLv2Parser.LPAREN, 0)
        def ruleSequenceExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSequenceExpressionContext,0)

        def RPAREN(self):
            return self.getToken(SysMLv2Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBaseExpression7" ):
                listener.enterRuleBaseExpression7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBaseExpression7" ):
                listener.exitRuleBaseExpression7(self)


    class RuleBaseExpression6Context(RuleBaseExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBaseExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleBodyExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBodyExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBaseExpression6" ):
                listener.enterRuleBaseExpression6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBaseExpression6" ):
                listener.exitRuleBaseExpression6(self)


    class RuleBaseExpression5Context(RuleBaseExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBaseExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleInvocationExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleInvocationExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBaseExpression5" ):
                listener.enterRuleBaseExpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBaseExpression5" ):
                listener.exitRuleBaseExpression5(self)



    def ruleBaseExpression(self):

        localctx = SysMLv2Parser.RuleBaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_ruleBaseExpression)
        try:
            self.state = 3911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleBaseExpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3901
                self.ruleNullExpression()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleBaseExpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3902
                self.ruleLiteralExpression()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleBaseExpression3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3903
                self.ruleFeatureReferenceExpression()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleBaseExpression4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3904
                self.ruleMetadataAccessExpression()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleBaseExpression5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3905
                self.ruleInvocationExpression()
                pass

            elif la_ == 6:
                localctx = SysMLv2Parser.RuleBaseExpression6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3906
                self.ruleBodyExpression()
                pass

            elif la_ == 7:
                localctx = SysMLv2Parser.RuleBaseExpression7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3907
                self.match(SysMLv2Parser.LPAREN)
                self.state = 3908
                self.ruleSequenceExpression()
                self.state = 3909
                self.match(SysMLv2Parser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBodyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleExpressionBodyMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExpressionBodyMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBodyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBodyExpression" ):
                listener.enterRuleBodyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBodyExpression" ):
                listener.exitRuleBodyExpression(self)




    def ruleBodyExpression(self):

        localctx = SysMLv2Parser.RuleBodyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_ruleBodyExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3913
            self.ruleExpressionBodyMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleExpressionBodyMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleExpressionBody(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleExpressionBodyContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleExpressionBodyMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleExpressionBodyMember" ):
                listener.enterRuleExpressionBodyMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleExpressionBodyMember" ):
                listener.exitRuleExpressionBodyMember(self)




    def ruleExpressionBodyMember(self):

        localctx = SysMLv2Parser.RuleExpressionBodyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_ruleExpressionBodyMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3915
            self.ruleExpressionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBodyParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBodyParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBodyParameter" ):
                listener.enterRuleBodyParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBodyParameter" ):
                listener.exitRuleBodyParameter(self)




    def ruleBodyParameter(self):

        localctx = SysMLv2Parser.RuleBodyParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_ruleBodyParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3917
            self.ruleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleSequenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def OP_COMMA(self):
            return self.getToken(SysMLv2Parser.OP_COMMA, 0)

        def ruleSequenceExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleSequenceExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleSequenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleSequenceExpression" ):
                listener.enterRuleSequenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleSequenceExpression" ):
                listener.exitRuleSequenceExpression(self)




    def ruleSequenceExpression(self):

        localctx = SysMLv2Parser.RuleSequenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_ruleSequenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3919
            self.ruleOwnedExpression()
            self.state = 3923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 3920
                self.match(SysMLv2Parser.OP_COMMA)

            elif la_ == 2:
                self.state = 3921
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 3922
                self.ruleSequenceExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureReferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFeatureReferenceMember(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureReferenceMemberContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureReferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureReferenceExpression" ):
                listener.enterRuleFeatureReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureReferenceExpression" ):
                listener.exitRuleFeatureReferenceExpression(self)




    def ruleFeatureReferenceExpression(self):

        localctx = SysMLv2Parser.RuleFeatureReferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_ruleFeatureReferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3925
            self.ruleFeatureReferenceMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureReferenceMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureReferenceMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureReferenceMember" ):
                listener.enterRuleFeatureReferenceMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureReferenceMember" ):
                listener.exitRuleFeatureReferenceMember(self)




    def ruleFeatureReferenceMember(self):

        localctx = SysMLv2Parser.RuleFeatureReferenceMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_ruleFeatureReferenceMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3927
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleMetadataAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def OP_DOT(self):
            return self.getToken(SysMLv2Parser.OP_DOT, 0)

        def K_METADATA(self):
            return self.getToken(SysMLv2Parser.K_METADATA, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleMetadataAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleMetadataAccessExpression" ):
                listener.enterRuleMetadataAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleMetadataAccessExpression" ):
                listener.exitRuleMetadataAccessExpression(self)




    def ruleMetadataAccessExpression(self):

        localctx = SysMLv2Parser.RuleMetadataAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_ruleMetadataAccessExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3929
            self.ruleQualifiedName()
            self.state = 3930
            self.match(SysMLv2Parser.OP_DOT)
            self.state = 3931
            self.match(SysMLv2Parser.K_METADATA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedFeatureTyping(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureTypingContext,0)


        def ruleArgumentList(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentListContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleInvocationExpression" ):
                listener.enterRuleInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleInvocationExpression" ):
                listener.exitRuleInvocationExpression(self)




    def ruleInvocationExpression(self):

        localctx = SysMLv2Parser.RuleInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_ruleInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3933
            self.ruleOwnedFeatureTyping()
            self.state = 3934
            self.ruleArgumentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedFeatureTypingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedFeatureTyping

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleOwnedFeatureTyping2Context(RuleOwnedFeatureTypingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOwnedFeatureTypingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleOwnedFeatureChain(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedFeatureTyping2" ):
                listener.enterRuleOwnedFeatureTyping2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedFeatureTyping2" ):
                listener.exitRuleOwnedFeatureTyping2(self)


    class RuleOwnedFeatureTyping1Context(RuleOwnedFeatureTypingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleOwnedFeatureTypingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedFeatureTyping1" ):
                listener.enterRuleOwnedFeatureTyping1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedFeatureTyping1" ):
                listener.exitRuleOwnedFeatureTyping1(self)



    def ruleOwnedFeatureTyping(self):

        localctx = SysMLv2Parser.RuleOwnedFeatureTypingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_ruleOwnedFeatureTyping)
        try:
            self.state = 3938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleOwnedFeatureTyping1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3936
                self.ruleQualifiedName()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleOwnedFeatureTyping2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3937
                self.ruleOwnedFeatureChain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedFeatureChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleFeatureChain(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleFeatureChainContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedFeatureChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedFeatureChain" ):
                listener.enterRuleOwnedFeatureChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedFeatureChain" ):
                listener.exitRuleOwnedFeatureChain(self)




    def ruleOwnedFeatureChain(self):

        localctx = SysMLv2Parser.RuleOwnedFeatureChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_ruleOwnedFeatureChain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3940
            self.ruleFeatureChain()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedFeatureChaining(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleOwnedFeatureChainingContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedFeatureChainingContext,i)


        def OP_DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_DOT)
            else:
                return self.getToken(SysMLv2Parser.OP_DOT, i)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureChain" ):
                listener.enterRuleFeatureChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureChain" ):
                listener.exitRuleFeatureChain(self)




    def ruleFeatureChain(self):

        localctx = SysMLv2Parser.RuleFeatureChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_ruleFeatureChain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3942
            self.ruleOwnedFeatureChaining()
            self.state = 3945 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3943
                    self.match(SysMLv2Parser.OP_DOT)
                    self.state = 3944
                    self.ruleOwnedFeatureChaining()

                else:
                    raise NoViableAltException(self)
                self.state = 3947 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,370,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleOwnedFeatureChainingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleOwnedFeatureChaining

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleOwnedFeatureChaining" ):
                listener.enterRuleOwnedFeatureChaining(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleOwnedFeatureChaining" ):
                listener.exitRuleOwnedFeatureChaining(self)




    def ruleOwnedFeatureChaining(self):

        localctx = SysMLv2Parser.RuleOwnedFeatureChainingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_ruleOwnedFeatureChaining)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3949
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SysMLv2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SysMLv2Parser.RPAREN, 0)

        def rulePositionalArgumentList(self):
            return self.getTypedRuleContext(SysMLv2Parser.RulePositionalArgumentListContext,0)


        def ruleNamedArgumentList(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNamedArgumentListContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleArgumentList" ):
                listener.enterRuleArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleArgumentList" ):
                listener.exitRuleArgumentList(self)




    def ruleArgumentList(self):

        localctx = SysMLv2Parser.RuleArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_ruleArgumentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3951
            self.match(SysMLv2Parser.LPAREN)
            self.state = 3954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 3952
                self.rulePositionalArgumentList()

            elif la_ == 2:
                self.state = 3953
                self.ruleNamedArgumentList()


            self.state = 3956
            self.match(SysMLv2Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePositionalArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleArgumentMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleArgumentMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentMemberContext,i)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePositionalArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePositionalArgumentList" ):
                listener.enterRulePositionalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePositionalArgumentList" ):
                listener.exitRulePositionalArgumentList(self)




    def rulePositionalArgumentList(self):

        localctx = SysMLv2Parser.RulePositionalArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_rulePositionalArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3958
            self.ruleArgumentMember()
            self.state = 3963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 3959
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 3960
                self.ruleArgumentMember()
                self.state = 3965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleArgumentMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleArgument(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleArgumentMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleArgumentMember" ):
                listener.enterRuleArgumentMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleArgumentMember" ):
                listener.exitRuleArgumentMember(self)




    def ruleArgumentMember(self):

        localctx = SysMLv2Parser.RuleArgumentMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_ruleArgumentMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3966
            self.ruleArgument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleArgumentValue(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentValueContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleArgument" ):
                listener.enterRuleArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleArgument" ):
                listener.exitRuleArgument(self)




    def ruleArgument(self):

        localctx = SysMLv2Parser.RuleArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_ruleArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3968
            self.ruleArgumentValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNamedArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleNamedArgumentMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleNamedArgumentMemberContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleNamedArgumentMemberContext,i)


        def OP_COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COMMA)
            else:
                return self.getToken(SysMLv2Parser.OP_COMMA, i)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNamedArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNamedArgumentList" ):
                listener.enterRuleNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNamedArgumentList" ):
                listener.exitRuleNamedArgumentList(self)




    def ruleNamedArgumentList(self):

        localctx = SysMLv2Parser.RuleNamedArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_ruleNamedArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3970
            self.ruleNamedArgumentMember()
            self.state = 3975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 3971
                self.match(SysMLv2Parser.OP_COMMA)
                self.state = 3972
                self.ruleNamedArgumentMember()
                self.state = 3977
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNamedArgumentMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleNamedArgument(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNamedArgumentContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNamedArgumentMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNamedArgumentMember" ):
                listener.enterRuleNamedArgumentMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNamedArgumentMember" ):
                listener.exitRuleNamedArgumentMember(self)




    def ruleNamedArgumentMember(self):

        localctx = SysMLv2Parser.RuleNamedArgumentMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_ruleNamedArgumentMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3978
            self.ruleNamedArgument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNamedArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleParameterRedefinition(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleParameterRedefinitionContext,0)


        def OP_EQ(self):
            return self.getToken(SysMLv2Parser.OP_EQ, 0)

        def ruleArgumentValue(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleArgumentValueContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNamedArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNamedArgument" ):
                listener.enterRuleNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNamedArgument" ):
                listener.exitRuleNamedArgument(self)




    def ruleNamedArgument(self):

        localctx = SysMLv2Parser.RuleNamedArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_ruleNamedArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3980
            self.ruleParameterRedefinition()
            self.state = 3981
            self.match(SysMLv2Parser.OP_EQ)
            self.state = 3982
            self.ruleArgumentValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleParameterRedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleQualifiedName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualifiedNameContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleParameterRedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleParameterRedefinition" ):
                listener.enterRuleParameterRedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleParameterRedefinition" ):
                listener.exitRuleParameterRedefinition(self)




    def ruleParameterRedefinition(self):

        localctx = SysMLv2Parser.RuleParameterRedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_ruleParameterRedefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3984
            self.ruleQualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleArgumentValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleOwnedExpression(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleOwnedExpressionContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleArgumentValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleArgumentValue" ):
                listener.enterRuleArgumentValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleArgumentValue" ):
                listener.exitRuleArgumentValue(self)




    def ruleArgumentValue(self):

        localctx = SysMLv2Parser.RuleArgumentValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_ruleArgumentValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3986
            self.ruleOwnedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNullExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NULL(self):
            return self.getToken(SysMLv2Parser.K_NULL, 0)

        def LPAREN(self):
            return self.getToken(SysMLv2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SysMLv2Parser.RPAREN, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleNullExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleNullExpression" ):
                listener.enterRuleNullExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleNullExpression" ):
                listener.exitRuleNullExpression(self)




    def ruleNullExpression(self):

        localctx = SysMLv2Parser.RuleNullExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_ruleNullExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.state = 3988
                self.match(SysMLv2Parser.K_NULL)
                pass
            elif token in [133]:
                self.state = 3989
                self.match(SysMLv2Parser.LPAREN)
                self.state = 3990
                self.match(SysMLv2Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleLiteralExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleLiteralExpression1Context(RuleLiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleLiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleLiteralBoolean(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLiteralBooleanContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralExpression1" ):
                listener.enterRuleLiteralExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralExpression1" ):
                listener.exitRuleLiteralExpression1(self)


    class RuleLiteralExpression2Context(RuleLiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleLiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleLiteralString(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLiteralStringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralExpression2" ):
                listener.enterRuleLiteralExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralExpression2" ):
                listener.exitRuleLiteralExpression2(self)


    class RuleLiteralExpression3Context(RuleLiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleLiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleLiteralInteger(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLiteralIntegerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralExpression3" ):
                listener.enterRuleLiteralExpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralExpression3" ):
                listener.exitRuleLiteralExpression3(self)


    class RuleLiteralExpression4Context(RuleLiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleLiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleLiteralReal(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLiteralRealContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralExpression4" ):
                listener.enterRuleLiteralExpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralExpression4" ):
                listener.exitRuleLiteralExpression4(self)


    class RuleLiteralExpression5Context(RuleLiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleLiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ruleLiteralInfinity(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleLiteralInfinityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralExpression5" ):
                listener.enterRuleLiteralExpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralExpression5" ):
                listener.exitRuleLiteralExpression5(self)



    def ruleLiteralExpression(self):

        localctx = SysMLv2Parser.RuleLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_ruleLiteralExpression)
        try:
            self.state = 3998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                localctx = SysMLv2Parser.RuleLiteralExpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3993
                self.ruleLiteralBoolean()
                pass

            elif la_ == 2:
                localctx = SysMLv2Parser.RuleLiteralExpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3994
                self.ruleLiteralString()
                pass

            elif la_ == 3:
                localctx = SysMLv2Parser.RuleLiteralExpression3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3995
                self.ruleLiteralInteger()
                pass

            elif la_ == 4:
                localctx = SysMLv2Parser.RuleLiteralExpression4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3996
                self.ruleLiteralReal()
                pass

            elif la_ == 5:
                localctx = SysMLv2Parser.RuleLiteralExpression5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3997
                self.ruleLiteralInfinity()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLiteralBooleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleBooleanValue(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleBooleanValueContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleLiteralBoolean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralBoolean" ):
                listener.enterRuleLiteralBoolean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralBoolean" ):
                listener.exitRuleLiteralBoolean(self)




    def ruleLiteralBoolean(self):

        localctx = SysMLv2Parser.RuleLiteralBooleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_ruleLiteralBoolean)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4000
            self.ruleBooleanValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleBooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleBooleanValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleBooleanValue1Context(RuleBooleanValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBooleanValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TRUE(self):
            return self.getToken(SysMLv2Parser.K_TRUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBooleanValue1" ):
                listener.enterRuleBooleanValue1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBooleanValue1" ):
                listener.exitRuleBooleanValue1(self)


    class RuleBooleanValue2Context(RuleBooleanValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleBooleanValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FALSE(self):
            return self.getToken(SysMLv2Parser.K_FALSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleBooleanValue2" ):
                listener.enterRuleBooleanValue2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleBooleanValue2" ):
                listener.exitRuleBooleanValue2(self)



    def ruleBooleanValue(self):

        localctx = SysMLv2Parser.RuleBooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_ruleBooleanValue)
        try:
            self.state = 4004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                localctx = SysMLv2Parser.RuleBooleanValue1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4002
                self.match(SysMLv2Parser.K_TRUE)
                pass
            elif token in [115]:
                localctx = SysMLv2Parser.RuleBooleanValue2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4003
                self.match(SysMLv2Parser.K_FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLiteralStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_STRING_VALUE(self):
            return self.getToken(SysMLv2Parser.RULE_STRING_VALUE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleLiteralString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralString" ):
                listener.enterRuleLiteralString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralString" ):
                listener.exitRuleLiteralString(self)




    def ruleLiteralString(self):

        localctx = SysMLv2Parser.RuleLiteralStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_ruleLiteralString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4006
            self.match(SysMLv2Parser.RULE_STRING_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLiteralIntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_DECIMAL_VALUE(self):
            return self.getToken(SysMLv2Parser.RULE_DECIMAL_VALUE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleLiteralInteger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralInteger" ):
                listener.enterRuleLiteralInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralInteger" ):
                listener.exitRuleLiteralInteger(self)




    def ruleLiteralInteger(self):

        localctx = SysMLv2Parser.RuleLiteralIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_ruleLiteralInteger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4008
            self.match(SysMLv2Parser.RULE_DECIMAL_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLiteralRealContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRealValue(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleRealValueContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleLiteralReal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralReal" ):
                listener.enterRuleLiteralReal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralReal" ):
                listener.exitRuleLiteralReal(self)




    def ruleLiteralReal(self):

        localctx = SysMLv2Parser.RuleLiteralRealContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_ruleLiteralReal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4010
            self.ruleRealValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRealValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRealValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleRealValue2Context(RuleRealValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRealValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RULE_EXP_VALUE(self):
            return self.getToken(SysMLv2Parser.RULE_EXP_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRealValue2" ):
                listener.enterRuleRealValue2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRealValue2" ):
                listener.exitRuleRealValue2(self)


    class RuleRealValue1Context(RuleRealValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRealValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OP_DOT(self):
            return self.getToken(SysMLv2Parser.OP_DOT, 0)
        def RULE_DECIMAL_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.RULE_DECIMAL_VALUE)
            else:
                return self.getToken(SysMLv2Parser.RULE_DECIMAL_VALUE, i)
        def RULE_EXP_VALUE(self):
            return self.getToken(SysMLv2Parser.RULE_EXP_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRealValue1" ):
                listener.enterRuleRealValue1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRealValue1" ):
                listener.exitRuleRealValue1(self)



    def ruleRealValue(self):

        localctx = SysMLv2Parser.RuleRealValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_ruleRealValue)
        self._la = 0 # Token type
        try:
            self.state = 4018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [150, 169]:
                localctx = SysMLv2Parser.RuleRealValue1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==169:
                    self.state = 4012
                    self.match(SysMLv2Parser.RULE_DECIMAL_VALUE)


                self.state = 4015
                self.match(SysMLv2Parser.OP_DOT)
                self.state = 4016
                _la = self._input.LA(1)
                if not(_la==169 or _la==170):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [170]:
                localctx = SysMLv2Parser.RuleRealValue2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4017
                self.match(SysMLv2Parser.RULE_EXP_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLiteralInfinityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_STAR(self):
            return self.getToken(SysMLv2Parser.OP_STAR, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleLiteralInfinity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLiteralInfinity" ):
                listener.enterRuleLiteralInfinity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLiteralInfinity" ):
                listener.exitRuleLiteralInfinity(self)




    def ruleLiteralInfinity(self):

        localctx = SysMLv2Parser.RuleLiteralInfinityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_ruleLiteralInfinity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4020
            self.match(SysMLv2Parser.OP_STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleName

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleName1Context(RuleNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RULE_ID(self):
            return self.getToken(SysMLv2Parser.RULE_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleName1" ):
                listener.enterRuleName1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleName1" ):
                listener.exitRuleName1(self)


    class RuleName2Context(RuleNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RULE_UNRESTRICTED_NAME(self):
            return self.getToken(SysMLv2Parser.RULE_UNRESTRICTED_NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleName2" ):
                listener.enterRuleName2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleName2" ):
                listener.exitRuleName2(self)



    def ruleName(self):

        localctx = SysMLv2Parser.RuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_ruleName)
        try:
            self.state = 4024
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                localctx = SysMLv2Parser.RuleName1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4022
                self.match(SysMLv2Parser.RULE_ID)
                pass
            elif token in [172]:
                localctx = SysMLv2Parser.RuleName2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4023
                self.match(SysMLv2Parser.RULE_UNRESTRICTED_NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleQualificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SysMLv2Parser.RuleNameContext)
            else:
                return self.getTypedRuleContext(SysMLv2Parser.RuleNameContext,i)


        def OP_COLON_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(SysMLv2Parser.OP_COLON_COLON)
            else:
                return self.getToken(SysMLv2Parser.OP_COLON_COLON, i)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleQualification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleQualification" ):
                listener.enterRuleQualification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleQualification" ):
                listener.exitRuleQualification(self)




    def ruleQualification(self):

        localctx = SysMLv2Parser.RuleQualificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_ruleQualification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4029 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4026
                    self.ruleName()
                    self.state = 4027
                    self.match(SysMLv2Parser.OP_COLON_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 4031 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,380,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleName(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleNameContext,0)


        def ruleQualification(self):
            return self.getTypedRuleContext(SysMLv2Parser.RuleQualificationContext,0)


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleQualifiedName" ):
                listener.enterRuleQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleQualifiedName" ):
                listener.exitRuleQualifiedName(self)




    def ruleQualifiedName(self):

        localctx = SysMLv2Parser.RuleQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_ruleQualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.state = 4033
                self.ruleQualification()


            self.state = 4036
            self.ruleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFilterPackageMemberVisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(SysMLv2Parser.LSQUARE, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFilterPackageMemberVisibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFilterPackageMemberVisibility" ):
                listener.enterRuleFilterPackageMemberVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFilterPackageMemberVisibility" ):
                listener.exitRuleFilterPackageMemberVisibility(self)




    def ruleFilterPackageMemberVisibility(self):

        localctx = SysMLv2Parser.RuleFilterPackageMemberVisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_ruleFilterPackageMemberVisibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4038
            self.match(SysMLv2Parser.LSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleVisibilityIndicatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleVisibilityIndicator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleVisibilityIndicator3Context(RuleVisibilityIndicatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVisibilityIndicatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PROTECTED(self):
            return self.getToken(SysMLv2Parser.K_PROTECTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVisibilityIndicator3" ):
                listener.enterRuleVisibilityIndicator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVisibilityIndicator3" ):
                listener.exitRuleVisibilityIndicator3(self)


    class RuleVisibilityIndicator1Context(RuleVisibilityIndicatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVisibilityIndicatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PUBLIC(self):
            return self.getToken(SysMLv2Parser.K_PUBLIC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVisibilityIndicator1" ):
                listener.enterRuleVisibilityIndicator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVisibilityIndicator1" ):
                listener.exitRuleVisibilityIndicator1(self)


    class RuleVisibilityIndicator2Context(RuleVisibilityIndicatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleVisibilityIndicatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PRIVATE(self):
            return self.getToken(SysMLv2Parser.K_PRIVATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleVisibilityIndicator2" ):
                listener.enterRuleVisibilityIndicator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleVisibilityIndicator2" ):
                listener.exitRuleVisibilityIndicator2(self)



    def ruleVisibilityIndicator(self):

        localctx = SysMLv2Parser.RuleVisibilityIndicatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_ruleVisibilityIndicator)
        try:
            self.state = 4043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116]:
                localctx = SysMLv2Parser.RuleVisibilityIndicator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4040
                self.match(SysMLv2Parser.K_PUBLIC)
                pass
            elif token in [117]:
                localctx = SysMLv2Parser.RuleVisibilityIndicator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4041
                self.match(SysMLv2Parser.K_PRIVATE)
                pass
            elif token in [118]:
                localctx = SysMLv2Parser.RuleVisibilityIndicator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4042
                self.match(SysMLv2Parser.K_PROTECTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFeatureDirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFeatureDirection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleFeatureDirection1Context(RuleFeatureDirectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureDirectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_IN(self):
            return self.getToken(SysMLv2Parser.K_IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureDirection1" ):
                listener.enterRuleFeatureDirection1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureDirection1" ):
                listener.exitRuleFeatureDirection1(self)


    class RuleFeatureDirection2Context(RuleFeatureDirectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureDirectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_OUT(self):
            return self.getToken(SysMLv2Parser.K_OUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureDirection2" ):
                listener.enterRuleFeatureDirection2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureDirection2" ):
                listener.exitRuleFeatureDirection2(self)


    class RuleFeatureDirection3Context(RuleFeatureDirectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleFeatureDirectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_INOUT(self):
            return self.getToken(SysMLv2Parser.K_INOUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFeatureDirection3" ):
                listener.enterRuleFeatureDirection3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFeatureDirection3" ):
                listener.exitRuleFeatureDirection3(self)



    def ruleFeatureDirection(self):

        localctx = SysMLv2Parser.RuleFeatureDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_ruleFeatureDirection)
        try:
            self.state = 4048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                localctx = SysMLv2Parser.RuleFeatureDirection1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4045
                self.match(SysMLv2Parser.K_IN)
                pass
            elif token in [119]:
                localctx = SysMLv2Parser.RuleFeatureDirection2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4046
                self.match(SysMLv2Parser.K_OUT)
                pass
            elif token in [120]:
                localctx = SysMLv2Parser.RuleFeatureDirection3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4047
                self.match(SysMLv2Parser.K_INOUT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulePortionKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_rulePortionKind

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RulePortionKind2Context(RulePortionKindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePortionKindContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TIMESLICE(self):
            return self.getToken(SysMLv2Parser.K_TIMESLICE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePortionKind2" ):
                listener.enterRulePortionKind2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePortionKind2" ):
                listener.exitRulePortionKind2(self)


    class RulePortionKind1Context(RulePortionKindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RulePortionKindContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SNAPSHOT(self):
            return self.getToken(SysMLv2Parser.K_SNAPSHOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulePortionKind1" ):
                listener.enterRulePortionKind1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulePortionKind1" ):
                listener.exitRulePortionKind1(self)



    def rulePortionKind(self):

        localctx = SysMLv2Parser.RulePortionKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_rulePortionKind)
        try:
            self.state = 4052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                localctx = SysMLv2Parser.RulePortionKind1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4050
                self.match(SysMLv2Parser.K_SNAPSHOT)
                pass
            elif token in [122]:
                localctx = SysMLv2Parser.RulePortionKind2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4051
                self.match(SysMLv2Parser.K_TIMESLICE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTriggerFeatureKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ACCEPT(self):
            return self.getToken(SysMLv2Parser.K_ACCEPT, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleTriggerFeatureKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleTriggerFeatureKind" ):
                listener.enterRuleTriggerFeatureKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleTriggerFeatureKind" ):
                listener.exitRuleTriggerFeatureKind(self)




    def ruleTriggerFeatureKind(self):

        localctx = SysMLv2Parser.RuleTriggerFeatureKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_ruleTriggerFeatureKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4054
            self.match(SysMLv2Parser.K_ACCEPT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleGuardFeatureKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IF(self):
            return self.getToken(SysMLv2Parser.K_IF, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleGuardFeatureKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleGuardFeatureKind" ):
                listener.enterRuleGuardFeatureKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleGuardFeatureKind" ):
                listener.exitRuleGuardFeatureKind(self)




    def ruleGuardFeatureKind(self):

        localctx = SysMLv2Parser.RuleGuardFeatureKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_ruleGuardFeatureKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4056
            self.match(SysMLv2Parser.K_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleEffectFeatureKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DO(self):
            return self.getToken(SysMLv2Parser.K_DO, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleEffectFeatureKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleEffectFeatureKind" ):
                listener.enterRuleEffectFeatureKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleEffectFeatureKind" ):
                listener.exitRuleEffectFeatureKind(self)




    def ruleEffectFeatureKind(self):

        localctx = SysMLv2Parser.RuleEffectFeatureKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_ruleEffectFeatureKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4058
            self.match(SysMLv2Parser.K_DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementConstraintKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementConstraintKind

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RuleRequirementConstraintKind2Context(RuleRequirementConstraintKindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementConstraintKindContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_REQUIRE(self):
            return self.getToken(SysMLv2Parser.K_REQUIRE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementConstraintKind2" ):
                listener.enterRuleRequirementConstraintKind2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementConstraintKind2" ):
                listener.exitRuleRequirementConstraintKind2(self)


    class RuleRequirementConstraintKind1Context(RuleRequirementConstraintKindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SysMLv2Parser.RuleRequirementConstraintKindContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ASSUME(self):
            return self.getToken(SysMLv2Parser.K_ASSUME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementConstraintKind1" ):
                listener.enterRuleRequirementConstraintKind1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementConstraintKind1" ):
                listener.exitRuleRequirementConstraintKind1(self)



    def ruleRequirementConstraintKind(self):

        localctx = SysMLv2Parser.RuleRequirementConstraintKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_ruleRequirementConstraintKind)
        try:
            self.state = 4062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                localctx = SysMLv2Parser.RuleRequirementConstraintKind1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4060
                self.match(SysMLv2Parser.K_ASSUME)
                pass
            elif token in [124]:
                localctx = SysMLv2Parser.RuleRequirementConstraintKind2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4061
                self.match(SysMLv2Parser.K_REQUIRE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleFramedConcernKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_FRAME(self):
            return self.getToken(SysMLv2Parser.K_FRAME, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleFramedConcernKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleFramedConcernKind" ):
                listener.enterRuleFramedConcernKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleFramedConcernKind" ):
                listener.exitRuleFramedConcernKind(self)




    def ruleFramedConcernKind(self):

        localctx = SysMLv2Parser.RuleFramedConcernKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_ruleFramedConcernKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4064
            self.match(SysMLv2Parser.K_FRAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRequirementVerificationKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VERIFY(self):
            return self.getToken(SysMLv2Parser.K_VERIFY, 0)

        def getRuleIndex(self):
            return SysMLv2Parser.RULE_ruleRequirementVerificationKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRequirementVerificationKind" ):
                listener.enterRuleRequirementVerificationKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRequirementVerificationKind" ):
                listener.exitRuleRequirementVerificationKind(self)




    def ruleRequirementVerificationKind(self):

        localctx = SysMLv2Parser.RuleRequirementVerificationKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_ruleRequirementVerificationKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4066
            self.match(SysMLv2Parser.K_VERIFY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





